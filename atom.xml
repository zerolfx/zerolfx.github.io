<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zerol&#39;s Notes</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-07T15:16:18.979Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zerol</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【题解】EOJ - 棋盘上的車 (bzoj 2616 - SPOJ PERIODNI)</title>
    <link href="http://yoursite.com/2017/12/07/PERIODNI/"/>
    <id>http://yoursite.com/2017/12/07/PERIODNI/</id>
    <published>2017-12-07T14:37:30.000Z</published>
    <updated>2017-12-07T15:16:18.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="http://acm.ecnu.edu.cn/problem/3438/" target="_blank" rel="noopener">http://acm.ecnu.edu.cn/problem/3438/</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个由 n 条高度不等的列组成的棋盘，其中所有列的底边位于同一水平线上。求放置 k 个互不攻击的車的方案总数。（車能互相攻击当且仅当能通过棋盘上连续的一行或一列格子直接连在一起）<br><a id="more"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li><p>观察到从最下面一行开始往上，行断开后不可能重新接在一起，所以从断开处横向切开<strong>很可能</strong>可以分解为两个子问题。当然也可以把它看做是一棵树，树上的每一个结点有高和宽，只有有公共边的情形下两个结点才会相连。</p></li><li><p>但是如果不建树则可以看成区间 dp。</p></li><li><p>$dp[x][k]$ 表示底为 $[l, r]$ 子树（子树根节点编号为 $x$）上恰好放置 $k$ 个的方案数。</p></li><li><p>这棵树为二叉树，也就是一个区间从区间最小值那里分割出两个结点。但是如果区间内有多个最小值，那么任取一个即可，省去了很多麻烦。（至于为什么是对的，因为计算中允许了高度为 0 的结点。）</p></li><li><p>设当前结点为 x，两个子结点分别为 a, b，当前结点的高度和宽度分别为 $height$ 和 $length$。</p></li><li><p>枚举当前结点以及 a 和 b 放置的車的数目得到状态转移方程</p><p>$$dp[x][k]=\displaystyle \sum_{i=0}^{k} {length \choose i} {height \choose i} i!\sum_{j=0}^{k-i}dp[a][j] \times dp[b][k-i-j]$$</p></li><li><p>可惜这样会超时，所以预处理后面一个求和符号中的值，记为$g[k-i]$，那么有$g[k]=\sum_{i=0}^k dp[a][i] \times dp[b][k-i]$，可以在 $O(length^2)$ 内预处理。</p></li><li><p>此时状态转移方程变为$dp[x][k]=\displaystyle \sum_{i=0}^{k} {length \choose i} {height \choose i} i! \times g[k-i]$，也可以在 $O(length^2)$ 内处理出来（还要枚举 k）。当然这道题还需要预处理阶乘以及阶乘的逆元使得组合数计算$O(1)$才能做到这个复杂度。</p></li><li><p>所以总复杂度为 $O(n^4)$。</p><p>​</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(args...) do &#123; cout <span class="meta-string">&lt;&lt; "\033[32;1m" &lt;&lt; #args&lt;&lt; " -&gt; "; err(args); &#125; while (0)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(...)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"\033[39;0m"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T a, Args... args)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">' '</span>; err(args...); &#125;</div><div class="line"><span class="comment">// -----------------------------------------------------------------------------</span></div><div class="line"><span class="keyword">const</span> LL maxn = <span class="number">5E2</span> + <span class="number">100</span>, MOD = <span class="number">1E9</span> + <span class="number">7</span>, M = <span class="number">1E6</span> + <span class="number">10</span>;</div><div class="line">LL h[maxn], f[maxn][maxn], g[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(LL&amp; a, LL b)</span> </span>&#123; (a += b) %= MOD; &#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">pown</span><span class="params">(LL x, LL n, LL MOD)</span> </span>&#123;</div><div class="line">    LL ret = MOD != <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (x %= MOD; n; n &gt;&gt;= <span class="number">1</span>, x = x * x % MOD)</div><div class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = ret * x % MOD;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL invf[M], fac[M];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fac_inv_init</span><span class="params">(LL n, LL p)</span> </span>&#123;</div><div class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    FOR (i, <span class="number">1</span>, n)</div><div class="line">        fac[i] = i * fac[i - <span class="number">1</span>] % p;</div><div class="line">    invf[n - <span class="number">1</span>] = pown(fac[n - <span class="number">1</span>], p - <span class="number">2</span>, p);</div><div class="line">    FORD (i, n - <span class="number">2</span>, <span class="number">-1</span>)</div><div class="line">        invf[i] = invf[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">C</span><span class="params">(LL n, LL m)</span> </span>&#123; <span class="comment">// m &gt;= n &gt;= 0</span></div><div class="line">    <span class="keyword">return</span> m &lt; n || n &lt; <span class="number">0</span> ? <span class="number">0</span> : fac[m] * invf[n] % MOD * invf[m - n] % MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">go</span><span class="params">(LL l, LL r, LL d)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// trick!</span></div><div class="line">    LL k = r;</div><div class="line">    FOR (i, l, r)</div><div class="line">        <span class="keyword">if</span> (h[i] &lt; h[k]) k = i;</div><div class="line">    LL len = r - l + <span class="number">1</span>, height = h[k] - d;</div><div class="line">    LL a = go(l, k - <span class="number">1</span>, h[k]), b = go(k + <span class="number">1</span>, r, h[k]);</div><div class="line">    fill(g, g + len + <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    FOR (i, <span class="number">0</span>, k - l + <span class="number">1</span>)  <span class="comment">// (k - 1) - l + 1</span></div><div class="line">        FOR (j, <span class="number">0</span>, r - k + <span class="number">1</span>) <span class="comment">// r - (k + 1) + 1</span></div><div class="line">            up(g[i + j], f[a][i] * f[b][j]);</div><div class="line">    FOR (i, <span class="number">0</span>, len + <span class="number">1</span>)</div><div class="line">        FOR (t, <span class="number">0</span>, i + <span class="number">1</span>)</div><div class="line">             up(f[k][i], g[i - t] * C(t, len - (i - t)) % MOD * C(t, height) % MOD * fac[t]);</div><div class="line">    <span class="keyword">return</span> k;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line">    freopen(<span class="string">"in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    fac_inv_init(M, MOD);</div><div class="line">    <span class="keyword">int</span> n, k;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</div><div class="line">    FOR (i, <span class="number">1</span>, n + <span class="number">1</span>) <span class="built_in">cin</span> &gt;&gt; h[i];</div><div class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// trick!</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; f[go(<span class="number">1</span>, n, <span class="number">0</span>)][k] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://acm.ecnu.edu.cn/problem/3438/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.ecnu.edu.cn/problem/3438/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给定一个由 n 条高度不等的列组成的棋盘，其中所有列的底边位于同一水平线上。求放置 k 个互不攻击的車的方案总数。（車能互相攻击当且仅当能通过棋盘上连续的一行或一列格子直接连在一起）&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Brick Tiling</title>
    <link href="http://yoursite.com/2017/12/07/Brick-Tiling/"/>
    <id>http://yoursite.com/2017/12/07/Brick-Tiling/</id>
    <published>2017-12-07T07:12:49.000Z</published>
    <updated>2017-12-07T07:18:40.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://www.hackerrank.com/challenges/brick-tiling/problem" target="_blank" rel="noopener">https://www.hackerrank.com/challenges/brick-tiling/problem</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个有若干个障碍的棋盘，求用 2*3 的 L 型砖头填满的方案数。<br><a id="more"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>很可惜，这并不是插头 dp。</li><li>状态就是正在填第 r 行，从当前行开始的前 3 行的当前状态为 a, b, c。</li><li>有些像数位 dp，并非记忆化所有状态，而是只记录前 r 行填满，后两行状态为 b, c 的方案数。</li><li>最后为了防止方案被重复计算，要求这次必须填第 r 行的最后一个空位。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(args...) do &#123; cout <span class="meta-string">&lt;&lt; "\033[32;1m" &lt;&lt; #args&lt;&lt; " -&gt; "; err(args); &#125; while (0)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(...)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"\033[39;0m"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T a, Args... args)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">' '</span>; err(args...); &#125;</div><div class="line"><span class="comment">// -----------------------------------------------------------------------------</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1</span> &lt;&lt; <span class="number">8</span>, maxn = <span class="number">20</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> LL MOD = <span class="number">1E9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M2[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">7</span>, <span class="number">1</span>&#125;, &#123;<span class="number">7</span>, <span class="number">4</span>&#125;, &#123;<span class="number">1</span>, <span class="number">7</span>&#125;, &#123;<span class="number">4</span>, <span class="number">7</span>&#125;&#125;;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M3[<span class="number">4</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>&#125;, &#123;<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>&#125;&#125;;</div><div class="line"><span class="keyword">int</span> T, n, m, ALL;</div><div class="line"><span class="keyword">int</span> G[maxn];</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line">LL f[maxn][maxm][maxm];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">go</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (a == ALL) &#123;</div><div class="line">        <span class="keyword">if</span> (r == n) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        LL&amp; ret = f[r][b][c];</div><div class="line">        <span class="keyword">if</span> (ret != <span class="number">-1</span>) <span class="keyword">return</span> ret;</div><div class="line">        <span class="keyword">return</span> ret = go(r + <span class="number">1</span>, b, c, G[r + <span class="number">3</span>]);</div><div class="line">    &#125;</div><div class="line">    LL ret = <span class="number">0</span>;</div><div class="line">    LL target = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (a &amp; target) target &lt;&lt;= <span class="number">1</span>;</div><div class="line">    FOR (i, <span class="number">0</span>, m - <span class="number">2</span>)</div><div class="line">        FOR (t, <span class="number">0</span>, <span class="number">4</span>) &#123;</div><div class="line">            <span class="keyword">int</span> m1 = M2[t][<span class="number">0</span>] &lt;&lt; i;</div><div class="line">            <span class="keyword">int</span> m2 = M2[t][<span class="number">1</span>] &lt;&lt; i;</div><div class="line">            <span class="keyword">if</span> (!(m1 &amp; target) || (a &amp; m1) || (b &amp; m2)) <span class="keyword">continue</span>;</div><div class="line">            ret += go(r, a | m1, b | m2, c);</div><div class="line">        &#125;</div><div class="line">    FOR (i, <span class="number">0</span>, m - <span class="number">1</span>)</div><div class="line">        FOR (t, <span class="number">0</span>, <span class="number">4</span>) &#123;</div><div class="line">            <span class="keyword">int</span> m1 = M3[t][<span class="number">0</span>] &lt;&lt; i;</div><div class="line">            <span class="keyword">int</span> m2 = M3[t][<span class="number">1</span>] &lt;&lt; i;</div><div class="line">            <span class="keyword">int</span> m3 = M3[t][<span class="number">2</span>] &lt;&lt; i;</div><div class="line">            <span class="keyword">if</span> (!(m1 &amp; target) || (a &amp; m1) || (b &amp; m2) || (c &amp; m3)) <span class="keyword">continue</span>;</div><div class="line">            ret += go(r, a | m1, b | m2, c | m3);</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> ret % MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line">    freopen(<span class="string">"in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="built_in">cin</span> &gt;&gt; T;</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</div><div class="line">        init();</div><div class="line">        FOR (i, <span class="number">0</span>, n) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">            FOR (j, <span class="number">0</span>, m)</div><div class="line">                <span class="keyword">if</span> (s[j] == <span class="string">'#'</span>)</div><div class="line">                    G[i] |= <span class="number">1</span> &lt;&lt; j;</div><div class="line">        &#125;</div><div class="line">        G[n] = G[n + <span class="number">1</span>] = ALL;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; go(<span class="number">0</span>, G[<span class="number">0</span>], G[<span class="number">1</span>], G[<span class="number">2</span>]) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    ALL = (<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span>;</div><div class="line">    <span class="built_in">memset</span>(G, <span class="number">0</span>, <span class="keyword">sizeof</span> G);</div><div class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/brick-tiling/problem&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.hackerrank.com/challenges/brick-tiling/problem&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给定一个有若干个障碍的棋盘，求用 2*3 的 L 型砖头填满的方案数。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="HackerRank" scheme="http://yoursite.com/tags/HackerRank/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>【题解】EOJ - 卡车运输 (kamion)</title>
    <link href="http://yoursite.com/2017/11/30/kamion/"/>
    <id>http://yoursite.com/2017/11/30/kamion/</id>
    <published>2017-11-30T06:48:02.000Z</published>
    <updated>2017-12-07T14:34:56.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="http://acm.ecnu.edu.cn/problem/3437/" target="_blank" rel="noopener">http://acm.ecnu.edu.cn/problem/3437/</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有点复杂，请自行读题。<br><a id="more"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li><p>$f[i][j][k]$ 从 $i$ 到 $j$ 走 $k$ 步且始末为空，且全程不空的方案数 （由装货，g，卸货组成）</p><p>$$f[i][j][k]=\displaystyle \sum_{i \stackrel{type 1(X)}{\longrightarrow}a} \sum_{b \stackrel{type 2(x)}{\longrightarrow} j}g[a][b][k-2]$$</p></li><li><p>$empty[i][j][k]$ 从 $i$ 到 $j$ 走 $k$ 步且全程为空方案数 （由 empty 和 第三种路组成）</p><p>$$empty[i][j][k]=\displaystyle \sum_{t \stackrel{type 3}{\longrightarrow}j}empty[i][t][k-1]$$</p></li><li><p>$g[i][j][k]$ 从 $i$ 到 $j$ 走 $k$ 步且始末为空的方案数 （由 g 和 gg 组成）</p><p>$$g[i][j][k]=\displaystyle \sum_{t=1}^n \sum_{k’=0}^{k} g[i][t][k’] \times gg[t][j][k-k’]$$</p></li><li><p>$gg[i][j][k]$ （由 f 和 empty 组成）用于追加在 g 尾部形成新的 g。</p><p>$$gg[i][j][k]=\displaystyle \sum_{t=1}^n \sum_{k’=0}^{k} f[i][t][k’] \times empty[t][j][k-k’]$$</p></li><li><p>$h[i][j][k]$ 从 $i$ 到 $j$ 走 $k$ 步且一开始为空的方案数（由  1、3 两种路以及 f  组成）</p><p>$$h[i][j][k]=\displaystyle \sum_{t=1}^n \sum_{k’=0}^{k} f[i][t][k’] \times h[t][j][k-k’] + \sum_{t \stackrel{type 1/3}{\longrightarrow}  j}h[i][t][k-1]$$</p></li><li><p>由于只要求不超过 k 步，那么最后的答案为 $\sum_{k=0}^K h[1][n][k]$，复杂度 $O(n^5)$，由于我用的是邻接矩阵而非邻接表，所以常数会大一些。</p></li><li><p>搞了那么多状态转移方程，到底有什么必要呢？很遗憾，很可能是做复杂了。</p></li><li><p>这样做为什么是对的呢？由于转移的时候是枚举 中转站，所以必须保证对于特定的一种方案，只可能在某个特定的点作为中转站时被累加。</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(args...) do &#123; cout <span class="meta-string">&lt;&lt; "\033[32;1m" &lt;&lt; #args&lt;&lt; " -&gt; "; err(args); &#125; while (0)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(...)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"\033[39;0m"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T a, Args... args)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">' '</span>; err(args...); &#125;</div><div class="line"><span class="comment">// -----------------------------------------------------------------------------</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">10000</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">int</span> n, m, K;</div><div class="line"><span class="keyword">int</span> G[maxn][maxn];</div><div class="line"><span class="keyword">int</span> f[maxn][maxn][maxn], empty[maxn][maxn][maxn], g[maxn][maxn][maxn], h[maxn][maxn][maxn];</div><div class="line"><span class="keyword">int</span> gg[maxn][maxn][maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span> b)</span> </span>&#123; (a += b) %= MOD; &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line">    freopen(<span class="string">"in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; K;</div><div class="line">    <span class="keyword">int</span> u, v;</div><div class="line">    <span class="keyword">char</span> s[<span class="number">100</span>];</div><div class="line">    FOR (_, <span class="number">0</span>, m) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        --u; --v;</div><div class="line">        gets(s);</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">strlen</span>(s)) G[u][v] = s[<span class="number">1</span>];</div><div class="line">        <span class="keyword">else</span> G[u][v] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    FOR (i, <span class="number">0</span>, n) h[i][i][<span class="number">0</span>] = g[i][i][<span class="number">0</span>] = empty[i][i][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    FOR (k, <span class="number">1</span>, K + <span class="number">1</span>)</div><div class="line">        FOR (i, <span class="number">0</span>, n)</div><div class="line">             FOR (j, <span class="number">0</span>, n) &#123;</div><div class="line">                 <span class="keyword">if</span> (k &gt;= <span class="number">2</span>) FOR (a, <span class="number">0</span>, n) FOR (b, <span class="number">0</span>, n)</div><div class="line">                     <span class="keyword">if</span> (<span class="built_in">isupper</span>(G[i][a]) &amp;&amp; <span class="built_in">tolower</span>(G[i][a]) == G[b][j])</div><div class="line">                         up(f[i][j][k], g[a][b][k - <span class="number">2</span>]);</div><div class="line">                 FOR (t, <span class="number">0</span>, n)</div><div class="line">                     up(empty[i][j][k], empty[i][t][k - <span class="number">1</span>] * (G[t][j] == <span class="number">1</span>));</div><div class="line">                 FOR (t, <span class="number">0</span>, n)</div><div class="line">                      FOR (kk, <span class="number">0</span>, k + <span class="number">1</span>)</div><div class="line">                          up(gg[i][j][k], f[i][t][kk] * empty[t][j][k - kk]);</div><div class="line">                 FOR (t, <span class="number">0</span>, n)</div><div class="line">                     FOR (kk, <span class="number">0</span>, k + <span class="number">1</span>)</div><div class="line">                         up(g[i][j][k], g[i][t][kk] * gg[t][j][k - kk]);</div><div class="line">                 up(g[i][j][k], empty[i][j][k]);</div><div class="line"></div><div class="line">                 FOR (t, <span class="number">0</span>, n)</div><div class="line">                    FOR (kk, <span class="number">0</span>, k + <span class="number">1</span>)</div><div class="line">                         up(h[i][j][k], h[i][t][kk] * f[t][j][k - kk]);</div><div class="line"></div><div class="line">                 FOR (t, <span class="number">0</span>, n)</div><div class="line">                     up(h[i][j][k], (G[t][j] == <span class="number">1</span> || <span class="built_in">isupper</span>(G[t][j])) * h[i][t][k - <span class="number">1</span>]);</div><div class="line">             &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    FOR (k, <span class="number">0</span>, K + <span class="number">1</span>) up(ans, h[<span class="number">0</span>][n - <span class="number">1</span>][k]);</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>看不懂的标程</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 50</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXK 50</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXT 26</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 10007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ADD(a, b) a = (a + b) % MOD</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR_EACH(it, cont) \</span></div><div class="line">    for(vector<span class="meta-string">&lt;par&gt;::iterator it = cont.begin(); it != cont.end(); ++it)</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> N, E, K;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; par;</div><div class="line"><span class="built_in">vector</span>&lt;par&gt; road[MAXN];</div><div class="line"><span class="built_in">vector</span>&lt;par&gt; load[MAXN][MAXT];</div><div class="line"><span class="built_in">vector</span>&lt;par&gt; drop[MAXN][MAXT];</div><div class="line"><span class="built_in">vector</span>&lt;par&gt; road_plus_load[MAXN];</div><div class="line"></div><div class="line"><span class="keyword">int</span> dp[MAXK+<span class="number">1</span>][MAXN][MAXN][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> helper[MAXK+<span class="number">1</span>][MAXN][MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">  <span class="keyword">char</span> line[<span class="number">128</span>];</div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;N, &amp;E, &amp;K); gets(line);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E; ++i) &#123;</div><div class="line">    <span class="keyword">int</span> A, B;</div><div class="line">    <span class="keyword">char</span> type;</div><div class="line">    gets(line);</div><div class="line">    <span class="keyword">int</span> scanned = <span class="built_in">sscanf</span>(line, <span class="string">"%d %d %c"</span>, &amp;A, &amp;B, &amp;type); --A; --B;</div><div class="line">    <span class="keyword">if</span> (scanned == <span class="number">2</span>) &#123;</div><div class="line">      road[A].push_back(par(A, B));</div><div class="line">      road_plus_load[A].push_back(par(A, B));</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isupper</span>(type)) &#123;</div><div class="line">      load[A][type - <span class="string">'A'</span>].push_back(par(A, B));</div><div class="line">      road_plus_load[A].push_back(par(A, B));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      drop[B][type - <span class="string">'a'</span>].push_back(par(A, B));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> flag = <span class="number">0</span>; flag &lt; <span class="number">2</span>; ++flag) </div><div class="line">      dp[<span class="number">0</span>][i][i][flag] = <span class="number">1</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= K; ++k) &#123;</div><div class="line">    <span class="keyword">if</span> (k &gt;= <span class="number">2</span>)</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j)</div><div class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; MAXT; ++t)</div><div class="line">            FOR_EACH(it, load[i][t])</div><div class="line">              FOR_EACH(jt, drop[j][t])</div><div class="line">                ADD(helper[k][i][j], dp[k<span class="number">-2</span>][it-&gt;second][jt-&gt;first][<span class="number">0</span>]);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> flag = <span class="number">0</span>; flag &lt; <span class="number">2</span>; ++flag) &#123;</div><div class="line">          <span class="built_in">vector</span>&lt;par&gt; &amp;roads = flag ? road_plus_load[i] : road[i];</div><div class="line">          FOR_EACH(it, roads)</div><div class="line">            ADD(dp[k][i][j][flag], dp[k<span class="number">-1</span>][it-&gt;second][j][flag]);</div><div class="line">          </div><div class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">2</span>; t &lt;= k; ++t)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; N; ++x)</div><div class="line">              ADD(dp[k][i][j][flag], helper[t][i][x] * dp[k-t][x][j][flag]);</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">    ADD(ret, dp[k][<span class="number">0</span>][N<span class="number">-1</span>][<span class="number">1</span>]);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ret);</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://acm.ecnu.edu.cn/problem/3437/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.ecnu.edu.cn/problem/3437/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;有点复杂，请自行读题。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Jeanie&#39;s Route</title>
    <link href="http://yoursite.com/2017/11/28/Jeanie-s-Route/"/>
    <id>http://yoursite.com/2017/11/28/Jeanie-s-Route/</id>
    <published>2017-11-28T11:00:53.000Z</published>
    <updated>2017-11-28T11:06:55.532Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://www.hackerrank.com/challenges/jeanies-route/problem" target="_blank" rel="noopener">https://www.hackerrank.com/challenges/jeanies-route/problem</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一棵有边权的树，输出任意选定起点，经过给定的 k 个点的最短距离。<br><a id="more"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>设给定的 k 个点所组成的最小生成树的直径为 D，边权总和为 S。那么答案就是 S * 2 - D。</li><li>这份代码是抄题解的，有一些 trick。另外代码中求直径的做法不是两遍 dfs，而是记录最大和次大距离。</li></ul><p>代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(args...) do &#123; cout <span class="meta-string">&lt;&lt; "\033[32;1m" &lt;&lt; #args&lt;&lt; " -&gt; "; err(args); &#125; while (0)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(...)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"\033[39;0m"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T a, Args... args)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">' '</span>; err(args...); &#125;</div><div class="line"><span class="comment">// -----------------------------------------------------------------------------</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1E5</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1E9</span>;</div><div class="line"><span class="keyword">bool</span> f[maxn];</div><div class="line"><span class="keyword">int</span> n, K, sz[maxn], SUM, D;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> to, d;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;E&gt; G[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> m1 = f[u] ? <span class="number">0</span> : -INF, m2 = -INF;</div><div class="line">    sz[u] = f[u];</div><div class="line">    <span class="keyword">for</span> (E&amp; e: G[u]) &#123;</div><div class="line">        <span class="keyword">int</span> v = e.to;</div><div class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</div><div class="line">        m2 = max(m2, dfs(v, u) + e.d);</div><div class="line">        <span class="keyword">if</span> (m2 &gt; m1) swap(m1, m2);</div><div class="line">        sz[u] += sz[v];</div><div class="line">        <span class="keyword">if</span> (<span class="number">0</span> &lt; sz[v] &amp;&amp; sz[v] &lt; K) SUM += e.d;</div><div class="line">    &#125;</div><div class="line">    D = max(D, m1 + m2);</div><div class="line">    <span class="keyword">if</span> (f[u]) D = max(D, m1);</div><div class="line">    <span class="keyword">return</span> m1;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> u, v, d;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; K;</div><div class="line">    FOR (i, <span class="number">0</span>, K) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;u);</div><div class="line">        f[u] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    FOR (_, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;d);</div><div class="line">        G[u].push_back(&#123;v, d&#125;);</div><div class="line">        G[v].push_back(&#123;u, d&#125;);</div><div class="line">    &#125;</div><div class="line">    dfs(<span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; SUM * <span class="number">2</span> - D &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/jeanies-route/problem&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.hackerrank.com/challenges/jeanies-route/problem&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给一棵有边权的树，输出任意选定起点，经过给定的 k 个点的最短距离。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="树形dp" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Coprime Paths</title>
    <link href="http://yoursite.com/2017/11/27/Coprime-Paths/"/>
    <id>http://yoursite.com/2017/11/27/Coprime-Paths/</id>
    <published>2017-11-26T16:25:39.000Z</published>
    <updated>2017-11-26T16:37:26.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://www.hackerrank.com/challenges/coprime-paths/problem" target="_blank" rel="noopener">https://www.hackerrank.com/challenges/coprime-paths/problem</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一棵树，树上的每一个点都有一个至多有三个素因子的数，询问路径上互质点对个数。<br><a id="more"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>树上莫队 + 容斥</li><li>用的树上莫队的板子比较少见，其中 bug 变量的含义是如果不考虑就会翻转错一个点，好处就是不用求 LCA 并单独考虑。</li><li>增加时加的是 cnt - 1，这样可以不用考虑自己与自己不互素，于是 1 的情况不用特判。</li><li>容斥部分代码重用有些麻烦。</li></ul><p>代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(args...) do &#123; cout <span class="meta-string">&lt;&lt; "\033[32;1m" &lt;&lt; #args&lt;&lt; " -&gt; "; err(args); &#125; while (0)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(...)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"\033[39;0m"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T a, Args... args)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">' '</span>; err(args...); &#125;</div><div class="line"><span class="comment">// -----------------------------------------------------------------------------</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">25E3</span> + <span class="number">100</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxp = <span class="number">1E7</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> v[maxn], dep[maxn], fa[maxn], blk[maxn], in[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn], p[maxn];</div><div class="line"><span class="keyword">int</span> B, ans[maxn], bug, Ans, L;</div><div class="line"><span class="keyword">int</span> cnt[maxp];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Q</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> u, v, idx;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Q&amp; b) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">const</span> Q&amp; a = *<span class="keyword">this</span>;</div><div class="line">        <span class="keyword">return</span> blk[a.u] &lt; blk[b.u] || (blk[a.u] == blk[b.u] &amp;&amp; in[a.v] &lt; in[b.v]);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Q&gt; query;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p_max = <span class="number">1E5</span> + <span class="number">100</span>;</div><div class="line"><span class="keyword">int</span> prime[p_max], p_sz;</div><div class="line"><span class="keyword">bool</span> p_vis[p_max];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">()</span> </span>&#123;</div><div class="line">    FOR (i, <span class="number">2</span>, p_max) &#123;</div><div class="line">        <span class="keyword">if</span> (!p_vis[i]) prime[p_sz++] = i;</div><div class="line">        FOR (j, <span class="number">0</span>, p_sz) &#123;</div><div class="line">            <span class="keyword">if</span> (prime[j] * i &gt;= p_max) <span class="keyword">break</span>;</div><div class="line">            p_vis[prime[j] * i] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u = <span class="number">1</span>, <span class="keyword">int</span> d = <span class="number">0</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> clk = <span class="number">0</span>, S[maxn], sz = <span class="number">0</span>, blk_cnt = <span class="number">0</span>;</div><div class="line">    dep[u] = d;</div><div class="line">    in[u] =  clk++;</div><div class="line">    <span class="keyword">int</span> btm = sz;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: G[u]) &#123;</div><div class="line">        <span class="keyword">if</span> (v == fa[u]) <span class="keyword">continue</span>;</div><div class="line">        fa[v] = u;</div><div class="line">        dfs(v, d + <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (sz - btm &gt;= B) &#123;</div><div class="line">            <span class="keyword">while</span> (sz &gt; btm) blk[S[--sz]] = blk_cnt;</div><div class="line">            ++blk_cnt;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    S[sz++] = u;</div><div class="line">    <span class="keyword">if</span> (u == <span class="number">1</span>) <span class="keyword">while</span> (sz) blk[S[--sz]] = blk_cnt - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> sgn, <span class="keyword">int</span> cnt_upd)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (cnt_upd) cnt[t] += cnt_upd;</div><div class="line">    <span class="keyword">else</span> Ans += (cnt[t] - <span class="number">1</span>) * sgn;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> sgn, <span class="keyword">int</span> cnt_upd = <span class="number">0</span>)</span> </span>&#123;</div><div class="line">    FOR (i, <span class="number">0</span>, p[k].size())</div><div class="line">        up(p[k][i], sgn, cnt_upd);</div><div class="line">    FOR (i, <span class="number">0</span>, p[k].size())</div><div class="line">        FOR (j, i + <span class="number">1</span>, p[k].size())</div><div class="line">            up(p[k][i] * p[k][j], -sgn, cnt_upd);</div><div class="line">    <span class="keyword">if</span> (p[k].size() == <span class="number">3</span>) up(p[k][<span class="number">0</span>] * p[k][<span class="number">1</span>] * p[k][<span class="number">2</span>], sgn, cnt_upd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sgn = vis[k] ? <span class="number">-1</span> : <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (sgn == <span class="number">-1</span>) add(k, <span class="number">-1</span>);</div><div class="line">    add(k, <span class="number">0</span>, sgn);</div><div class="line">    <span class="keyword">if</span> (sgn == <span class="number">1</span>) add(k, <span class="number">1</span>);</div><div class="line">    L += sgn;</div><div class="line">    vis[k] ^= <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span>&amp; k)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!bug) &#123;</div><div class="line">        <span class="keyword">if</span> (vis[k] &amp;&amp; !vis[fa[k]]) bug = k;</div><div class="line">        <span class="keyword">if</span> (!vis[k] &amp;&amp; vis[fa[k]]) bug = fa[k];</div><div class="line">    &#125;</div><div class="line">    flip(k);</div><div class="line">    k = fa[k];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    bug = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (vis[b]) bug = b;</div><div class="line">    <span class="keyword">if</span> (dep[a] &lt; dep[b]) swap(a, b);</div><div class="line">    <span class="keyword">while</span> (dep[a] &gt; dep[b]) go(a);</div><div class="line">    <span class="keyword">while</span> (a != b) go(a), go(b);</div><div class="line">    go(a); go(bug);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line">    freopen(<span class="string">"in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    get_prime();</div><div class="line">    <span class="keyword">int</span> n, q_sz;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q_sz; B = <span class="keyword">int</span>(<span class="built_in">sqrt</span>(n));</div><div class="line">    FOR (i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v[i]);</div><div class="line">        <span class="keyword">int</span> t = v[i];</div><div class="line">        FOR (j, <span class="number">0</span>, p_sz)</div><div class="line">            <span class="keyword">if</span> (t % prime[j] == <span class="number">0</span>) &#123;</div><div class="line">                p[i].push_back(prime[j]);</div><div class="line">                <span class="keyword">while</span> (t % prime[j] == <span class="number">0</span>) t /= prime[j];</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">if</span> (t != <span class="number">1</span>) p[i].push_back(t);</div><div class="line">    &#125;</div><div class="line">    FOR (_, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> u, v;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        G[u].push_back(v); G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line">    dfs();</div><div class="line">    FOR (i, <span class="number">1</span>, n + <span class="number">1</span>) dbg(i, in[i], blk[i], p[i].size(), v[i], fa[i]);</div><div class="line">    FOR (i, <span class="number">0</span>, q_sz) &#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> u, v;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        query.push_back(&#123;u, v, i&#125;);</div><div class="line">    &#125;</div><div class="line">    sort(query.begin(), query.end());</div><div class="line">    <span class="keyword">int</span> u = <span class="number">1</span>, v = <span class="number">1</span>; flip(<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (Q&amp; q: query) &#123;</div><div class="line">        mv(u, q.u); u = q.u;</div><div class="line">        mv(v, q.v); v = q.v;</div><div class="line">        dbg(q.idx, q.u, q.v, L, Ans);</div><div class="line">        ans[q.idx] = L * (L - <span class="number">1</span>) / <span class="number">2</span> - Ans;</div><div class="line">    &#125;</div><div class="line">    FOR (i, <span class="number">0</span>, q_sz) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/coprime-paths/problem&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.hackerrank.com/challenges/coprime-paths/problem&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给一棵树，树上的每一个点都有一个至多有三个素因子的数，询问路径上互质点对个数。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="莫队" scheme="http://yoursite.com/tags/%E8%8E%AB%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>推理小说</title>
    <link href="http://yoursite.com/2017/11/19/tui-li/"/>
    <id>http://yoursite.com/2017/11/19/tui-li/</id>
    <published>2017-11-19T03:47:06.000Z</published>
    <updated>2017-12-04T12:09:07.182Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下阅读推理小说后的感想，由于好些都记不清了，顺便重读一下。</p><p>另外，由于这篇文章是给自己看的，所以完全不会避讳剧透。</p><a id="more"></a><h3 id="道尾秀介"><a href="#道尾秀介" class="headerlink" title="道尾秀介"></a>道尾秀介</h3><h4 id="向日葵不开的夏天"><a href="#向日葵不开的夏天" class="headerlink" title="向日葵不开的夏天"></a>向日葵不开的夏天</h4><p>叙述性诡计让我有些不适，比如主角妹妹，许多细节告诉我她是幻想出来的产物，但是妈妈对她溺爱的样子完全不像是面对一只昆虫，而事实上妈妈把洋娃娃幻想成了妹妹。结局确实是出人意料，假如说我是凶手很震撼，那么更震撼的是我同时扮演凶手和侦探两个角色。剧情也没有什么矛盾——如果有，那就是和幻觉搞混了（比如最后看似幸福的一家，其实父母已经是主角幻想中转世的昆虫）。绝对是好作品（虽然不是我喜欢的类型），推荐一读，而且一周目可能不够。</p><h4 id="影子"><a href="#影子" class="headerlink" title="影子"></a>影子</h4><p>当提到精神病，甚至文中的两个重要人物都可能患有精神病时，我有些害怕作者的谜题建立在精神异常上，好在并不是这样。比较关键的叙诡就是洋一郎的职业不是精神病医生而是清洁工。扮演坏人的人在作品的前半部分没怎么提及（另外概括一下动机就是变态），而且这部作品推理成分不多，虽然有很多谜团，但是结局有些乏力，总之当一个故事看也是很不错的。</p><p>这部作品提到了一个社会问题，也就是对于精神病人犯罪的量刑。</p><h4 id="独眼猴"><a href="#独眼猴" class="headerlink" title="独眼猴"></a>独眼猴</h4><p>几个叙诡不错（比如开头狗鼻子对冬绘眼睛的误导，主角耳朵的误导，提到相片时对秋绘性别的误导，文中的若干人物知道文末才提到的缺陷），整体比较欢乐，或者说治愈。另外，在推理小说中引入一些玄学元素我觉得是挺不错的（比如文中的扑克牌预言）。</p><blockquote><p>但是，我对只重视外表的人，没有任何兴趣。</p></blockquote><p>文中的许多人物都是有着身体，尤其是外表缺陷的。果然还是很难不注意他人异样的目光，果然还是要坚强，而非像那主动成为独眼的猴子抛却自尊。</p><h3 id="东野圭吾"><a href="#东野圭吾" class="headerlink" title="东野圭吾"></a>东野圭吾</h3><h4 id="白夜行"><a href="#白夜行" class="headerlink" title="白夜行"></a>白夜行</h4><p>东野圭吾的巅峰之作。这是一个如此惊心动魄的爱情故事，却隐藏在世人难以察觉的黑暗之中，不计一切后果。当有些真相被揭露的时候，会感受到彻骨的凉意。</p><h4 id="嫌疑人X的献身"><a href="#嫌疑人X的献身" class="headerlink" title="嫌疑人X的献身"></a>嫌疑人X的献身</h4><p>如果要尝试东野圭吾的作品，那么就从这本开始。故事的真相令我震撼，为了掩盖一起犯罪，竟然犯下新的罪行，甚至把自己扮做恶人，也要让她得到幸福。</p><h4 id="解忧杂货店"><a href="#解忧杂货店" class="headerlink" title="解忧杂货店"></a>解忧杂货店</h4><p>尝试新风格的东野圭吾，不过这次比较成功。讲述了几个温馨的故事。待二周目。</p><h4 id="恶意"><a href="#恶意" class="headerlink" title="恶意"></a>恶意</h4><p>非常棒的作品。待三周目。</p><h4 id="放学后"><a href="#放学后" class="headerlink" title="放学后"></a>放学后</h4><p>虽说是成名作，但是似乎有些难理解？待二周目。</p><h4 id="幻夜"><a href="#幻夜" class="headerlink" title="幻夜"></a>幻夜</h4><h4 id="虚无的十字架"><a href="#虚无的十字架" class="headerlink" title="虚无的十字架"></a>虚无的十字架</h4><p>失望。我不想在推理小说中探讨社会问题。</p><h4 id="悖论13"><a href="#悖论13" class="headerlink" title="悖论13"></a>悖论13</h4><p>失望。东野圭吾，你怎么写起科幻了，又不尽如人意。</p><h4 id="疾风回旋曲"><a href="#疾风回旋曲" class="headerlink" title="疾风回旋曲"></a>疾风回旋曲</h4><p>失望。无聊的故事。</p><h4 id="彷徨之刃"><a href="#彷徨之刃" class="headerlink" title="彷徨之刃"></a>彷徨之刃</h4><p>不记得了。待二周目。</p><h4 id="盛夏的方程式"><a href="#盛夏的方程式" class="headerlink" title="盛夏的方程式"></a>盛夏的方程式</h4><h3 id="凑佳苗"><a href="#凑佳苗" class="headerlink" title="凑佳苗"></a>凑佳苗</h3><p>我很喜欢的作家，叙述风格很有特色。</p><h4 id="告白"><a href="#告白" class="headerlink" title="告白"></a>告白</h4><p>待二周目。</p><h4 id="为了N"><a href="#为了N" class="headerlink" title="为了N"></a>为了N</h4><p>二周目。</p><ul><li>叙述方式还是以人物独白为主。前半部分是人物对于事件的供述，是故事的表象。而后半部分的讲述解开了故事的另一面。许多看似偶然、无关紧要的事情却是刻意安排的结果，这种时候往往给人以毛骨悚然的感觉。</li><li>故事由许多部分构成<ul><li>故事中的故事——灼热鸟，以及西崎的故事。病态的爱。</li><li>杉下的家庭。</li><li>成濑和杉下。“真厉害。” “快救救我。” “衷心感谢你。”    </li><li>奈央子和西崎。</li><li>安腾和杉下。“如果我紧紧抓住他的衣襟，他就能带我飞向高处。” </li><li>野口和奈央子。</li><li>西崎和杉下。房东爷爷说他们很像，我相信者就是作者的本意。但是杉下想要走向高处，而西崎无疑是如他自己所言是个累赘。西崎担当罪行使得一切一切的纠葛隐藏，使得案件看起来一目了然而无需深究，这是否是对杉下的保护？是否将西崎自己的希望留给了杉下？</li></ul></li><li>极致的爱情就是分担犯罪，确切的说，是不经商量谋划而自愿的分担犯罪。这本书讲述的就是这样一个故事，命运交织的各人虽各怀心思，最后却为了各自的 N 掩埋真相。</li><li>我不喜欢这个故事。我同样不喜欢那首名为《病名为爱》的歌，正如这个歌名，故事中人物的病态的爱一步步将悲剧酿成。（奈央子杀了野口后自杀）</li><li>除了病态的爱，还有来自小岛（乡下）的人对于改变命运的渴望（杉下、成濑、安藤）。除了爱，一己私利的一面。</li><li>最后，为了 N。我认为，对于掩藏真相的角色而言，恐怕是为了各自的  N，最后达成了统一的目标。不知你我心中的那个 N 在何处，可以为之不顾一切。</li></ul><h3 id="宫部美雪"><a href="#宫部美雪" class="headerlink" title="宫部美雪"></a>宫部美雪</h3><h4 id="火车"><a href="#火车" class="headerlink" title="火车"></a>火车</h4><p>简单来说就是一个找人的故事，同时指责当时信用卡借贷的陷阱。只是这部作品年代比较久远，放在今天来看感受不够真切。</p><h4 id="所罗门的伪证"><a href="#所罗门的伪证" class="headerlink" title="所罗门的伪证"></a>所罗门的伪证</h4><p>太长了，太长了。恐怕不会再看第二遍了。还是关于一个社会问题——校园暴力。</p><h3 id="雷蒙德·钱德勒"><a href="#雷蒙德·钱德勒" class="headerlink" title="雷蒙德·钱德勒"></a>雷蒙德·钱德勒</h3><h3 id="横沟正史"><a href="#横沟正史" class="headerlink" title="横沟正史"></a>横沟正史</h3><h4 id="恶灵岛"><a href="#恶灵岛" class="headerlink" title="恶灵岛"></a>恶灵岛</h4><h3 id="松本清张"><a href="#松本清张" class="headerlink" title="松本清张"></a>松本清张</h3><h4 id="零的焦点"><a href="#零的焦点" class="headerlink" title="零的焦点"></a>零的焦点</h4><h4 id="砂器"><a href="#砂器" class="headerlink" title="砂器"></a>砂器</h4><h3 id="江户川乱步"><a href="#江户川乱步" class="headerlink" title="江户川乱步"></a>江户川乱步</h3><p>年代久远，记不清了。</p><h3 id="阿加莎·克里斯蒂"><a href="#阿加莎·克里斯蒂" class="headerlink" title="阿加莎·克里斯蒂"></a>阿加莎·克里斯蒂</h3><h3 id="埃勒里·奎因"><a href="#埃勒里·奎因" class="headerlink" title="埃勒里·奎因"></a>埃勒里·奎因</h3><h4 id="X的悲剧"><a href="#X的悲剧" class="headerlink" title="X的悲剧"></a>X的悲剧</h4><h4 id="Y的悲剧"><a href="#Y的悲剧" class="headerlink" title="Y的悲剧"></a>Y的悲剧</h4><h3 id="森博嗣"><a href="#森博嗣" class="headerlink" title="森博嗣"></a>森博嗣</h3><h4 id="全部成为F"><a href="#全部成为F" class="headerlink" title="全部成为F"></a>全部成为F</h4><p>待三周目。</p><h3 id="绫辻行人"><a href="#绫辻行人" class="headerlink" title="绫辻行人"></a>绫辻行人</h3><p>我很喜欢的作家。</p><h4 id="雾月邸杀人事件"><a href="#雾月邸杀人事件" class="headerlink" title="雾月邸杀人事件"></a>雾月邸杀人事件</h4><p>待三周目。</p><h4 id="十角馆杀人预告"><a href="#十角馆杀人预告" class="headerlink" title="十角馆杀人预告"></a>十角馆杀人预告</h4><p>待三周目。</p><h4 id="迷宫馆的诱惑"><a href="#迷宫馆的诱惑" class="headerlink" title="迷宫馆的诱惑"></a>迷宫馆的诱惑</h4><h4 id="钟表馆幽灵"><a href="#钟表馆幽灵" class="headerlink" title="钟表馆幽灵"></a>钟表馆幽灵</h4><p>待二周目。</p><h4 id="替身-替身-S"><a href="#替身-替身-S" class="headerlink" title="替身 + 替身 S"></a>替身 + 替身 S</h4><p>见 ACGN 篇，another。</p><h4 id="黑暗馆不死传说"><a href="#黑暗馆不死传说" class="headerlink" title="黑暗馆不死传说"></a>黑暗馆不死传说</h4><h4 id="杀人鬼-（觉醒篇-逆袭篇）"><a href="#杀人鬼-（觉醒篇-逆袭篇）" class="headerlink" title="杀人鬼 （觉醒篇+逆袭篇）"></a>杀人鬼 （觉醒篇+逆袭篇）</h4><p>无聊透顶的恐怖小说，让我觉得恶心。</p><h3 id="雾舍巧"><a href="#雾舍巧" class="headerlink" title="雾舍巧"></a>雾舍巧</h3><h4 id="二重身宫"><a href="#二重身宫" class="headerlink" title="二重身宫"></a>二重身宫</h4><p>印象中不错，待三周目。</p><h3 id="麻耶雄嵩"><a href="#麻耶雄嵩" class="headerlink" title="麻耶雄嵩"></a>麻耶雄嵩</h3><h4 id="夏与冬的奏鸣曲"><a href="#夏与冬的奏鸣曲" class="headerlink" title="夏与冬的奏鸣曲"></a>夏与冬的奏鸣曲</h4><p>有毒。如果过于蛋疼，可以看这个。当时看完书后匆匆忙忙去看书评，最后还是得不到合理的解答。不可能犯罪竟然建立在自然奇观之上，原来推理小说可以完全不合逻辑。</p><h4 id="鸦"><a href="#鸦" class="headerlink" title="鸦"></a>鸦</h4><p>牵涉到一堆宗教，而且当时我没怎么接触过叙诡，比较混乱，印象中不好看，待二周目。</p><h4 id="独眼少女"><a href="#独眼少女" class="headerlink" title="独眼少女"></a>独眼少女</h4><p>难得的能看的作品，不会在理解上产生障碍，甚至还挺不错的。</p><h3 id="岛田庄司"><a href="#岛田庄司" class="headerlink" title="岛田庄司"></a>岛田庄司</h3><h4 id="斜屋犯罪"><a href="#斜屋犯罪" class="headerlink" title="斜屋犯罪"></a>斜屋犯罪</h4><p>为了尸体造建筑。我不大喜欢这种“给读者的挑战”，因为作为题目，题面太纷乱，而答案又太简单。</p><h3 id="爱伦·坡"><a href="#爱伦·坡" class="headerlink" title="爱伦·坡"></a>爱伦·坡</h3><h3 id="柯南·道尔"><a href="#柯南·道尔" class="headerlink" title="柯南·道尔"></a>柯南·道尔</h3><h3 id="雷米"><a href="#雷米" class="headerlink" title="雷米"></a>雷米</h3><h4 id="心理罪系列"><a href="#心理罪系列" class="headerlink" title="心理罪系列"></a>心理罪系列</h4><p>看过两遍，在国产推理小说中，算是相当对我胃口的了。</p><h3 id="周浩晖"><a href="#周浩晖" class="headerlink" title="周浩晖"></a>周浩晖</h3><h4 id="死刑通知单系列"><a href="#死刑通知单系列" class="headerlink" title="死刑通知单系列"></a>死刑通知单系列</h4><p>待二周目。</p><hr><h3 id="弹丸论破-V3"><a href="#弹丸论破-V3" class="headerlink" title="弹丸论破 V3"></a>弹丸论破 V3</h3><p>弹丸毋庸置疑是以推理为卖点，同时让玩家自己扮演侦探寻找线索，当然还有最激动人心的审判环节。忘记说了，副标题可是自相残杀的学院生活，暴风雪山庄的模式还是很具有吸引力的。</p><p>游戏中的推理不再是本格推理，因为线索不会在审判前就给出，而是在学级裁判中yidi</p><p>与前两作（弹丸1, 2）相比，更加优秀。</p><ul><li>画面质量更好，从游戏容量就可见一斑。</li><li>学级裁判中新的玩法。我尤其喜欢的是“无休止讨论”中的“伪证”，作为侦探，为了引导讨论向正确的方向发展不惜作出伪证，更有背水一战，不惜一切找出真相的感觉。</li></ul><h4 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h4><ul><li>第一次在游戏中见到叙诡（当然我几乎不玩 GAL）。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下阅读推理小说后的感想，由于好些都记不清了，顺便重读一下。&lt;/p&gt;
&lt;p&gt;另外，由于这篇文章是给自己看的，所以完全不会避讳剧透。&lt;/p&gt;
    
    </summary>
    
      <category term="杂文" scheme="http://yoursite.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Demanding Money</title>
    <link href="http://yoursite.com/2017/11/17/Demanding-Money/"/>
    <id>http://yoursite.com/2017/11/17/Demanding-Money/</id>
    <published>2017-11-17T01:34:49.000Z</published>
    <updated>2017-11-17T02:48:18.134Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://www.hackerrank.com/challenges/borrowing-money/problem" target="_blank" rel="noopener">https://www.hackerrank.com/challenges/borrowing-money/problem</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>无向图上每个结点有个权值，求权最大的独立集的权及其方案数。<br><a id="more"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>对于一般图的最大独立集，是 NPC 问题，题目中 n 也很小，所以搜索。</li><li>这个问题中要求输出方案数，但是如果有很多的孤立点，那么方案数会很大 ($2^k$)。由于要统计方案数，一个一个数即便是有剪枝也会超时（因为孤立点的值可以为 0）。</li><li>对于所有孤立点单独考虑，如果孤立点值不为 0，那么肯定要选，答案乘上权值，如果值为 0，那么计数要乘 2。</li><li>剔除所有孤立点进行搜索，现在联通块的大小至少为 2，枚举所有取法不剪枝，那么在所有联通块大小均为 2 时，复杂度为 $O(2^{n/2})$，可以接受。</li><li>官方题解是 meet-in-the-middle，实现起来比较繁琐，也不见得快。</li></ul><p>代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(args...) do &#123; cout <span class="meta-string">&lt;&lt; "\033[32;1m" &lt;&lt; #args&lt;&lt; " -&gt; "; err(args); &#125; while (0)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(...)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"\033[39;0m"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T a, Args... args)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">' '</span>; err(args...); &#125;</div><div class="line"><span class="comment">// -----------------------------------------------------------------------------</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">34</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">int</span> w[maxn], n, m, ans, cnt;</div><div class="line"><span class="keyword">bool</span> G[maxn][maxn], vis[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> s)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (k == n) &#123;</div><div class="line">        <span class="keyword">if</span> (s &lt; ans) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (s &gt; ans) &#123; ans = s; cnt = <span class="number">0</span>; &#125;</div><div class="line">        ++cnt;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    go(k + <span class="number">1</span>, s);</div><div class="line">    <span class="keyword">if</span> (vis[k]) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">bool</span> f = <span class="literal">true</span>;</div><div class="line">    FOR (i, <span class="number">0</span>, k)</div><div class="line">        <span class="keyword">if</span> (G[k][i] &amp;&amp; vis[i]) &#123; f = <span class="literal">false</span>; <span class="keyword">break</span>; &#125;</div><div class="line">    <span class="keyword">if</span> (f) &#123;</div><div class="line">        vis[k] = <span class="number">1</span>;</div><div class="line">        go(k + <span class="number">1</span>, s + w[k]);</div><div class="line">        vis[k] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</div><div class="line">    FOR (i, <span class="number">0</span>, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i]);</div><div class="line">    FOR (_, <span class="number">0</span>, m) &#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> u, v;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        --u; --v;</div><div class="line">        G[u][v] = G[v][u] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    LL add = <span class="number">0</span>, mul = <span class="number">1</span>;</div><div class="line">    FOR (i, <span class="number">0</span>, n) &#123;</div><div class="line">        <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">        FOR (j, <span class="number">0</span>, n) <span class="keyword">if</span> (G[i][j]) &#123; f = <span class="number">0</span>; <span class="keyword">break</span>; &#125;</div><div class="line">        <span class="keyword">if</span> (f) &#123;</div><div class="line">            <span class="keyword">if</span> (w[i]) add += w[i];</div><div class="line">            <span class="keyword">else</span> mul &lt;&lt;= <span class="number">1</span>;</div><div class="line">            vis[i] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    go(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans + add &lt;&lt; <span class="string">' '</span> &lt;&lt; cnt * mul &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/borrowing-money/problem&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.hackerrank.com/challenges/borrowing-money/problem&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;无向图上每个结点有个权值，求权最大的独立集的权及其方案数。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="搜索" scheme="http://yoursite.com/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Minimum Penalty Path</title>
    <link href="http://yoursite.com/2017/11/13/Minimum-Penalty-Path/"/>
    <id>http://yoursite.com/2017/11/13/Minimum-Penalty-Path/</id>
    <published>2017-11-13T08:11:28.000Z</published>
    <updated>2017-11-13T08:30:09.696Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://www.hackerrank.com/challenges/beautiful-path/problem" target="_blank" rel="noopener">https://www.hackerrank.com/challenges/beautiful-path/problem</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>求起点到终点的一条路径，使得边权 or 最小。<br><a id="more"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h3><ul><li>状态为 (u, k)  u 为结点编号，k 为当前 or 的结果</li><li>随便 bfs, dfs 都可以。</li><li>复杂度 $O(n C)$ </li></ul><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><ul><li>复杂度更低，更省空间。</li><li>从高到低考虑答案中的每一个 bit，如果没有这一位，则所有该 bit 为 1 的边都不能走，如果剩下的边无法使起点和终点联通，那么答案中的这一位只能为 1。</li><li>如果确定了答案中的某一位必须为 1，那么所有边权就不需要考虑这一位了。</li><li>从大到小计算出答案的每一位，连通性用并查集处理。</li><li>复杂度 $O(n log C)$</li></ul><p>代码（细节比较多）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(args...) do &#123; cout <span class="meta-string">&lt;&lt; "\033[32;1m" &lt;&lt; #args&lt;&lt; " -&gt; "; err(args); &#125; while (0)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(...)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"\033[39;0m"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T a, Args... args)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">' '</span>; err(args...); &#125;</div><div class="line"><span class="comment">// -----------------------------------------------------------------------------</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1E3</span> + <span class="number">100</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> u, v, d;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> E&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> d &lt; rhs.d; &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;E&gt; edges;</div><div class="line"><span class="keyword">int</span> n, m, fa[maxn], st, ed;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findset</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> fa[x] == <span class="number">-1</span> ? x : fa[x] = findset(fa[x]); &#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">highbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; assert(x); <span class="keyword">return</span> <span class="number">31</span> - __builtin_clz(x); &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</div><div class="line">    FOR (_, <span class="number">0</span>, m) &#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> u, v, d;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;d);</div><div class="line">        edges.push_back(&#123;u, v, d&#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; st &gt;&gt; ed;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">        sort(edges.begin(), edges.end());</div><div class="line">        <span class="built_in">memset</span>(fa, <span class="number">-1</span>, <span class="keyword">sizeof</span> fa);</div><div class="line">        <span class="keyword">auto</span> it = edges.begin();</div><div class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (it == edges.end()) &#123; <span class="built_in">puts</span>(<span class="string">"-1"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</div><div class="line">            E&amp; e = *it;</div><div class="line">            <span class="keyword">int</span> fu = findset(e.u), fv = findset(e.v);</div><div class="line">            <span class="keyword">if</span> (fu != fv) fa[fu] = fv;</div><div class="line">            <span class="keyword">if</span> (findset(st) == findset(ed)) <span class="keyword">break</span>;</div><div class="line">            ++it;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!it-&gt;d) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">int</span> t = <span class="number">1</span> &lt;&lt; highbit(it-&gt;d);</div><div class="line">        <span class="keyword">for</span> (; it != edges.end() &amp;&amp; it-&gt;d &lt; (t &lt;&lt; <span class="number">1</span>); ++it);</div><div class="line">        edges.erase(it, edges.end());</div><div class="line">        ans |= t;</div><div class="line">        <span class="keyword">for</span> (E&amp; e: edges)</div><div class="line">            e.d &amp;= ~t;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/beautiful-path/problem&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.hackerrank.com/challenges/beautiful-path/problem&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;求起点到终点的一条路径，使得边权 or 最小。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - synchronous-shopping</title>
    <link href="http://yoursite.com/2017/11/12/synchronous-shopping/"/>
    <id>http://yoursite.com/2017/11/12/synchronous-shopping/</id>
    <published>2017-11-12T15:21:21.000Z</published>
    <updated>2017-11-12T15:38:10.017Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://www.hackerrank.com/challenges/synchronous-shopping/problem" target="_blank" rel="noopener">https://www.hackerrank.com/challenges/synchronous-shopping/problem</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有 k 种商品，简单图上每个点上有若干种商品，购买商品不需要时间，两个人同时从 1 出发最后在 n 汇合，使得两人购买的商品囊括了所有的 k 种。 注意数据范围。<br><a id="more"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>商品肯定是见到就买，到一个点可以免费 or 该店的商品种类。</li><li>k 很小最多只有 10。令状态为 (u, t)，t 为已经购买的商品，然后再新的图上跑单源最短路。</li><li>最后枚举两人分配到的任务去最大值的最小值。</li><li>另外不用把所有边都预先建出来，跑的时候再处理，因为有些状态可能是达不到的。</li></ul><p>代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(args...) do &#123; cout <span class="meta-string">&lt;&lt; "\033[32;1m" &lt;&lt; #args&lt;&lt; " -&gt; "; err(args); &#125; while (0)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(...)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"\033[39;0m"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T a, Args... args)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">' '</span>; err(args...); &#125;</div><div class="line"><span class="comment">// -----------------------------------------------------------------------------</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span> + <span class="number">100</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> u, k, d;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> P&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> d &gt; rhs.d; &#125;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> to, d;</div><div class="line">&#125;;</div><div class="line">priority_queue&lt;P&gt; pq;</div><div class="line"><span class="built_in">vector</span>&lt;E&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> b[maxn], d[maxn][maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn][maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> d);</div><div class="line">    d[<span class="number">1</span>][b[<span class="number">1</span>]] = <span class="number">0</span>;</div><div class="line">    pq.push(&#123;<span class="number">1</span>, b[<span class="number">1</span>], <span class="number">0</span>&#125;);</div><div class="line">    <span class="keyword">while</span> (!pq.empty()) &#123;</div><div class="line">        P p = pq.top(); pq.pop();</div><div class="line">        <span class="keyword">int</span> u = p.u, k = p.k;</div><div class="line">        <span class="keyword">if</span> (vis[u][k]) <span class="keyword">continue</span>;</div><div class="line">        dbg(u, k, d[u][k]);</div><div class="line">        vis[u][k] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (E&amp; e: G[u]) &#123;</div><div class="line">            <span class="keyword">int</span> v = e.to, kk = k | b[v];</div><div class="line">            <span class="keyword">if</span> (d[v][kk] &gt; d[u][k] + e.d) &#123;</div><div class="line">                d[v][kk] = d[u][k] + e.d;</div><div class="line">                pq.push(&#123;v, kk, d[v][kk]&#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n, m, k;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</div><div class="line">    FOR (i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> k, t;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</div><div class="line">        FOR (_, <span class="number">0</span>, k) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">            b[i] |= <span class="number">1</span> &lt;&lt; (t - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    FOR (_, <span class="number">0</span>, m) &#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> u, v, d;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;d);</div><div class="line">        G[u].push_back(&#123;v, d&#125;);</div><div class="line">        G[v].push_back(&#123;u, d&#125;);</div><div class="line">    &#125;</div><div class="line">    go();</div><div class="line">    <span class="keyword">int</span> all = (<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span>, ans = <span class="number">1E9</span>;</div><div class="line">    FOR (i, <span class="number">0</span>, <span class="number">1</span> &lt;&lt; k) dbg(i, d[n][i]);</div><div class="line">    FOR (i, <span class="number">0</span>, <span class="number">1</span> &lt;&lt; k)</div><div class="line">        FOR (j, <span class="number">0</span>, <span class="number">1</span> &lt;&lt; k)</div><div class="line">            <span class="keyword">if</span> ((i | j) == all) ans = min(ans, max(d[n][i], d[n][j]));</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/synchronous-shopping/problem&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.hackerrank.com/challenges/synchronous-shopping/problem&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;有 k 种商品，简单图上每个点上有若干种商品，购买商品不需要时间，两个人同时从 1 出发最后在 n 汇合，使得两人购买的商品囊括了所有的 k 种。 注意数据范围。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Project Euler</title>
    <link href="http://yoursite.com/2017/11/09/Project-Euler/"/>
    <id>http://yoursite.com/2017/11/09/Project-Euler/</id>
    <published>2017-11-09T06:28:17.000Z</published>
    <updated>2017-11-09T09:24:18.631Z</updated>
    
    <content type="html"><![CDATA[<ul><li>1: 简单容斥，注意求的是和。</li><li>2: 暴力。因为斐波那契数的大小指数上升，所以数量不多。</li><li>3: 根号内枚举。（当时脑抽写了 <code>Pollard Rho</code>， 复杂度 1/4 次方）</li><li>4: 暴力 +　二分。（可能不二分也行）</li><li>5: 考虑每个素数，把答案乘上 n 以内需要提供的最多的次数。</li><li>6: 暴力 + 预处理。</li><li>7: 素数筛。</li><li>8: 暴力。</li><li>9: 枚举 3000 以内 a, b。</li><li>10: 素数筛，打表。</li><li>11: 暴力枚举。</li><li>12: 先处理处 1E6 内每个数的因子个数（埃氏筛），然后打表。</li><li>13: 取前 15 位计算即可。 (0.999…) × 1000 &lt; 10000</li><li>14: 模拟 +　记忆化。注意中间结果可能会比较大。</li><li>15: 组合数预处理。</li><li>16: 高精度。</li><li>17: 无聊。随便找了份代码就交了。</li><li>18: dp 入门。</li><li>19:</li><li>20:</li></ul><ul><li>67: 同 18;</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;1: 简单容斥，注意求的是和。&lt;/li&gt;
&lt;li&gt;2: 暴力。因为斐波那契数的大小指数上升，所以数量不多。&lt;/li&gt;
&lt;li&gt;3: 根号内枚举。（当时脑抽写了 &lt;code&gt;Pollard Rho&lt;/code&gt;， 复杂度 1/4 次方）&lt;/li&gt;
&lt;li&gt;4: 暴
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Unique Colors</title>
    <link href="http://yoursite.com/2017/11/01/Unique-Colors/"/>
    <id>http://yoursite.com/2017/11/01/Unique-Colors/</id>
    <published>2017-11-01T11:58:26.000Z</published>
    <updated>2017-11-12T15:36:11.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://www.hackerrank.com/challenges/unique-colors" target="_blank" rel="noopener">https://www.hackerrank.com/challenges/unique-colors</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一棵树，树上每一个点都有一种颜色。定义一条路径的价值为路径上不同颜色的点的个数。对于树上的每个结点，输出从该结点出发的所有路径的价值之和。<br><a id="more"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>官方题解是用树上点分治，但是很遗憾题解看不懂。<br>神奇的是这道题和 2017 年多校第一场的某题极度相似（HDU 6035）。</p><p>多校官方题解：</p><blockquote><p>单独考虑每一种颜色，答案就是对于每种颜色至少经过一次这种的路径条数之和。反过来思考只需要求有多少条路径没有经过这种颜色即可。直接做可以采用虚树的思想（不用真正建出来），对每种颜色的点按照 dfs 序列排个序，就能求出这些点把原来的树划分成的块的大小。这个过程实际上可以直接一次 dfs 求出。</p></blockquote><ul><li>每种颜色分开考虑，计算每种颜色的贡献。</li><li>考虑问题的反面，某种颜色没有贡献给一条路径等价于路径的两个端点在同一个没有该种颜色的联通块中。也就是说，对于每一块没有这种颜色的树上联通块，联通块中所有点的答案减去联通块的大小。</li><li>难点在于对于每种颜色，复杂度不能与整棵树的大小相关，而是与该颜色结点个数相关。但是访问结点以及递归必须按顺序进行，于是需要按照 dfs序 进行递归。这就是多校题解中提到的虚树思想，当然这道题不用把树建出来。</li></ul><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(args...) do &#123; cout <span class="meta-string">&lt;&lt; "\033[32;1m" &lt;&lt; #args&lt;&lt; " -&gt; "; err(args); &#125; while (0)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(...)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"\033[39;0m"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T a, Args... args)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">' '</span>; err(args...); &#125;</div><div class="line"><span class="comment">// -----------------------------------------------------------------------------</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1E5</span> + <span class="number">100</span>, maxc = <span class="number">1E5</span> + <span class="number">100</span>;</div><div class="line"><span class="keyword">int</span> c[maxn], in[maxn], out[maxn], sz[maxn], pa[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn], C[maxn];</div><div class="line"><span class="keyword">int</span> n, clk = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></div><div class="line">    LL c[maxn];</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i))</div><div class="line">            c[i] += k;</div><div class="line">    &#125;</div><div class="line">    <span class="function">LL <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        LL ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &gt; <span class="number">0</span>; i -= lowbit(i))</div><div class="line">            ret += c[i];</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        add(l, v); add(r + <span class="number">1</span>, -v);</div><div class="line">    &#125;</div><div class="line">&#125; bit;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">    in[u] = clk++;</div><div class="line">    C[c[u]].push_back(u);</div><div class="line">    pa[u] = fa;</div><div class="line">    sz[u] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: G[u]) &#123;</div><div class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</div><div class="line">        init_dfs(v, u);</div><div class="line">        sz[u] += sz[v];</div><div class="line">    &#125;</div><div class="line">    out[u] = clk - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; V, <span class="keyword">int</span>&amp; k)</span> </span>&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nxt;</div><div class="line">    <span class="keyword">int</span> u = V[k];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: G[u]) &#123;</div><div class="line">        <span class="keyword">if</span> (v == pa[u]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> num = sz[v]; nxt.clear();</div><div class="line">        <span class="keyword">while</span> (k + <span class="number">1</span> &lt; V.size()) &#123;</div><div class="line">            <span class="keyword">int</span> to = V[k + <span class="number">1</span>];</div><div class="line">            <span class="keyword">if</span> (in[to] &lt;= out[v]) &#123;</div><div class="line">                nxt.push_back(to);</div><div class="line">                num -= sz[to];</div><div class="line">                go(V, ++k);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        bit.add(in[v], out[v], num);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> to: nxt)</div><div class="line">            bit.add(in[to], out[to], -num);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line">    freopen(<span class="string">"in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line"></div><div class="line">    FOR (i, <span class="number">1</span>, maxc) C[i].push_back(<span class="number">0</span>);</div><div class="line">    G[<span class="number">0</span>].push_back(<span class="number">1</span>); pa[<span class="number">1</span>] = <span class="number">0</span>; c[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    FOR (i, <span class="number">1</span>, n + <span class="number">1</span>)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c[i]);</div><div class="line">    FOR (_, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> u, v;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line">    init_dfs(<span class="number">0</span>, <span class="number">-1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> tmp;</div><div class="line">    LL color_cnt = <span class="number">0</span>;</div><div class="line">    FOR (k, <span class="number">1</span>, maxc) &#123;</div><div class="line">        <span class="keyword">if</span> (C[k].size() == <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">        color_cnt++;</div><div class="line">        go(C[k], tmp = <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    FOR (i, <span class="number">1</span>, n + <span class="number">1</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, color_cnt * n - bit.sum(in[i]));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/unique-colors&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.hackerrank.com/challenges/unique-colors&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给定一棵树，树上每一个点都有一种颜色。定义一条路径的价值为路径上不同颜色的点的个数。对于树上的每个结点，输出从该结点出发的所有路径的价值之和。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="虚树" scheme="http://yoursite.com/tags/%E8%99%9A%E6%A0%91/"/>
    
      <category term="思维" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>算法 - 线段树</title>
    <link href="http://yoursite.com/2017/10/29/Segment-Tree/"/>
    <id>http://yoursite.com/2017/10/29/Segment-Tree/</id>
    <published>2017-10-29T14:59:56.000Z</published>
    <updated>2017-10-30T02:54:18.427Z</updated>
    
    <content type="html"><![CDATA[<p>代码详见模板库。模板题 EOJ 3389-3393。</p><ul><li>Q: 要不要把 n 补成 2 的幂？</li><li><p>A: 这个无所谓，但如果要写成自底向上，那么还是需要的，否则无法直接定位叶节点。</p></li><li><p>Q: pushdown 之后要不要立即 maintain？</p></li><li><p>A: 不用立即 maintain，但迟早是要的。但是立即 maintain 很可能会重复 maintain，增加超时风险。</p></li><li><p>Q:query 的时候要不要 pushdown？</p></li><li><p>A: 如果不要的话，查询时应该把之前访问到的结点的标签的效果累加起来，并作为参数递归下去。如果要的话，代码会更加具有普适性（比如 treap 只能选择 pushdown 标签，因为结点之间相对位置会改变）。</p></li><li><p>Q: maintain 的时候是否考虑当前结点的标签？</p></li><li><p>A: 都可以。如果考虑了，那么查询的时候就不要考虑当前结点的标签了，反之亦然。</p></li><li><p>Q: query 的时候先考虑 set 标签还是先考虑查询区间包含当前区间？</p></li><li><p>A: 都可以，但是先考虑 set 会快一些。</p></li><li><p>Q: 根节点是 0 还是 1？</p></li><li><p>A: 都可以，但好像 1 比较符合人性。</p></li><li><p>Q: 听说空间开三倍就够了？</p></li><li>A: 那可能就 GG 了，实测 4 倍是必要的。</li></ul><p>其他注意事项：</p><ul><li>maintain 函数要写得保证即便是重复调用也不会出错。</li><li>pushdown 子节点必须 maintain，尤其是那个没有递归下去的子节点。</li><li>打完 set 标记后 add 标记必须清空。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代码详见模板库。模板题 EOJ 3389-3393。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Q: 要不要把 n 补成 2 的幂？&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A: 这个无所谓，但如果要写成自底向上，那么还是需要的，否则无法直接定位叶节点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Q: pushd
      
    
    </summary>
    
      <category term="Algorithms" scheme="http://yoursite.com/categories/Algorithms/"/>
    
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Counting On a Tree</title>
    <link href="http://yoursite.com/2017/10/28/Counting-On-a-Tree/"/>
    <id>http://yoursite.com/2017/10/28/Counting-On-a-Tree/</id>
    <published>2017-10-28T05:41:30.000Z</published>
    <updated>2017-10-29T12:32:35.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://www.hackerrank.com/challenges/counting-on-a-tree" target="_blank" rel="noopener">https://www.hackerrank.com/challenges/counting-on-a-tree</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一棵树，树上的每一个点都有一个数字，询问对于给定的两条树上路径，有多少对不同的且分别属于两条路径的点满足对应数字相等。<br><a id="more"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>题目要求的是不同的点，先不考虑这个条件，最后减去路径交的长度即可。</li><li>树上的任意路径可以分解成两条链（后文称之为规范链），使得每条链中的一个点是另一个点的祖先，这样便于计数。</li><li>设路径 x 和 y 分别分解成 x1, x2 和 y1, y2，最后的答案就是把 (x1, y1), (x2, y1), (x1, y2), (x2, y2) 的答案加起来</li><li>对于每一种颜色，按是否大于点数量的平方根，分为两种情况<ul><li>如果颜色数量大于 SQRT<ul><li>对于每一种这样的颜色，跑一边 dfs，计算出每个点到根的路径上有多少这种颜色的点（前缀和）。</li><li>然后对于每一条规范链，可以做差得到链上这种颜色的点有几个。</li><li>乘起来就是两条规范链的同色点对数了。</li></ul></li><li>如果颜色数量不大于 SQRT，设这样的颜色属于 集合c。<ul><li>首先预处理时记录 dfs 序</li><li>在 dfs 过程中维护一个树状数组，记录的是树上的每一个点到根的路径上 颜色属于集合x 的点的个数，集合 x 为当前点到根的路径上出现过得所有属于 集合c 的颜色（可重复）。</li><li>访问一个结点时，把所有相同颜色的点对应的 dfs序 区间 +1 即可。</li><li>注意需要对询问预处理，分解询问分发到每个结点</li><li>注意由于 dfs 时树状数组状态要回溯，所以要回滚操作</li></ul></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(args...) do &#123; cout <span class="meta-string">&lt;&lt; "\033[32;1m" &lt;&lt; #args&lt;&lt; " -&gt; "; err(args); &#125; while (0)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(...)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"\033[39;0m"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T a, Args... args)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">' '</span>; err(args...); &#125;</div><div class="line"><span class="comment">// -----------------------------------------------------------------------------</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1E5</span> + <span class="number">100</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> SQRT = <span class="number">100</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">L</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> bt, tp;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Q</span> &#123;</span></div><div class="line">    L l;</div><div class="line">    <span class="keyword">int</span> sgn, idx;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Q&gt; qq[maxn];</div><div class="line">L query[maxn][<span class="number">4</span>];</div><div class="line"><span class="keyword">int</span> n, clk = <span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> in[maxn], out[maxn], dep[maxn], pa[maxn][<span class="number">20</span>], a[maxn], cnt[maxn];</div><div class="line">LL ans[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> c[maxn];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span> c); &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i))</div><div class="line">            c[i] += v;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &gt; <span class="number">0</span>; i -= lowbit(i))</div><div class="line">            ret += c[i];</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        add(l, v); add(r + <span class="number">1</span>, -v);</div><div class="line">    &#125;</div><div class="line">&#125; bit;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa, <span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">    in[u] = clk++;</div><div class="line">    pa[u][<span class="number">0</span>] = fa;</div><div class="line">    dep[u] = d;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: G[u])</div><div class="line">        <span class="keyword">if</span> (v != fa)</div><div class="line">            dfs(v, u, d + <span class="number">1</span>);</div><div class="line">    out[u] = clk - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">lca_init</span><span class="params">()</span> </span>&#123;</div><div class="line">    FOR (x, <span class="number">1</span>, <span class="number">20</span>)</div><div class="line">        FOR (i, <span class="number">1</span>, n + <span class="number">1</span>)</div><div class="line">             pa[i][x] = pa[pa[i][x - <span class="number">1</span>]][x - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pp</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> pa[x][<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v]) swap(u, v);</div><div class="line">    FORD (i, <span class="number">19</span>, <span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">int</span> uu = pa[u][i];</div><div class="line">        <span class="keyword">if</span> (dep[uu] &gt;= dep[v]) u = uu;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</div><div class="line">    FORD (i, <span class="number">19</span>, <span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">int</span> uu = pa[u][i], vv = pa[v][i];</div><div class="line">        <span class="keyword">if</span> (uu != vv) &#123; u = uu; v = vv; &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> pp(u);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">intersection</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> xx, <span class="keyword">int</span> yy)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> t[<span class="number">4</span>] = &#123;lca(x, xx), lca(x, yy), lca(y, xx), lca(y, yy)&#125;;</div><div class="line">    sort(t, t + <span class="number">4</span>);</div><div class="line">    <span class="keyword">int</span> r = lca(x, y), rr = lca(xx, yy);</div><div class="line">    <span class="keyword">if</span> (dep[t[<span class="number">0</span>]] &lt; min(dep[r], dep[rr]) || dep[t[<span class="number">2</span>]] &lt; max(dep[r], dep[rr]))</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> tt = lca(t[<span class="number">2</span>], t[<span class="number">3</span>]);</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">1</span> + dep[t[<span class="number">2</span>]] + dep[t[<span class="number">3</span>]] - dep[tt] * <span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_calc</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> c = a[u];</div><div class="line">    <span class="keyword">if</span> (C[c].size() &lt; SQRT)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v: C[c])</div><div class="line">            bit.add(in[v], out[v], <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (Q&amp; q: qq[u])pingfangfenge</div><div class="line">        ans[q.idx] += q.sgn * (bit.sum(in[q.l.bt]) - bit.sum(in[q.l.tp]));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: G[u])</div><div class="line">        <span class="keyword">if</span> (v != pp(u))</div><div class="line">            dfs_calc(v);</div><div class="line">    <span class="keyword">if</span> (C[c].size() &lt; SQRT)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v: C[c])</div><div class="line">            bit.add(in[v], out[v], <span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_cnt</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> c, <span class="keyword">int</span> s)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (a[u] == c) ++s;</div><div class="line">    cnt[u] = s;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: G[u])</div><div class="line">        <span class="keyword">if</span> (v != pp(u))</div><div class="line">            dfs_cnt(v, c, s);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line">    freopen(<span class="string">"in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">int</span> q_sz, mp_sz = <span class="number">0</span>;</div><div class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q_sz;</div><div class="line">    FOR (i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">        <span class="keyword">auto</span> it = mp.find(a[i]);</div><div class="line">        <span class="keyword">if</span> (it == mp.end()) a[i] = mp[a[i]] = mp_sz++;</div><div class="line">        <span class="keyword">else</span> a[i] = it-&gt;second;</div><div class="line">        C[a[i]].push_back(i);</div><div class="line">    &#125;</div><div class="line">    FOR (_, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line">    dfs(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    lca_init();</div><div class="line">    FOR (i, <span class="number">0</span>, q_sz) &#123;</div><div class="line">        <span class="keyword">int</span> x, y, xx, yy;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x, &amp;y, &amp;xx, &amp;yy);</div><div class="line">        ans[i] -= intersection(x, y, xx, yy);</div><div class="line">        <span class="keyword">int</span> z = lca(x, y), zz = lca(xx, yy);</div><div class="line">        query[i][<span class="number">0</span>] = &#123;x, z&#125;;</div><div class="line">        query[i][<span class="number">1</span>] = &#123;y, pp(z)&#125;;</div><div class="line">        query[i][<span class="number">2</span>] = &#123;xx, zz&#125;;</div><div class="line">        query[i][<span class="number">3</span>] = &#123;yy, pp(zz)&#125;;</div><div class="line">        FOR (p, <span class="number">0</span>, <span class="number">2</span>)</div><div class="line">            FOR (q, <span class="number">2</span>, <span class="number">4</span>) &#123;</div><div class="line">                qq[query[i][p].bt].push_back(&#123;query[i][q], <span class="number">1</span>, i&#125;);</div><div class="line">                qq[query[i][p].tp].push_back(&#123;query[i][q], <span class="number">-1</span>, i&#125;);</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">    FOR (i, <span class="number">0</span>, mp_sz) &#123;</div><div class="line">        <span class="keyword">if</span> (C[i].size() &lt; SQRT) <span class="keyword">continue</span>;</div><div class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</div><div class="line">        dfs_cnt(<span class="number">1</span>, i, <span class="number">0</span>);</div><div class="line">        FOR (j, <span class="number">0</span>, q_sz) &#123;</div><div class="line">            <span class="keyword">int</span> c1 = <span class="number">0</span>, c2 = <span class="number">0</span>;</div><div class="line">            FOR (k, <span class="number">0</span>, <span class="number">2</span>) c1 += cnt[query[j][k].bt] - cnt[query[j][k].tp];</div><div class="line">            FOR (k, <span class="number">2</span>, <span class="number">4</span>) c2 += cnt[query[j][k].bt] - cnt[query[j][k].tp];</div><div class="line">            ans[j] += c1 * c2;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    dfs_calc(<span class="number">1</span>);</div><div class="line">    FOR (i, <span class="number">0</span>, q_sz)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="题解（假）"><a href="#题解（假）" class="headerlink" title="题解（假）"></a>题解（假）</h2><p>这个题解是官方的 editorial，但是我的实现会超时，但答案是对的。另外，这个算法时在线的，但难写很多，常数也大很多。总结一下，这个算法假得很，分块和不分块差不多。</p><ul><li>对于询问的路径，剖分成若干条链。</li><li>把树上点值按树链剖分的下标数组进行平方分割。</li><li>预处理一个 n × sqrt(n) 的数组，表示第 i 个元素在第 j 块中出现了几次。</li><li>对于完整的块和连续的一段可以做到 O(1) 查询</li><li>对于零散的，数组大小不超过 SQRT * log(n)，进行桶排线性查询。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(args...) do &#123; cout <span class="meta-string">&lt;&lt; "\033[32;1m" &lt;&lt; #args&lt;&lt; " -&gt; "; err(args); &#125; while (0)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(...)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"\033[39;0m"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T a, Args... args)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">' '</span>; err(args...); &#125;</div><div class="line"><span class="comment">// -----------------------------------------------------------------------------</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1E5</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">300</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> B = <span class="number">334</span>;</div><div class="line"><span class="keyword">int</span> son[maxn], sz[maxn], fa[maxn], idx[maxn], dep[maxn], top[maxn];</div><div class="line"><span class="keyword">int</span> w[maxn], a[maxn], c[maxn][B + <span class="number">2</span>];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> clk;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">predfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">    dep[u] = d;</div><div class="line">    <span class="keyword">int</span>&amp; maxs = son[u] = <span class="number">-1</span>;</div><div class="line">    sz[u] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: G[u])</div><div class="line">        <span class="keyword">if</span> (v != fa[u]) &#123;</div><div class="line">            fa[v] = u;</div><div class="line">            predfs(v, d + <span class="number">1</span>);</div><div class="line">            sz[u] += sz[v];</div><div class="line">            <span class="keyword">if</span> (maxs == <span class="number">-1</span> || son[maxs] &lt; son[v])</div><div class="line">                maxs = v;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> tp)</span> </span>&#123;</div><div class="line">    top[u] = tp;</div><div class="line">    idx[u] = ++clk;</div><div class="line">    w[clk - <span class="number">1</span>] = a[u];</div><div class="line">    <span class="keyword">if</span> (son[u] == <span class="number">-1</span>) <span class="keyword">return</span>;</div><div class="line">    dfs(son[u], tp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: G[u])</div><div class="line">        <span class="keyword">if</span> (v != fa[u] &amp;&amp; v != son[u])</div><div class="line">            dfs(v, v);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> bl, <span class="keyword">int</span> br)</span> </span>&#123;</div><div class="line">    l--; r--; bl--; br--;</div><div class="line">    <span class="keyword">int</span> ret = c[r][br];</div><div class="line">    <span class="keyword">if</span> (l) ret -= c[l - <span class="number">1</span>][br];</div><div class="line">    <span class="keyword">if</span> (bl) ret -= c[r][bl - <span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span> (l &amp;&amp; bl) ret += c[l - <span class="number">1</span>][bl - <span class="number">1</span>];</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;P&gt; VI;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, VI&amp; b, VI&amp; t)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x = l / M, y = r / M;</div><div class="line">    <span class="keyword">if</span> (x == y) t.push_back(&#123;l, r&#125;);</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        t.push_back(&#123;l, (x + <span class="number">1</span>) * M - <span class="number">1</span>&#125;);</div><div class="line">        t.push_back(&#123;y * M, r&#125;);</div><div class="line">        <span class="keyword">if</span> (x + <span class="number">1</span> &lt;= y - <span class="number">1</span>) b.push_back(&#123;x + <span class="number">1</span>, y - <span class="number">1</span>&#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, VI&amp; b, VI&amp; t)</span> </span>&#123;</div><div class="line">    b.clear(); t.clear();</div><div class="line">    <span class="keyword">int</span> uu = top[u], vv = top[v];</div><div class="line">    <span class="keyword">while</span> (uu != vv) &#123;</div><div class="line">        <span class="keyword">if</span> (dep[uu] &lt; dep[vv]) &#123; swap(uu, vv); swap(u, v); &#125;</div><div class="line">        divide(idx[uu], idx[u], b, t);</div><div class="line">        u = fa[uu];</div><div class="line">        uu = top[u];</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v]) &#123; swap(uu, vv); swap(u, v); &#125;</div><div class="line">    divide(idx[v], idx[u], b, t);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">go</span><span class="params">(VI&amp; b, VI&amp; t, VI&amp; bb, VI&amp; tt)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (P&amp; p: b)</div><div class="line">        <span class="keyword">for</span> (P&amp; q: bb) &#123;</div><div class="line">            <span class="keyword">int</span> l = p.l * M, r = (p.r + <span class="number">1</span>) * M - <span class="number">1</span>;</div><div class="line">            ans += sum(l, r, q.l, q.r);</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">for</span> (P&amp; p: b)</div><div class="line">        <span class="keyword">for</span> (P&amp; q: tt)</div><div class="line">            ans += sum(q.l, q.r, p.l, p.r);</div><div class="line">    <span class="keyword">for</span> (P&amp; p: bb)</div><div class="line">        <span class="keyword">for</span> (P&amp; q: t)</div><div class="line">            ans += sum(q.l, q.r, p.l, p.r);</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> cnt[maxn];</div><div class="line">    <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</div><div class="line">    <span class="keyword">for</span> (P&amp; p: t)</div><div class="line">        FOR (i, p.l, p.r + <span class="number">1</span>)</div><div class="line">            cnt[w[i - <span class="number">1</span>]]++;</div><div class="line">    <span class="keyword">for</span> (P&amp; p: tt)</div><div class="line">        FOR (i, p.l, p.r + <span class="number">1</span>)</div><div class="line">            ans += cnt[w[i - <span class="number">1</span>]];</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> uu = top[u], vv = top[v];</div><div class="line">    <span class="keyword">while</span> (uu != vv) &#123;</div><div class="line">        <span class="keyword">if</span> (dep[uu] &lt; dep[vv]) &#123; swap(u, v); swap(uu, vv); &#125;</div><div class="line">        u = fa[uu];</div><div class="line">        uu = top[u];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v]) <span class="keyword">return</span> u; <span class="keyword">else</span> <span class="keyword">return</span> v;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">intersection</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> xx, <span class="keyword">int</span> yy)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> t[<span class="number">4</span>] = &#123;lca(x, xx), lca(x, yy), lca(y, xx), lca(y, yy)&#125;;</div><div class="line">    sort(t, t + <span class="number">4</span>);</div><div class="line">    <span class="keyword">int</span> r = lca(x, y), rr = lca(xx, yy);</div><div class="line">    <span class="keyword">if</span> (dep[t[<span class="number">0</span>]] &lt; min(dep[r], dep[rr]) || dep[t[<span class="number">2</span>]] &lt; max(dep[r], dep[rr]))</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> tt = lca(t[<span class="number">2</span>], t[<span class="number">3</span>]);</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">1</span> + dep[t[<span class="number">2</span>]] + dep[t[<span class="number">3</span>]] - dep[tt] * <span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n, Q, u, v, ttt = <span class="number">0</span>;</div><div class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; Q;</div><div class="line">    FOR (i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">        <span class="keyword">auto</span> it = mp.find(a[i]);</div><div class="line">        <span class="keyword">if</span> (it == mp.end()) a[i] = mp[a[i]] = ++ttt;</div><div class="line">        <span class="keyword">else</span> a[i] = it-&gt;second;</div><div class="line">    &#125;</div><div class="line">    FOR (i, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line">    predfs(<span class="number">1</span>, <span class="number">1</span>); dfs(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    FOR (b, <span class="number">0</span>, B) &#123;</div><div class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</div><div class="line">        FOR (i, b * M, (b + <span class="number">1</span>) * M)</div><div class="line">            <span class="keyword">if</span> (i &gt;= n) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">else</span> cnt[w[i]]++;</div><div class="line">        FOR (i, <span class="number">0</span>, n)</div><div class="line">            c[i][b] = cnt[w[i]];</div><div class="line">    &#125;</div><div class="line">    FOR (i, <span class="number">0</span>, n)</div><div class="line">        FOR (b, <span class="number">0</span>, B) &#123;</div><div class="line">            <span class="keyword">int</span>&amp; t = c[i][b];</div><div class="line">            <span class="keyword">if</span> (i) t += c[i - <span class="number">1</span>][b];</div><div class="line">            <span class="keyword">if</span> (b) t += c[i][b - <span class="number">1</span>];</div><div class="line">            <span class="keyword">if</span> (i &amp;&amp; b) t -= c[i - <span class="number">1</span>][b - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">while</span> (Q--) &#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> x, y, xx, yy;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x, &amp;y, &amp;xx, &amp;yy);</div><div class="line">        VI b, t, bb, tt;</div><div class="line">        query(x, y, b, t);</div><div class="line">        query(xx, yy, bb, tt);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, go(b, t, bb, tt) - intersection(x, y, xx, yy));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/counting-on-a-tree&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.hackerrank.com/challenges/counting-on-a-tree&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给一棵树，树上的每一个点都有一个数字，询问对于给定的两条树上路径，有多少对不同的且分别属于两条路径的点满足对应数字相等。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="HackerRank" scheme="http://yoursite.com/tags/HackerRank/"/>
    
      <category term="LCA" scheme="http://yoursite.com/tags/LCA/"/>
    
  </entry>
  
  <entry>
    <title>算法 - 二进制分组</title>
    <link href="http://yoursite.com/2017/08/04/group-by-binary/"/>
    <id>http://yoursite.com/2017/08/04/group-by-binary/</id>
    <published>2017-08-04T04:35:44.000Z</published>
    <updated>2017-08-04T15:11:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p>具体见 2013 年集训队论文《浅谈数据结构题的几个非经典解法》（作者：许昊然）。  </p><h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><ul><li>题目要求支持修改和查询操作。</li><li>但是你只有一种不支持修改的算法，往往是通过预处理来支持快速查询操作。</li><li>如果直接使用这种算法，可能要预处理很慢却要常常进行，查询很快却没几个，时间复杂度分配很不合理。</li><li>于是你想到，可以通过分块使时间复杂度变得均匀合理。就是把每 $\sqrt n$ 个修改操作（假设修改操作共 $n$ 个）分为一组，然后每次需要预处理的长度上限就变小了，作为代价，增加了查询的时间。</li><li>二进制分组是一种更为优秀的分组策略（具体和预处理复杂度和查询复杂度相关）。如果当前有 k 个修改操作，会按照 2 的幂将 k 分解从大到小的若干组。如果增加一个操作，分组的变化通过暴力删除和重建进行（当然如果可以合并的话那就只需要合并了）。(如 5 = 4 + 1, 6 = 4 + 2，从 5 增加到 6 就把原来那个大小为 1 的组删了，再将原来最后一个和新增加的那一个建一个大小为 2 的组)</li><li>复杂度：<ul><li>单次查询复杂度 $\times \log n$，毕竟最多只有 $\log n$ 组嘛。</li><li>总的预处理复杂度是单次的 $\log n$ 倍，具体证明见论文。</li></ul></li></ul><a id="more"></a><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><ul><li>如果这不是一道强制在线题，我大可以选择时间分治。</li><li>如果有支持在线的算法或数据结构，我就没有必要用 log 的代价把在线换成离线。</li><li>要求修改操作的贡献可以任意次序累加。</li></ul><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>不存在的。这个算法想法很不错，不过很可能用不上。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;资料&quot;&gt;&lt;a href=&quot;#资料&quot; class=&quot;headerlink&quot; title=&quot;资料&quot;&gt;&lt;/a&gt;资料&lt;/h2&gt;&lt;p&gt;具体见 2013 年集训队论文《浅谈数据结构题的几个非经典解法》（作者：许昊然）。  &lt;/p&gt;
&lt;h2 id=&quot;为什么&quot;&gt;&lt;a href=&quot;#为什么&quot; class=&quot;headerlink&quot; title=&quot;为什么&quot;&gt;&lt;/a&gt;为什么&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;题目要求支持修改和查询操作。&lt;/li&gt;
&lt;li&gt;但是你只有一种不支持修改的算法，往往是通过预处理来支持快速查询操作。&lt;/li&gt;
&lt;li&gt;如果直接使用这种算法，可能要预处理很慢却要常常进行，查询很快却没几个，时间复杂度分配很不合理。&lt;/li&gt;
&lt;li&gt;于是你想到，可以通过分块使时间复杂度变得均匀合理。就是把每 $\sqrt n$ 个修改操作（假设修改操作共 $n$ 个）分为一组，然后每次需要预处理的长度上限就变小了，作为代价，增加了查询的时间。&lt;/li&gt;
&lt;li&gt;二进制分组是一种更为优秀的分组策略（具体和预处理复杂度和查询复杂度相关）。如果当前有 k 个修改操作，会按照 2 的幂将 k 分解从大到小的若干组。如果增加一个操作，分组的变化通过暴力删除和重建进行（当然如果可以合并的话那就只需要合并了）。(如 5 = 4 + 1, 6 = 4 + 2，从 5 增加到 6 就把原来那个大小为 1 的组删了，再将原来最后一个和新增加的那一个建一个大小为 2 的组)&lt;/li&gt;
&lt;li&gt;复杂度：&lt;ul&gt;
&lt;li&gt;单次查询复杂度 $\times \log n$，毕竟最多只有 $\log n$ 组嘛。&lt;/li&gt;
&lt;li&gt;总的预处理复杂度是单次的 $\log n$ 倍，具体证明见论文。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://yoursite.com/categories/Algorithms/"/>
    
    
  </entry>
  
  <entry>
    <title>ACGN</title>
    <link href="http://yoursite.com/2017/08/03/ACGN/"/>
    <id>http://yoursite.com/2017/08/03/ACGN/</id>
    <published>2017-08-03T15:16:14.000Z</published>
    <updated>2017-10-23T12:15:51.164Z</updated>
    
    <content type="html"><![CDATA[<p>本文的目的是记录一些对于 ACGN 作品的感想，而所谓感想，难免带有强烈的主观色彩，勿较真。<br>大坑待填。<br><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h2><p>我觉得通常有两种心态。</p><ul><li>其一，作品之外。带着批判、审视的眼光去看作品，于是便能够描述出作品的优劣之处，给予合理的评价。</li><li>其二，作品之内。尽量使自己代入作者所构建的世界中，并为人物的遭遇或悲或喜，甚至可能在看完之后久久不能释怀。<br>我更倾向于选择后者，因为这样我才能够感受作者想要展现的一切，想要表达的一切，也算是对作者的一种尊重。</li></ul><h2 id="设定"><a href="#设定" class="headerlink" title="设定"></a>设定</h2><p>我觉得一部优秀的作品应该有优秀的设定，最好能够令人耳目一新。在我看来合理性是建立在设定上的，因此即便是设定离现实很遥远，但只要人物的行为符合设定下的情境和心理，我便认为这是合理的。倘若产生了不合理、突兀的情节，又用补充新的设定去弥补，那真是太糟糕了。</p><h2 id="过往"><a href="#过往" class="headerlink" title="过往"></a>过往</h2><p>情节的起源、人物的动机常常源于人物童年时的经历（替弗洛伊德深表赞成）。</p><h2 id="从这里寻求什么"><a href="#从这里寻求什么" class="headerlink" title="从这里寻求什么"></a>从这里寻求什么</h2><h2 id="观看顺序"><a href="#观看顺序" class="headerlink" title="观看顺序"></a>观看顺序</h2><p>刚入坑时的感受与多年以后肯定有所不同。也许眼光更高，对作品的要求更为苛刻，也许以前令我耳目一新的情节就变为了烂大街的桥段。</p><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><h2 id="A"><a href="#A" class="headerlink" title="A+"></a>A+</h2><h3 id="命运石之门-Steins-Gate-【A-】"><a href="#命运石之门-Steins-Gate-【A-】" class="headerlink" title="命运石之门 (Steins;Gate)【A+】"></a>命运石之门 (Steins;Gate)【A+】</h3><h3 id="魔法少女小圆【A-】"><a href="#魔法少女小圆【A-】" class="headerlink" title="魔法少女小圆【A+】"></a>魔法少女小圆【A+】</h3><ul><li>编剧：虚渊玄</li><li>沙耶香，为他人祈愿，想成为正义的伙伴。那么她最终得到了她想要的东西了吗，又是否会后悔？<br>这个角色最令我心痛，看着她从美好（自私）的祈愿走向注定的灭亡。一周目时觉得她有些不可理喻，伤害了自己，还伤害了朋友，而二周目后才发现，她可能是最为真实的那个角色。</li><li>晓美焰，为了小圆一次次轮回，曾经的愿望，逐渐成为模糊不清的结局，也许这一次，就是最后一次了吧。</li><li>从动画一开始，就展现了小圆所拥有的幸福。所谓幸福，着实是令人羡慕的事物。这样的她，本没有成为魔法少女的理由。</li></ul><h3 id="弹丸论破-弹丸轮舞-【A-】"><a href="#弹丸论破-弹丸轮舞-【A-】" class="headerlink" title="弹丸论破 (弹丸轮舞)【A+】"></a>弹丸论破 (弹丸轮舞)【A+】</h3><h3 id="Fate-Zero-FZ-【A-】"><a href="#Fate-Zero-FZ-【A-】" class="headerlink" title="Fate/Zero (FZ)【A+】"></a>Fate/Zero (FZ)【A+】</h3><ul><li>同名小说动画化，因为作者是虚渊玄，所以剧情上一定很精彩。事实上小说和动画都很不错。</li><li>动画中的许多登场人物中，最后得到救赎的寥寥无几。御主的愿望和英灵的夙愿，倘若想要完成自己的心愿就必须牺牲别人的心愿，因而注定充斥着悲剧。</li><li>正义是什么？是不是应该为了大部分人的生而舍弃少部分人？</li></ul><h3 id="Fate-stay-night-Unlimited-Blade-Works-FSN-UBW篇-【A-】"><a href="#Fate-stay-night-Unlimited-Blade-Works-FSN-UBW篇-【A-】" class="headerlink" title="Fate/stay night [Unlimited Blade Works] (FSN UBW篇)【A+】"></a>Fate/stay night [Unlimited Blade Works] (FSN UBW篇)【A+】</h3><h3 id="冰菓【A-】"><a href="#冰菓【A-】" class="headerlink" title="冰菓【A+】"></a>冰菓【A+】</h3><h3 id="死亡笔记-Death-Note-【A-】"><a href="#死亡笔记-Death-Note-【A-】" class="headerlink" title="死亡笔记 (Death Note)【A+】"></a>死亡笔记 (Death Note)【A+】</h3><h2 id="A-1"><a href="#A-1" class="headerlink" title="A"></a>A</h2><h3 id="Another-替身-【A】"><a href="#Another-替身-【A】" class="headerlink" title="Another (替身) 【A】"></a>Another (替身) 【A】</h3><p>当得知这部动画是由 绫辻行人 的作品改编之时，我便立即找小说来看。那么首先介绍一下绫辻行人。</p><p>绫辻行人的推理作品我一直很喜欢，新本格推理也令我着迷。一定要说好在哪里的话，我觉得氛围的营造十分出色。但如果你十分追求推理作品解答的合理、线索的公平，那可能就会感到失望了。推荐路线《十角馆杀人预告》-&gt;《雾越邸杀人事件》-&gt; 《钟表馆幽灵》</p><ul><li>《Another》在我看来不是轻小说（这个判断不会错的），所以改变成动画令我感到有些意外（其实还改编成漫画）。（也许是因为故事发生在小城市的校园中，剧情又从一开始就引人入胜，很像是轻小说的架构？）</li><li>这部动画成为禁片的缘故我觉得是因为血腥，画面可能比文字震撼多了。其实作者能写出那么血腥的画面我一点也不意外，因为我看过作者的另一部作品《杀人鬼》（极不推荐，光是恐怖真的没有意思）。</li><li>看完小说后，我试着去看动画，但由于女主形象和我看小说时想象出来的相差甚远，便放弃了。看完动画是很久之后的事了，那时小说中的情节只能记得大概。</li><li>超现实，甚至称得上是灵异。就凭这一点就意味着这部作品只会被少部分人喜爱。</li><li>如果从悬疑来看，这确实是出色的作品。</li><li>绫辻行人后来写了《Another S》（替身S）。与《Another》的关联并不大，不推荐阅读。（如果实在喜欢《Another》这部作品，也不妨阅读一下这个，顶多看完有点后悔。）</li></ul><h3 id="罪恶王冠【A】"><a href="#罪恶王冠【A】" class="headerlink" title="罪恶王冠【A】"></a>罪恶王冠【A】</h3><h3 id="GOSICK【A】"><a href="#GOSICK【A】" class="headerlink" title="GOSICK【A】"></a>GOSICK【A】</h3><h3 id="Angel-Beats-天使的心跳-【A】"><a href="#Angel-Beats-天使的心跳-【A】" class="headerlink" title="Angel Beats! (天使的心跳)【A】"></a>Angel Beats! (天使的心跳)【A】</h3><h3 id="天才麻将少女【A】"><a href="#天才麻将少女【A】" class="headerlink" title="天才麻将少女【A】"></a>天才麻将少女【A】</h3><h3 id="刀剑神域【A】"><a href="#刀剑神域【A】" class="headerlink" title="刀剑神域【A】"></a>刀剑神域【A】</h3><h2 id="A-2"><a href="#A-2" class="headerlink" title="A-"></a>A-</h2><h3 id="Re：从零开始的异世界生活-Re-0-【A-】"><a href="#Re：从零开始的异世界生活-Re-0-【A-】" class="headerlink" title="Re：从零开始的异世界生活 (Re:0)【A-】"></a>Re：从零开始的异世界生活 (Re:0)【A-】</h3><h3 id="CLANNAD【A-】"><a href="#CLANNAD【A-】" class="headerlink" title="CLANNAD【A-】"></a>CLANNAD【A-】</h3><h3 id="四月是你的谎言【A-】"><a href="#四月是你的谎言【A-】" class="headerlink" title="四月是你的谎言【A-】"></a>四月是你的谎言【A-】</h3><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><h3 id="编舟记【B】"><a href="#编舟记【B】" class="headerlink" title="编舟记【B】"></a>编舟记【B】</h3><h3 id="狐妖小红娘【B】"><a href="#狐妖小红娘【B】" class="headerlink" title="狐妖小红娘【B】"></a>狐妖小红娘【B】</h3><h3 id="小林家的龙女仆【B】"><a href="#小林家的龙女仆【B】" class="headerlink" title="小林家的龙女仆【B】"></a>小林家的龙女仆【B】</h3><h3 id="埃罗芒阿老师-黄漫老师-【B】"><a href="#埃罗芒阿老师-黄漫老师-【B】" class="headerlink" title="埃罗芒阿老师 (黄漫老师)【B】"></a>埃罗芒阿老师 (黄漫老师)【B】</h3><h3 id="混沌之子-Chaos-Head-【B】"><a href="#混沌之子-Chaos-Head-【B】" class="headerlink" title="混沌之子 (Chaos;Head)【B】"></a>混沌之子 (Chaos;Head)【B】</h3><ul><li>特指动画</li></ul><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h3 id="混沌之脑-Chaos-Child-【C】"><a href="#混沌之脑-Chaos-Child-【C】" class="headerlink" title="混沌之脑 (Chaos;Child)【C】"></a>混沌之脑 (Chaos;Child)【C】</h3><ul><li>特指动画</li></ul><h3 id="时钟机关之星【C】"><a href="#时钟机关之星【C】" class="headerlink" title="时钟机关之星【C】"></a>时钟机关之星【C】</h3><h1 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h1><p>这里只列举了一部分我看过的轻小说。</p><h2 id="野村美月的作品"><a href="#野村美月的作品" class="headerlink" title="野村美月的作品"></a>野村美月的作品</h2><h3 id="文学小女【-】"><a href="#文学小女【-】" class="headerlink" title="文学小女【???】"></a>文学小女【???】</h3><h3 id="光在地球之时【-】"><a href="#光在地球之时【-】" class="headerlink" title="光在地球之时【??】"></a>光在地球之时【??】</h3><h3 id="女装家教-女装皇家教师-【-】"><a href="#女装家教-女装皇家教师-【-】" class="headerlink" title="女装家教 (女装皇家教师)【??】"></a>女装家教 (女装皇家教师)【??】</h3><h3 id="陆与千星-发送世界的少年与别墅的少女【-】"><a href="#陆与千星-发送世界的少年与别墅的少女【-】" class="headerlink" title="陆与千星~发送世界的少年与别墅的少女【?】"></a>陆与千星~发送世界的少年与别墅的少女【?】</h3><h2 id="动画化的作品"><a href="#动画化的作品" class="headerlink" title="动画化的作品"></a>动画化的作品</h2><h3 id="刀剑神域【A-】"><a href="#刀剑神域【A-】" class="headerlink" title="刀剑神域【A-】"></a>刀剑神域【A-】</h3><h3 id="机巧少女不会受伤【B】"><a href="#机巧少女不会受伤【B】" class="headerlink" title="机巧少女不会受伤【B】"></a>机巧少女不会受伤【B】</h3><h3 id="精灵使的剑舞【B】"><a href="#精灵使的剑舞【B】" class="headerlink" title="精灵使的剑舞【B】"></a>精灵使的剑舞【B】</h3><h3 id="绯弹的亚里亚【B】"><a href="#绯弹的亚里亚【B】" class="headerlink" title="绯弹的亚里亚【B】"></a>绯弹的亚里亚【B】</h3><h3 id="约会大作战-DATE-A-LIFE-【B】"><a href="#约会大作战-DATE-A-LIFE-【B】" class="headerlink" title="约会大作战 (DATE A LIFE)【B】"></a>约会大作战 (DATE A LIFE)【B】</h3><h1 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h1><h2 id="弹丸轮舞-2【A-】"><a href="#弹丸轮舞-2【A-】" class="headerlink" title="弹丸轮舞 2【A+】"></a>弹丸轮舞 2【A+】</h2><h1 id="漫画"><a href="#漫画" class="headerlink" title="漫画"></a>漫画</h1><h2 id="端脑【A】"><a href="#端脑【A】" class="headerlink" title="端脑【A】"></a>端脑【A】</h2><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><ul><li>文中的推荐路线很可能并没有把作者最优秀的作品放在最前面，因为考虑到作品的长度和难度，以及对该作者作品的优秀程度信任的累积过程。</li><li>评价，其中 A 代表我会向别人推荐这部作品。<ul><li>A+: 我认为很出色，而且是多数人都会喜欢的作品。</li><li>A: 我认为很出色，但可能只有少部分人会喜欢的作品。</li><li>A-: 大多数人都会喜欢，但我觉得没那么出色的作品。</li><li>B: 我认为一般，或者我不会推荐给别人看的作品。</li><li>C: 我认为糟糕，而且会劝别人不要看的作品。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文的目的是记录一些对于 ACGN 作品的感想，而所谓感想，难免带有强烈的主观色彩，勿较真。&lt;br&gt;大坑待填。&lt;br&gt;
    
    </summary>
    
      <category term="杂文" scheme="http://yoursite.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>算法 - 整体二分</title>
    <link href="http://yoursite.com/2017/08/03/divide-and-conquer/"/>
    <id>http://yoursite.com/2017/08/03/divide-and-conquer/</id>
    <published>2017-08-02T16:11:58.000Z</published>
    <updated>2017-08-04T04:37:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p>具体见 2013 年集训队论文《浅谈数据结构题的几个非经典解法》（作者：许昊然）。<br>本文假设读者已经读过这篇论文中整体二分的部分。</p><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><ul><li>需要离线</li><li>可以二分答案</li><li>修改操作，要求对于一次查询，前面的修改操作可以交换顺序而不影响查询结果</li><li>贡献可以累加</li><li>注意将操作（包括询问）分离到两个新的答案区间这个过程的复杂度应该和操作数的个数相关，而不能和以下两项相关：<ul><li>总的区间（就是最初的答案区间）</li><li>尤其是<strong>序列总长</strong>，通常指的是询问区间的长度</li></ul></li></ul><a id="more"></a><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="静态区间第k大"><a href="#静态区间第k大" class="headerlink" title="静态区间第k大"></a>静态区间第k大</h3><p>题目：poj 2104, hdu 2665, <a href="http://acm.ecnu.edu.cn/problem/3315/" target="_blank" rel="noopener">EOJ 3315</a><br>经典题。给出 n 个数，询问区间内第k大的数。通常做法是主席树。</p><ul><li>整体二分答案</li><li>目标：对于在答案区间 [l, r] 内的询问，分发到 [l, mid] 和 [mid + 1, r]，这个过程要求时间复杂度与询问个数或者答案区间长度相关而不能与 n 有关。</li><li>筛选出 n 个数中大小在 [mid + 1, r] 之间的数的位置，通过二分查找计算这些数有几个落在每个询问的区间内，存到临时答案数组 tmp_ans 中。</li><li>对于询问 q[i], 如果 k-1 &lt; tmp_ans[i] + q[i].cur，说明答案落在 [mid + 1, r] 中，反之，则落在 [l, mid] 中，由于大于 mid 的数的贡献不变，所以存在 q[i].cur 中，之后就不需要考虑 大于 mid 的数了。</li><li>至此，成功划分为子问题。</li><li>复杂度 $O((N + Q)\log n\log C)$，$C$ 是数值范围</li><li>实际上用整体二分的时间消耗和主席树很接近，代码长度也没有优势，但是很省空间。</li></ul><p>代码 (EOJ 3315):<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1E9</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1E5</span> + <span class="number">100</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Q</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r, k, cur, ans;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> id, v;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> P&amp; rhs) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> v &lt; rhs.v;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Q query[maxn];</div><div class="line">P p[maxn];</div><div class="line"><span class="keyword">int</span> n, m, t, pos[maxn], pos_sz, tmp_ans[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;Q*&gt;&amp; q, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (q.empty()) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;</div><div class="line">        FOR (i, <span class="number">0</span>, q.size()) q[i]-&gt;ans = l;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>);</div><div class="line">    pos_sz = <span class="number">0</span>;</div><div class="line">    FOR (it, upper_bound(p, p + n, P&#123;<span class="number">0</span>, mid&#125;), upper_bound(p, p + n, P&#123;<span class="number">0</span>, r&#125;))</div><div class="line">        pos[pos_sz++] = it-&gt;id;</div><div class="line">    sort(pos, pos + pos_sz);</div><div class="line">    FOR (i, <span class="number">0</span>, q.size())</div><div class="line">        tmp_ans[i] = upper_bound(pos, pos + pos_sz, q[i]-&gt;r) -</div><div class="line">                     lower_bound(pos, pos + pos_sz, q[i]-&gt;l);</div><div class="line">    <span class="built_in">vector</span>&lt;Q*&gt; qL, qR;</div><div class="line">    FOR (i, <span class="number">0</span>, q.size()) &#123;</div><div class="line">        <span class="keyword">if</span> (q[i]-&gt;k - <span class="number">1</span> &lt; q[i]-&gt;cur + tmp_ans[i]) &#123;</div><div class="line">            qR.push_back(q[i]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            qL.push_back(q[i]);</div><div class="line">            q[i]-&gt;cur += tmp_ans[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    go(qL, l, mid);</div><div class="line">    go(qR, mid + <span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</div><div class="line">    FOR (i, <span class="number">0</span>, n) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">        p[i].v = t;</div><div class="line">        p[i].id = i + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    sort(p, p + n);</div><div class="line">    <span class="built_in">vector</span>&lt;Q*&gt; q;</div><div class="line">    FOR (i, <span class="number">0</span>, m) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;query[i].l, &amp;query[i].r, &amp;query[i].k);</div><div class="line">        query[i].cur = <span class="number">0</span>;</div><div class="line">        q.push_back(&amp;query[i]);</div><div class="line">    &#125;</div><div class="line">    go(q, -MAX, MAX);</div><div class="line">    FOR (i, <span class="number">0</span>, m) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, q[i]-&gt;ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="动态区间第k大"><a href="#动态区间第k大" class="headerlink" title="动态区间第k大"></a>动态区间第k大</h3><p>题目：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5412" target="_blank" rel="noopener">hdu 5412</a>。<br>与之前的题目相比，额外支持一个操作，修改一个位置上的数。</p><ul><li>将修改操作视为删除一个数后插入一个数，一开始的初始状态看做进行了 n 次插入操作。</li><li>无论是查询操作还是修改操作，都需要分发到对应子区间内。</li><li>利用树状数组来保证单次的复杂度仅与待分发的操作数个数相关。</li><li>树状数组使用后进行还原，避免了$O(n)$的清空操作</li></ul><p>代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1E5</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1E9</span> + <span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Q</span> &#123;</span> <span class="comment">// tp = 0 -&gt; query, tp = 1 -&gt; modify</span></div><div class="line">    <span class="keyword">int</span> tp, pos, d, l, r, k, cur, ans;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> a[maxn], n, m, q_n, t, l, r, k, pos, c[maxn], tmp_ans[maxn];</div><div class="line">Q q[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i)) c[i] += k;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &gt; <span class="number">0</span>; i -= lowbit(i)) ret += c[i];</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;Q*&gt;&amp; q, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="built_in">cerr</span> &lt;&lt; l &lt;&lt; <span class="string">' '</span> &lt;&lt; r &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">if</span> (q.empty()) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;</div><div class="line">        FOR (i, <span class="number">0</span>, q.size()) q[i]-&gt;ans = l;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>);</div><div class="line">    FOR (i, <span class="number">0</span>, q.size())</div><div class="line">        <span class="keyword">if</span> (q[i]-&gt;tp &amp;&amp; <span class="built_in">abs</span>(q[i]-&gt;d) &lt;= mid) add(q[i]-&gt;pos, q[i]-&gt;d / <span class="built_in">abs</span>(q[i]-&gt; d));</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!q[i]-&gt;tp) tmp_ans[i] = sum(q[i]-&gt;r) - sum(q[i]-&gt;l - <span class="number">1</span>);</div><div class="line">    FOR (i, <span class="number">0</span>, q.size())</div><div class="line">        <span class="keyword">if</span> (q[i]-&gt;tp &amp;&amp; <span class="built_in">abs</span>(q[i]-&gt;d) &lt;= mid) add(q[i]-&gt;pos, -q[i]-&gt;d / <span class="built_in">abs</span>(q[i]-&gt; d));</div><div class="line">    <span class="built_in">vector</span>&lt;Q*&gt; qL, qR;</div><div class="line">    FOR (i, <span class="number">0</span>, q.size())</div><div class="line">        <span class="keyword">if</span> (!q[i]-&gt;tp) &#123;</div><div class="line">            <span class="keyword">if</span> (q[i]-&gt; k &gt; tmp_ans[i] + q[i]-&gt;cur) &#123;</div><div class="line">                qR.push_back(q[i]);</div><div class="line">                q[i]-&gt;cur += tmp_ans[i];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                qL.push_back(q[i]);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(q[i]-&gt;d) &lt;= mid) qL.push_back(q[i]);</div><div class="line">            <span class="keyword">else</span> qR.push_back(q[i]);</div><div class="line">        &#125;</div><div class="line">    go(qL, l, mid);</div><div class="line">    go(qR, mid + <span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">    FOR (i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">        q[m++] = Q&#123;<span class="number">1</span>, i, a[i], <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; q_n;</div><div class="line">    FOR (i, <span class="number">0</span>, q_n) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">        <span class="keyword">if</span> (t == <span class="number">2</span>) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;k);</div><div class="line">            q[m++] = Q&#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, l, r, k, <span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pos);</div><div class="line">            q[m++] = Q&#123;<span class="number">1</span>, pos, -a[pos], <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[pos]);</div><div class="line">            q[m++] = Q&#123;<span class="number">1</span>, pos, a[pos], <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">vector</span>&lt;Q*&gt; query; query.resize(m);</div><div class="line">    FOR (i, <span class="number">0</span>, m) query[i] = &amp;q[i];</div><div class="line">    go(query, <span class="number">1</span>, MAX);</div><div class="line">    FOR (i, <span class="number">0</span>, m)</div><div class="line">        <span class="keyword">if</span> (!q[i].tp)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, q[i].ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;资料&quot;&gt;&lt;a href=&quot;#资料&quot; class=&quot;headerlink&quot; title=&quot;资料&quot;&gt;&lt;/a&gt;资料&lt;/h2&gt;&lt;p&gt;具体见 2013 年集训队论文《浅谈数据结构题的几个非经典解法》（作者：许昊然）。&lt;br&gt;本文假设读者已经读过这篇论文中整体二分的部分。&lt;/p&gt;
&lt;h2 id=&quot;限制&quot;&gt;&lt;a href=&quot;#限制&quot; class=&quot;headerlink&quot; title=&quot;限制&quot;&gt;&lt;/a&gt;限制&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;需要离线&lt;/li&gt;
&lt;li&gt;可以二分答案&lt;/li&gt;
&lt;li&gt;修改操作，要求对于一次查询，前面的修改操作可以交换顺序而不影响查询结果&lt;/li&gt;
&lt;li&gt;贡献可以累加&lt;/li&gt;
&lt;li&gt;注意将操作（包括询问）分离到两个新的答案区间这个过程的复杂度应该和操作数的个数相关，而不能和以下两项相关：&lt;ul&gt;
&lt;li&gt;总的区间（就是最初的答案区间）&lt;/li&gt;
&lt;li&gt;尤其是&lt;strong&gt;序列总长&lt;/strong&gt;，通常指的是询问区间的长度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://yoursite.com/categories/Algorithms/"/>
    
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Recurrent on a Tree</title>
    <link href="http://yoursite.com/2017/07/20/Recurrent-on-a-Tree/"/>
    <id>http://yoursite.com/2017/07/20/Recurrent-on-a-Tree/</id>
    <published>2017-07-20T14:43:11.000Z</published>
    <updated>2017-11-17T01:37:52.468Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://www.hackerrank.com/contests/w34/challenges/recurrent-on-tree" target="_blank" rel="noopener">https://www.hackerrank.com/contests/w34/challenges/recurrent-on-tree</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一棵树，每个点有一个值。求任意两个顶点（可以相同）路径上的值的和经过 f 函数后的和。f(x) 是斐波那契数列第 x 项。<br><a id="more"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>斐波那契数列的某一项可以通过矩阵快速幂求得。与之类似的，利用矩阵乘法可以将 f(? + ?) 的问题转化为求 Mat(?) * Mat(?) 的问题，进而转化为寻常的树上 dp。</li><li>由于运算中矩阵都是某一个矩阵的幂，所以满足交换律。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> LL MOD = <span class="number">1E9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1E5</span> + <span class="number">1</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2E5</span> + <span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span> &#123;</span></div><div class="line">    LL v[<span class="number">2</span>][<span class="number">2</span>];</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        v[<span class="number">0</span>][<span class="number">0</span>] = v[<span class="number">0</span>][<span class="number">1</span>] = v[<span class="number">1</span>][<span class="number">0</span>] = v[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</div><div class="line">Mat <span class="keyword">operator</span> * (Mat x, Mat y);</div><div class="line">Mat <span class="keyword">operator</span> + (Mat x, Mat y);</div><div class="line">Mat <span class="keyword">operator</span> - (Mat x, Mat y);</div><div class="line"></div><div class="line">Mat r[maxm], s[maxn], ans, cs[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> n, u, v, a[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">    FOR(i, <span class="number">0</span>, G[k].size())</div><div class="line">        <span class="keyword">if</span> (G[k][i] != fa)</div><div class="line">            dfs(G[k][i], k);</div><div class="line">    FOR(i, <span class="number">0</span>, G[k].size()) &#123;</div><div class="line">        <span class="keyword">int</span> t = G[k][i];</div><div class="line">        <span class="keyword">if</span> (t == fa) <span class="keyword">continue</span>;</div><div class="line">        ans = ans + r[a[k]] * s[t] * (cs[k] - s[t]);</div><div class="line">        s[k] = s[k] + s[t];</div><div class="line">    &#125;</div><div class="line">    s[k] = s[k] * r[a[k]] + r[a[k]];</div><div class="line">    cs[fa] = cs[fa] + s[k];</div><div class="line">    ans = ans + s[k] + s[k] - r[a[k]];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">    FOR(i, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line">    FOR(i, <span class="number">1</span>, n + <span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; (ans.v[<span class="number">1</span>][<span class="number">0</span>] + ans.v[<span class="number">1</span>][<span class="number">1</span>]) % MOD &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    Mat p;</div><div class="line">    p.v[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; p.v[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    p.v[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>; p.v[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    r[<span class="number">0</span>].v[<span class="number">0</span>][<span class="number">0</span>] = r[<span class="number">0</span>].v[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    FOR(i, <span class="number">1</span>, maxm)</div><div class="line">        r[i] = r[i - <span class="number">1</span>] * p;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Mat <span class="keyword">operator</span> * (Mat x, Mat y) &#123;</div><div class="line">    Mat ret;</div><div class="line">    FOR(i, <span class="number">0</span>, <span class="number">2</span>)</div><div class="line">        FOR(j, <span class="number">0</span>, <span class="number">2</span>) &#123;</div><div class="line">            ret.v[i][j] = <span class="number">0</span>;</div><div class="line">            FOR(k, <span class="number">0</span>, <span class="number">2</span>)</div><div class="line">                ret.v[i][j] = (ret.v[i][j] + x.v[i][k] * y.v[k][j]) % MOD;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Mat <span class="keyword">operator</span> + (Mat x, Mat y) &#123;</div><div class="line">    Mat ret;</div><div class="line">    FOR(i, <span class="number">0</span>, <span class="number">2</span>)</div><div class="line">        FOR(j, <span class="number">0</span>, <span class="number">2</span>)</div><div class="line">            ret.v[i][j] = (x.v[i][j] + y.v[i][j]) % MOD;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Mat <span class="keyword">operator</span> - (Mat x, Mat y) &#123;</div><div class="line">    Mat ret;</div><div class="line">    FOR(i, <span class="number">0</span>, <span class="number">2</span>)</div><div class="line">        FOR(j, <span class="number">0</span>, <span class="number">2</span>)</div><div class="line">            ret.v[i][j] = (x.v[i][j] - y.v[i][j] + MOD) % MOD;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/contests/w34/challenges/recurrent-on-tree&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.hackerrank.com/contests/w34/challenges/recurrent-on-tree&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给一棵树，每个点有一个值。求任意两个顶点（可以相同）路径上的值的和经过 f 函数后的和。f(x) 是斐波那契数列第 x 项。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="HackerRank" scheme="http://yoursite.com/tags/HackerRank/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Summing Pieces</title>
    <link href="http://yoursite.com/2017/07/12/Summing-Pieces/"/>
    <id>http://yoursite.com/2017/07/12/Summing-Pieces/</id>
    <published>2017-07-12T01:02:59.000Z</published>
    <updated>2017-07-12T01:56:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://www.hackerrank.com/challenges/summing-pieces" target="_blank" rel="noopener">https://www.hackerrank.com/challenges/summing-pieces</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一列数，分割成任意多段，某一种分法的值为每一段的数字和和段长之积之和，求所有方案的值的总和。<br><a id="more"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>首先写一个会超时的$O(n^2)$的算法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">FOR(i, <span class="number">1</span>, n + <span class="number">1</span>)</div><div class="line">    FOR(j, <span class="number">0</span>, i) &#123;</div><div class="line">        cnt[i] += cnt[j]; <span class="comment">// cnt[i] = 2 ^ (i - 1)</span></div><div class="line">        dp[i] += dp[j] + (p[i] - p[j]) * (i - j) * cnt[j]; <span class="comment">// p[i]: prefix sum</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure><ul><li>发现$n$个数有$2^{n-1}$种方案（可以理解为有$n-1$个空隙，每个空隙都可以选择是否插板）</li><li>根据数据范围，这道题目要求$O(n)$的算法</li></ul><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h3><ul><li><a href="https://www.hackerrank.com/challenges/summing-pieces/editorial" target="_blank" rel="noopener">https://www.hackerrank.com/challenges/summing-pieces/editorial</a></li><li>将 dp[i] 的和式进行变形，利用前缀和快速转移</li></ul><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><ul><li>考虑长度为 l 的一段</li><li>它所有的位置覆盖每一个数的次数是这样的:<br>1, 2, … , m - 1, m, m, … , m, m - 1, …, 2, 1  (m = min(l, n + 1 - l))</li><li>对于某一个位置<ul><li>如果有一端在头或者尾，则被计算的次数为$2^{n-l-1}$</li><li>如果在中间，则被计算的次数为$2^{n-l-2}$</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> LL MOD = <span class="number">1E9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1E6</span> + <span class="number">10</span>;</div><div class="line">LL n, a[maxn], l[maxn], r[maxn], s[maxn], p[maxn] = &#123;<span class="number">1</span>&#125;;</div><div class="line">LL dp[maxn], cnt[maxn] = &#123;<span class="number">1</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">go</span><span class="params">(LL x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> l[x] + r[n + <span class="number">1</span> - x] + (s[n - x] - s[x]) * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    FOR(i, <span class="number">1</span>, maxn) p[i] = (p[i - <span class="number">1</span>] * <span class="number">2</span>) % MOD;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">    FOR(i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</div><div class="line">        l[i] = (i * a[i] + l[i - <span class="number">1</span>]) % MOD;</div><div class="line">        s[i] = (a[i] + s[i - <span class="number">1</span>]) % MOD;</div><div class="line">    &#125;</div><div class="line">    FORD(i, n, <span class="number">0</span>)</div><div class="line">        r[i] = (r[i + <span class="number">1</span>] + a[i] * (n + <span class="number">1</span> - i)) % MOD;</div><div class="line">    LL ans = n * s[n] % MOD;</div><div class="line">    FOR(i, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="keyword">int</span> t = ((s[i] + s[n] - s[n - i]) % MOD + MOD) % MOD;</div><div class="line">        <span class="keyword">if</span> (i != n - <span class="number">1</span>) ans += (go(min(i, n + <span class="number">1</span> - i)) - t) % MOD * i % MOD * p[n - i - <span class="number">2</span>];</div><div class="line">        ans += p[n - i - <span class="number">1</span>] * t  % MOD * i % MOD;</div><div class="line">        ans = (ans % MOD + MOD) % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/summing-pieces&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.hackerrank.com/challenges/summing-pieces&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给定一列数，分割成任意多段，某一种分法的值为每一段的数字和和段长之积之和，求所有方案的值的总和。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="HackerRank" scheme="http://yoursite.com/tags/HackerRank/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - New Year Game</title>
    <link href="http://yoursite.com/2017/07/10/New-Year-Game/"/>
    <id>http://yoursite.com/2017/07/10/New-Year-Game/</id>
    <published>2017-07-10T03:16:00.000Z</published>
    <updated>2017-07-12T01:57:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://www.hackerrank.com/challenges/newyear-game" target="_blank" rel="noopener">https://www.hackerrank.com/challenges/newyear-game</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一列数，A 和 B 轮流取，如果每个人取的数之和之差的绝对值被 3 整除，则 B 赢，反之 A 赢。<br><a id="more"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>绝对值没有用，去掉</li><li>对于每个数，只关心它模 3 的余数</li><li>由于胜利条件不是无法操作，所以和 sg 无关</li><li>如果枚举每个状态，复杂度 $O(n^3)$，会超时。<ul><li>但是如果找规律的话，能得出一个 $O(n)$ 的做法，然后就 AC 了</li></ul></li><li>对于模 3 余 0 的数，如果有偶数个就不影响胜负（显然），如果有奇数个就当成 1 个。所以复杂度变成了 $O(n^2)$</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2000</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">int</span> a[<span class="number">3</span>], T, n, t, k;</div><div class="line"><span class="keyword">bool</span> dp[<span class="number">2</span>][maxn][maxn][<span class="number">2</span>][<span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (x + <span class="number">3</span>) % <span class="number">3</span>; &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>] = dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">2</span>] = <span class="number">1</span>; <span class="comment">// first person win</span></div><div class="line">    dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// second person win</span></div><div class="line">    FOR(t, <span class="number">0</span>, <span class="number">2</span>) <span class="comment">// 0</span></div><div class="line">        FOR(i, <span class="number">0</span>, maxn) <span class="comment">// 1</span></div><div class="line">            FOR(j, <span class="number">0</span>, maxn) <span class="comment">// 2</span></div><div class="line">                FOR(r, <span class="number">0</span>, <span class="number">2</span>) <span class="comment">// 0: first, 1: second</span></div><div class="line">                    FOR(v, <span class="number">0</span>, <span class="number">3</span>) &#123; <span class="comment">// S_first - S_second (mod 3)</span></div><div class="line">                        <span class="keyword">int</span> s = r ? <span class="number">1</span> : <span class="number">-1</span>;</div><div class="line">                        <span class="keyword">bool</span> &amp;u = dp[t][i][j][r][v];</div><div class="line">                        <span class="keyword">if</span> (t) u |= !dp[t - <span class="number">1</span>][i][j][r ^ <span class="number">1</span>][f(v - s * <span class="number">0</span>)];</div><div class="line">                        <span class="keyword">if</span> (i) u |= !dp[t][i - <span class="number">1</span>][j][r ^ <span class="number">1</span>][f(v - s * <span class="number">1</span>)];</div><div class="line">                        <span class="keyword">if</span> (j) u |= !dp[t][i][j - <span class="number">1</span>][r ^ <span class="number">1</span>][f(v - s * <span class="number">2</span>)];</div><div class="line">                    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; T;</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</div><div class="line">        FOR(i, <span class="number">0</span>, n) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">            ++a[t % <span class="number">3</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dp[a[<span class="number">0</span>] % <span class="number">2</span>][a[<span class="number">1</span>]][a[<span class="number">2</span>]][<span class="number">0</span>][<span class="number">0</span>]) <span class="built_in">puts</span>(<span class="string">"Balsa"</span>); <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Koca"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/newyear-game&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.hackerrank.com/challenges/newyear-game&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给一列数，A 和 B 轮流取，如果每个人取的数之和之差的绝对值被 3 整除，则 B 赢，反之 A 赢。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="HackerRank" scheme="http://yoursite.com/tags/HackerRank/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="博弈" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%BC%88/"/>
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Lena Sort</title>
    <link href="http://yoursite.com/2017/07/08/Lena-Sort/"/>
    <id>http://yoursite.com/2017/07/08/Lena-Sort/</id>
    <published>2017-07-08T12:49:38.000Z</published>
    <updated>2017-11-13T12:19:46.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://www.hackerrank.com/challenges/lena-sort" target="_blank" rel="noopener">https://www.hackerrank.com/challenges/lena-sort</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>题目中用伪代码给出一个排序算法，要求构造 1～n 的一个排列，使得排序过程中恰好比较了 k 次。<br><a id="more"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="玄学做法"><a href="#玄学做法" class="headerlink" title="玄学做法"></a>玄学做法</h3><ul><li>先算出长度为 d 的序列至多至少比较多少次，至多是单调，至少是每次把剩余的数列分成尽可能均匀的两部分。</li><li>先按至多的方案填，如果填不下去了不行了就按照至少的方案填。保证在填的过程中有解。</li></ul><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h3><ul><li><a href="https://www.hackerrank.com/challenges/lena-sort/editorial" target="_blank" rel="noopener">https://www.hackerrank.com/challenges/lena-sort/editorial</a></li><li>题目等价于构造一个 n 个节点二叉树，使得每个节点深度和为 k。</li><li>调整法。如果深度为 x 的那一层没有满，就可以把一个深度为 y 叶节点的深度变为 x，深度和减少了 y-x。</li><li>先把树造成一条链，然后从末端进行调整。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (remove_const<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (remove_const<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1E5</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> f[maxn], T, n, d;</div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> d == <span class="number">-1</span> || (f[d] &lt;= k &amp;&amp; k &lt;= <span class="number">1L</span>L * d * (d - <span class="number">1</span>) / <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x &gt; y) <span class="keyword">return</span>;</div><div class="line">    assert(check(y - x + <span class="number">1</span>, k));</div><div class="line">    <span class="keyword">int</span> d = y - x;</div><div class="line">    k -= d;</div><div class="line">    <span class="keyword">while</span> (d &gt;= <span class="number">0</span> &amp;&amp; check(d, k)) &#123; <span class="comment">// plan A</span></div><div class="line">        ans[l++] = x++;</div><div class="line">        k -= --d;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (d &gt; <span class="number">0</span>) &#123; <span class="comment">// plan B</span></div><div class="line">        <span class="keyword">int</span> t = (x + y + <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">while</span> (!check(y - t, k - f[t - x])) --t;</div><div class="line">        assert(t &gt; x);</div><div class="line">        ans[l] = t;</div><div class="line">        fill(x, t - <span class="number">1</span>, f[t - x], l + <span class="number">1</span>, l + t - x);</div><div class="line">        fill(t + <span class="number">1</span>, y, k - f[t - x], l + t - x + <span class="number">1</span>, r);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    FOR(i, <span class="number">2</span>, maxn)</div><div class="line">        f[i] = i - <span class="number">1</span> + f[i / <span class="number">2</span>] + f[(i - <span class="number">1</span>) / <span class="number">2</span>];</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; T;</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;d, &amp;n);</div><div class="line">        <span class="keyword">if</span> (!check(d, n)) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            fill(<span class="number">1</span>, d, n, <span class="number">1</span>, d);</div><div class="line">            FOR(i, <span class="number">1</span>, d + <span class="number">1</span>)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], i == d ? <span class="string">'\n'</span> : <span class="string">' '</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/lena-sort&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.hackerrank.com/challenges/lena-sort&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;题目中用伪代码给出一个排序算法，要求构造 1～n 的一个排列，使得排序过程中恰好比较了 k 次。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="HackerRank" scheme="http://yoursite.com/tags/HackerRank/"/>
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
</feed>
