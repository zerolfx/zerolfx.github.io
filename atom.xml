<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zerol&#39;s Notes</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-12T15:38:10.017Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zerol</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【题解】HackerRank - synchronous-shopping</title>
    <link href="http://yoursite.com/2017/11/12/synchronous-shopping/"/>
    <id>http://yoursite.com/2017/11/12/synchronous-shopping/</id>
    <published>2017-11-12T15:21:21.000Z</published>
    <updated>2017-11-12T15:38:10.017Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p>https://www.hackerrank.com/challenges/synchronous-shopping/problem</p><h2 id="题意">题意</h2><p>有 k 种商品，简单图上每个点上有若干种商品，购买商品不需要时间，两个人同时从 1 出发最后在 n 汇合，使得两人购买的商品囊括了所有的 k 种。 注意数据范围。 <a id="more"></a></p><h2 id="题解">题解</h2><ul><li>商品肯定是见到就买，到一个点可以免费 or 该店的商品种类。</li><li>k 很小最多只有 10。令状态为 (u, t)，t 为已经购买的商品，然后再新的图上跑单源最短路。</li><li>最后枚举两人分配到的任务去最大值的最小值。</li><li>另外不用把所有边都预先建出来，跑的时候再处理，因为有些状态可能是达不到的。</li></ul><p>代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(args...) do &#123; cout <span class="meta-string">&lt;&lt; "\033[32;1m" &lt;&lt; #args&lt;&lt; " -&gt; "; err(args); &#125; while (0)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(...)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"\033[39;0m"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T a, Args... args)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">' '</span>; err(args...); &#125;</div><div class="line"><span class="comment">// -----------------------------------------------------------------------------</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span> + <span class="number">100</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> u, k, d;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> P&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> d &gt; rhs.d; &#125;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> to, d;</div><div class="line">&#125;;</div><div class="line">priority_queue&lt;P&gt; pq;</div><div class="line"><span class="built_in">vector</span>&lt;E&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> b[maxn], d[maxn][maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn][maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> d);</div><div class="line">    d[<span class="number">1</span>][b[<span class="number">1</span>]] = <span class="number">0</span>;</div><div class="line">    pq.push(&#123;<span class="number">1</span>, b[<span class="number">1</span>], <span class="number">0</span>&#125;);</div><div class="line">    <span class="keyword">while</span> (!pq.empty()) &#123;</div><div class="line">        P p = pq.top(); pq.pop();</div><div class="line">        <span class="keyword">int</span> u = p.u, k = p.k;</div><div class="line">        <span class="keyword">if</span> (vis[u][k]) <span class="keyword">continue</span>;</div><div class="line">        dbg(u, k, d[u][k]);</div><div class="line">        vis[u][k] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (E&amp; e: G[u]) &#123;</div><div class="line">            <span class="keyword">int</span> v = e.to, kk = k | b[v];</div><div class="line">            <span class="keyword">if</span> (d[v][kk] &gt; d[u][k] + e.d) &#123;</div><div class="line">                d[v][kk] = d[u][k] + e.d;</div><div class="line">                pq.push(&#123;v, kk, d[v][kk]&#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n, m, k;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</div><div class="line">    FOR (i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> k, t;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</div><div class="line">        FOR (_, <span class="number">0</span>, k) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">            b[i] |= <span class="number">1</span> &lt;&lt; (t - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    FOR (_, <span class="number">0</span>, m) &#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> u, v, d;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;d);</div><div class="line">        G[u].push_back(&#123;v, d&#125;);</div><div class="line">        G[v].push_back(&#123;u, d&#125;);</div><div class="line">    &#125;</div><div class="line">    go();</div><div class="line">    <span class="keyword">int</span> all = (<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span>, ans = <span class="number">1E9</span>;</div><div class="line">    FOR (i, <span class="number">0</span>, <span class="number">1</span> &lt;&lt; k) dbg(i, d[n][i]);</div><div class="line">    FOR (i, <span class="number">0</span>, <span class="number">1</span> &lt;&lt; k)</div><div class="line">        FOR (j, <span class="number">0</span>, <span class="number">1</span> &lt;&lt; k)</div><div class="line">            <span class="keyword">if</span> ((i | j) == all) ans = min(ans, max(d[n][i], d[n][j]));</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;https://www.hackerrank.com/challenges/synchronous-shopping/problem&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;有 k 种商品，简单图上每个点上有若干种商品，购买商品不需要时间，两个人同时从 1 出发最后在 n 汇合，使得两人购买的商品囊括了所有的 k 种。 注意数据范围。
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Project Euler</title>
    <link href="http://yoursite.com/2017/11/09/Project-Euler/"/>
    <id>http://yoursite.com/2017/11/09/Project-Euler/</id>
    <published>2017-11-09T06:28:17.000Z</published>
    <updated>2017-11-09T09:24:18.631Z</updated>
    
    <content type="html"><![CDATA[<ul><li>1: 简单容斥，注意求的是和。</li><li>2: 暴力。因为斐波那契数的大小指数上升，所以数量不多。</li><li>3: 根号内枚举。（当时脑抽写了 <code>Pollard Rho</code>， 复杂度 1/4 次方）</li><li>4: 暴力 +　二分。（可能不二分也行）</li><li>5: 考虑每个素数，把答案乘上 n 以内需要提供的最多的次数。</li><li>6: 暴力 + 预处理。</li><li>7: 素数筛。</li><li>8: 暴力。</li><li>9: 枚举 3000 以内 a, b。</li><li>10: 素数筛，打表。</li><li>11: 暴力枚举。</li><li>12: 先处理处 1E6 内每个数的因子个数（埃氏筛），然后打表。</li><li>13: 取前 15 位计算即可。 (0.999…) × 1000 &lt; 10000</li><li>14: 模拟 +　记忆化。注意中间结果可能会比较大。</li><li>15: 组合数预处理。</li><li>16: 高精度。</li><li>17: 无聊。随便找了份代码就交了。</li><li>18: dp 入门。</li><li>19:</li><li><p>20:</p></li><li><p>67: 同 18;</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;1: 简单容斥，注意求的是和。&lt;/li&gt;
&lt;li&gt;2: 暴力。因为斐波那契数的大小指数上升，所以数量不多。&lt;/li&gt;
&lt;li&gt;3: 根号内枚举。（当时脑抽写了 &lt;code&gt;Pollard Rho&lt;/code&gt;， 复杂度 1/4 次方）&lt;/li&gt;
&lt;li&gt;4: 暴
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Unique Colors</title>
    <link href="http://yoursite.com/2017/11/01/Unique-Colors/"/>
    <id>http://yoursite.com/2017/11/01/Unique-Colors/</id>
    <published>2017-11-01T11:58:26.000Z</published>
    <updated>2017-11-12T15:36:11.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p>https://www.hackerrank.com/challenges/unique-colors</p><h2 id="题意">题意</h2><p>给定一棵树，树上每一个点都有一种颜色。定义一条路径的价值为路径上不同颜色的点的个数。对于树上的每个结点，输出从该结点出发的所有路径的价值之和。 <a id="more"></a></p><h2 id="题解">题解</h2><p>官方题解是用树上点分治，但是很遗憾题解看不懂。<br>神奇的是这道题和 2017 年多校第一场的某题极度相似（HDU 6035）。</p><p>多校官方题解：</p><blockquote><p>单独考虑每一种颜色，答案就是对于每种颜色至少经过一次这种的路径条数之和。反过来思考只需要求有多少条路径没有经过这种颜色即可。直接做可以采用虚树的思想（不用真正建出来），对每种颜色的点按照 dfs 序列排个序，就能求出这些点把原来的树划分成的块的大小。这个过程实际上可以直接一次 dfs 求出。</p></blockquote><ul><li>每种颜色分开考虑，计算每种颜色的贡献。</li><li>考虑问题的反面，某种颜色没有贡献给一条路径等价于路径的两个端点在同一个没有该种颜色的联通块中。也就是说，对于每一块没有这种颜色的树上联通块，联通块中所有点的答案减去联通块的大小。</li><li>难点在于对于每种颜色，复杂度不能与整棵树的大小相关，而是与该颜色结点个数相关。但是访问结点以及递归必须按顺序进行，于是需要按照 dfs序 进行递归。这就是多校题解中提到的虚树思想，当然这道题不用把树建出来。</li></ul><p>代码： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(args...) do &#123; cout <span class="meta-string">&lt;&lt; "\033[32;1m" &lt;&lt; #args&lt;&lt; " -&gt; "; err(args); &#125; while (0)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(...)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"\033[39;0m"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T a, Args... args)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">' '</span>; err(args...); &#125;</div><div class="line"><span class="comment">// -----------------------------------------------------------------------------</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1E5</span> + <span class="number">100</span>, maxc = <span class="number">1E5</span> + <span class="number">100</span>;</div><div class="line"><span class="keyword">int</span> c[maxn], in[maxn], out[maxn], sz[maxn], pa[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn], C[maxn];</div><div class="line"><span class="keyword">int</span> n, clk = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></div><div class="line">    LL c[maxn];</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i))</div><div class="line">            c[i] += k;</div><div class="line">    &#125;</div><div class="line">    <span class="function">LL <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        LL ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &gt; <span class="number">0</span>; i -= lowbit(i))</div><div class="line">            ret += c[i];</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        add(l, v); add(r + <span class="number">1</span>, -v);</div><div class="line">    &#125;</div><div class="line">&#125; bit;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">    in[u] = clk++;</div><div class="line">    C[c[u]].push_back(u);</div><div class="line">    pa[u] = fa;</div><div class="line">    sz[u] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: G[u]) &#123;</div><div class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</div><div class="line">        init_dfs(v, u);</div><div class="line">        sz[u] += sz[v];</div><div class="line">    &#125;</div><div class="line">    out[u] = clk - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; V, <span class="keyword">int</span>&amp; k)</span> </span>&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nxt;</div><div class="line">    <span class="keyword">int</span> u = V[k];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: G[u]) &#123;</div><div class="line">        <span class="keyword">if</span> (v == pa[u]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> num = sz[v]; nxt.clear();</div><div class="line">        <span class="keyword">while</span> (k + <span class="number">1</span> &lt; V.size()) &#123;</div><div class="line">            <span class="keyword">int</span> to = V[k + <span class="number">1</span>];</div><div class="line">            <span class="keyword">if</span> (in[to] &lt;= out[v]) &#123;</div><div class="line">                nxt.push_back(to);</div><div class="line">                num -= sz[to];</div><div class="line">                go(V, ++k);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        bit.add(in[v], out[v], num);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> to: nxt)</div><div class="line">            bit.add(in[to], out[to], -num);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line">    freopen(<span class="string">"in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line"></div><div class="line">    FOR (i, <span class="number">1</span>, maxc) C[i].push_back(<span class="number">0</span>);</div><div class="line">    G[<span class="number">0</span>].push_back(<span class="number">1</span>); pa[<span class="number">1</span>] = <span class="number">0</span>; c[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    FOR (i, <span class="number">1</span>, n + <span class="number">1</span>)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c[i]);</div><div class="line">    FOR (_, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> u, v;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line">    init_dfs(<span class="number">0</span>, <span class="number">-1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> tmp;</div><div class="line">    LL color_cnt = <span class="number">0</span>;</div><div class="line">    FOR (k, <span class="number">1</span>, maxc) &#123;</div><div class="line">        <span class="keyword">if</span> (C[k].size() == <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">        color_cnt++;</div><div class="line">        go(C[k], tmp = <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    FOR (i, <span class="number">1</span>, n + <span class="number">1</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, color_cnt * n - bit.sum(in[i]));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;https://www.hackerrank.com/challenges/unique-colors&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给定一棵树，树上每一个点都有一种颜色。定义一条路径的价值为路径上不同颜色的点的个数。对于树上的每个结点，输出从该结点出发的所有路径的价值之和。
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="虚树" scheme="http://yoursite.com/tags/%E8%99%9A%E6%A0%91/"/>
    
      <category term="思维" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>算法 - 线段树</title>
    <link href="http://yoursite.com/2017/10/29/Segment-Tree/"/>
    <id>http://yoursite.com/2017/10/29/Segment-Tree/</id>
    <published>2017-10-29T14:59:56.000Z</published>
    <updated>2017-10-30T02:54:18.427Z</updated>
    
    <content type="html"><![CDATA[<p>代码详见模板库。模板题 EOJ 3389-3393。</p><ul><li>Q: 要不要把 n 补成 2 的幂？</li><li><p>A: 这个无所谓，但如果要写成自底向上，那么还是需要的，否则无法直接定位叶节点。</p></li><li>Q: pushdown 之后要不要立即 maintain？</li><li><p>A: 不用立即 maintain，但迟早是要的。但是立即 maintain 很可能会重复 maintain，增加超时风险。</p></li><li>Q:query 的时候要不要 pushdown？</li><li><p>A: 如果不要的话，查询时应该把之前访问到的结点的标签的效果累加起来，并作为参数递归下去。如果要的话，代码会更加具有普适性（比如 treap 只能选择 pushdown 标签，因为结点之间相对位置会改变）。</p></li><li>Q: maintain 的时候是否考虑当前结点的标签？</li><li><p>A: 都可以。如果考虑了，那么查询的时候就不要考虑当前结点的标签了，反之亦然。</p></li><li>Q: query 的时候先考虑 set 标签还是先考虑查询区间包含当前区间？</li><li><p>A: 都可以，但是先考虑 set 会快一些。</p></li><li>Q: 根节点是 0 还是 1？</li><li><p>A: 都可以，但好像 1 比较符合人性。</p></li><li>Q: 听说空间开三倍就够了？</li><li><p>A: 那可能就 GG 了，实测 4 倍是必要的。</p></li></ul><p>其他注意事项：</p><ul><li>maintain 函数要写得保证即便是重复调用也不会出错。</li><li>pushdown 子节点必须 maintain，尤其是那个没有递归下去的子节点。</li><li>打完 set 标记后 add 标记必须清空。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代码详见模板库。模板题 EOJ 3389-3393。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Q: 要不要把 n 补成 2 的幂？&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A: 这个无所谓，但如果要写成自底向上，那么还是需要的，否则无法直接定位叶节点。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Q: pushdown 
      
    
    </summary>
    
      <category term="Algorithms" scheme="http://yoursite.com/categories/Algorithms/"/>
    
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Counting On a Tree</title>
    <link href="http://yoursite.com/2017/10/28/Counting-On-a-Tree/"/>
    <id>http://yoursite.com/2017/10/28/Counting-On-a-Tree/</id>
    <published>2017-10-28T05:41:30.000Z</published>
    <updated>2017-10-29T12:32:35.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p>https://www.hackerrank.com/challenges/counting-on-a-tree</p><h2 id="题意">题意</h2><p>给一棵树，树上的每一个点都有一个数字，询问对于给定的两条树上路径，有多少对不同的且分别属于两条路径的点满足对应数字相等。 <a id="more"></a></p><h2 id="题解">题解</h2><ul><li>题目要求的是不同的点，先不考虑这个条件，最后减去路径交的长度即可。</li><li>树上的任意路径可以分解成两条链（后文称之为规范链），使得每条链中的一个点是另一个点的祖先，这样便于计数。</li><li>设路径 x 和 y 分别分解成 x1, x2 和 y1, y2，最后的答案就是把 (x1, y1), (x2, y1), (x1, y2), (x2, y2) 的答案加起来</li><li>对于每一种颜色，按是否大于点数量的平方根，分为两种情况<ul><li>如果颜色数量大于 SQRT<ul><li>对于每一种这样的颜色，跑一边 dfs，计算出每个点到根的路径上有多少这种颜色的点（前缀和）。</li><li>然后对于每一条规范链，可以做差得到链上这种颜色的点有几个。</li><li>乘起来就是两条规范链的同色点对数了。</li></ul></li><li>如果颜色数量不大于 SQRT，设这样的颜色属于 集合c。<ul><li>首先预处理时记录 dfs 序</li><li>在 dfs 过程中维护一个树状数组，记录的是树上的每一个点到根的路径上 颜色属于集合x 的点的个数，集合 x 为当前点到根的路径上出现过得所有属于 集合c 的颜色（可重复）。</li><li>访问一个结点时，把所有相同颜色的点对应的 dfs序 区间 +1 即可。</li><li>注意需要对询问预处理，分解询问分发到每个结点</li><li>注意由于 dfs 时树状数组状态要回溯，所以要回滚操作</li></ul></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(args...) do &#123; cout <span class="meta-string">&lt;&lt; "\033[32;1m" &lt;&lt; #args&lt;&lt; " -&gt; "; err(args); &#125; while (0)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(...)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"\033[39;0m"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T a, Args... args)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">' '</span>; err(args...); &#125;</div><div class="line"><span class="comment">// -----------------------------------------------------------------------------</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1E5</span> + <span class="number">100</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> SQRT = <span class="number">100</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">L</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> bt, tp;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Q</span> &#123;</span></div><div class="line">    L l;</div><div class="line">    <span class="keyword">int</span> sgn, idx;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Q&gt; qq[maxn];</div><div class="line">L query[maxn][<span class="number">4</span>];</div><div class="line"><span class="keyword">int</span> n, clk = <span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> in[maxn], out[maxn], dep[maxn], pa[maxn][<span class="number">20</span>], a[maxn], cnt[maxn];</div><div class="line">LL ans[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> c[maxn];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span> c); &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i))</div><div class="line">            c[i] += v;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &gt; <span class="number">0</span>; i -= lowbit(i))</div><div class="line">            ret += c[i];</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        add(l, v); add(r + <span class="number">1</span>, -v);</div><div class="line">    &#125;</div><div class="line">&#125; bit;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa, <span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">    in[u] = clk++;</div><div class="line">    pa[u][<span class="number">0</span>] = fa;</div><div class="line">    dep[u] = d;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: G[u])</div><div class="line">        <span class="keyword">if</span> (v != fa)</div><div class="line">            dfs(v, u, d + <span class="number">1</span>);</div><div class="line">    out[u] = clk - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">lca_init</span><span class="params">()</span> </span>&#123;</div><div class="line">    FOR (x, <span class="number">1</span>, <span class="number">20</span>)</div><div class="line">        FOR (i, <span class="number">1</span>, n + <span class="number">1</span>)</div><div class="line">             pa[i][x] = pa[pa[i][x - <span class="number">1</span>]][x - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pp</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> pa[x][<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v]) swap(u, v);</div><div class="line">    FORD (i, <span class="number">19</span>, <span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">int</span> uu = pa[u][i];</div><div class="line">        <span class="keyword">if</span> (dep[uu] &gt;= dep[v]) u = uu;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</div><div class="line">    FORD (i, <span class="number">19</span>, <span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">int</span> uu = pa[u][i], vv = pa[v][i];</div><div class="line">        <span class="keyword">if</span> (uu != vv) &#123; u = uu; v = vv; &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> pp(u);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">intersection</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> xx, <span class="keyword">int</span> yy)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> t[<span class="number">4</span>] = &#123;lca(x, xx), lca(x, yy), lca(y, xx), lca(y, yy)&#125;;</div><div class="line">    sort(t, t + <span class="number">4</span>);</div><div class="line">    <span class="keyword">int</span> r = lca(x, y), rr = lca(xx, yy);</div><div class="line">    <span class="keyword">if</span> (dep[t[<span class="number">0</span>]] &lt; min(dep[r], dep[rr]) || dep[t[<span class="number">2</span>]] &lt; max(dep[r], dep[rr]))</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> tt = lca(t[<span class="number">2</span>], t[<span class="number">3</span>]);</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">1</span> + dep[t[<span class="number">2</span>]] + dep[t[<span class="number">3</span>]] - dep[tt] * <span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_calc</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> c = a[u];</div><div class="line">    <span class="keyword">if</span> (C[c].size() &lt; SQRT)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v: C[c])</div><div class="line">            bit.add(in[v], out[v], <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (Q&amp; q: qq[u])pingfangfenge</div><div class="line">        ans[q.idx] += q.sgn * (bit.sum(in[q.l.bt]) - bit.sum(in[q.l.tp]));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: G[u])</div><div class="line">        <span class="keyword">if</span> (v != pp(u))</div><div class="line">            dfs_calc(v);</div><div class="line">    <span class="keyword">if</span> (C[c].size() &lt; SQRT)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v: C[c])</div><div class="line">            bit.add(in[v], out[v], <span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_cnt</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> c, <span class="keyword">int</span> s)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (a[u] == c) ++s;</div><div class="line">    cnt[u] = s;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: G[u])</div><div class="line">        <span class="keyword">if</span> (v != pp(u))</div><div class="line">            dfs_cnt(v, c, s);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line">    freopen(<span class="string">"in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">int</span> q_sz, mp_sz = <span class="number">0</span>;</div><div class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q_sz;</div><div class="line">    FOR (i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">        <span class="keyword">auto</span> it = mp.find(a[i]);</div><div class="line">        <span class="keyword">if</span> (it == mp.end()) a[i] = mp[a[i]] = mp_sz++;</div><div class="line">        <span class="keyword">else</span> a[i] = it-&gt;second;</div><div class="line">        C[a[i]].push_back(i);</div><div class="line">    &#125;</div><div class="line">    FOR (_, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line">    dfs(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    lca_init();</div><div class="line">    FOR (i, <span class="number">0</span>, q_sz) &#123;</div><div class="line">        <span class="keyword">int</span> x, y, xx, yy;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x, &amp;y, &amp;xx, &amp;yy);</div><div class="line">        ans[i] -= intersection(x, y, xx, yy);</div><div class="line">        <span class="keyword">int</span> z = lca(x, y), zz = lca(xx, yy);</div><div class="line">        query[i][<span class="number">0</span>] = &#123;x, z&#125;;</div><div class="line">        query[i][<span class="number">1</span>] = &#123;y, pp(z)&#125;;</div><div class="line">        query[i][<span class="number">2</span>] = &#123;xx, zz&#125;;</div><div class="line">        query[i][<span class="number">3</span>] = &#123;yy, pp(zz)&#125;;</div><div class="line">        FOR (p, <span class="number">0</span>, <span class="number">2</span>)</div><div class="line">            FOR (q, <span class="number">2</span>, <span class="number">4</span>) &#123;</div><div class="line">                qq[query[i][p].bt].push_back(&#123;query[i][q], <span class="number">1</span>, i&#125;);</div><div class="line">                qq[query[i][p].tp].push_back(&#123;query[i][q], <span class="number">-1</span>, i&#125;);</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">    FOR (i, <span class="number">0</span>, mp_sz) &#123;</div><div class="line">        <span class="keyword">if</span> (C[i].size() &lt; SQRT) <span class="keyword">continue</span>;</div><div class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</div><div class="line">        dfs_cnt(<span class="number">1</span>, i, <span class="number">0</span>);</div><div class="line">        FOR (j, <span class="number">0</span>, q_sz) &#123;</div><div class="line">            <span class="keyword">int</span> c1 = <span class="number">0</span>, c2 = <span class="number">0</span>;</div><div class="line">            FOR (k, <span class="number">0</span>, <span class="number">2</span>) c1 += cnt[query[j][k].bt] - cnt[query[j][k].tp];</div><div class="line">            FOR (k, <span class="number">2</span>, <span class="number">4</span>) c2 += cnt[query[j][k].bt] - cnt[query[j][k].tp];</div><div class="line">            ans[j] += c1 * c2;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    dfs_calc(<span class="number">1</span>);</div><div class="line">    FOR (i, <span class="number">0</span>, q_sz)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="题解假">题解（假）</h2><p>这个题解是官方的 editorial，但是我的实现会超时，但答案是对的。另外，这个算法时在线的，但难写很多，常数也大很多。总结一下，这个算法假得很，分块和不分块差不多。</p><ul><li>对于询问的路径，剖分成若干条链。</li><li>把树上点值按树链剖分的下标数组进行平方分割。</li><li>预处理一个 n × sqrt(n) 的数组，表示第 i 个元素在第 j 块中出现了几次。</li><li>对于完整的块和连续的一段可以做到 O(1) 查询</li><li>对于零散的，数组大小不超过 SQRT * log(n)，进行桶排线性查询。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> zerol</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(args...) do &#123; cout <span class="meta-string">&lt;&lt; "\033[32;1m" &lt;&lt; #args&lt;&lt; " -&gt; "; err(args); &#125; while (0)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(...)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"\033[39;0m"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T a, Args... args)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">' '</span>; err(args...); &#125;</div><div class="line"><span class="comment">// -----------------------------------------------------------------------------</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1E5</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">300</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> B = <span class="number">334</span>;</div><div class="line"><span class="keyword">int</span> son[maxn], sz[maxn], fa[maxn], idx[maxn], dep[maxn], top[maxn];</div><div class="line"><span class="keyword">int</span> w[maxn], a[maxn], c[maxn][B + <span class="number">2</span>];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> clk;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">predfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">    dep[u] = d;</div><div class="line">    <span class="keyword">int</span>&amp; maxs = son[u] = <span class="number">-1</span>;</div><div class="line">    sz[u] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: G[u])</div><div class="line">        <span class="keyword">if</span> (v != fa[u]) &#123;</div><div class="line">            fa[v] = u;</div><div class="line">            predfs(v, d + <span class="number">1</span>);</div><div class="line">            sz[u] += sz[v];</div><div class="line">            <span class="keyword">if</span> (maxs == <span class="number">-1</span> || son[maxs] &lt; son[v])</div><div class="line">                maxs = v;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> tp)</span> </span>&#123;</div><div class="line">    top[u] = tp;</div><div class="line">    idx[u] = ++clk;</div><div class="line">    w[clk - <span class="number">1</span>] = a[u];</div><div class="line">    <span class="keyword">if</span> (son[u] == <span class="number">-1</span>) <span class="keyword">return</span>;</div><div class="line">    dfs(son[u], tp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: G[u])</div><div class="line">        <span class="keyword">if</span> (v != fa[u] &amp;&amp; v != son[u])</div><div class="line">            dfs(v, v);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> bl, <span class="keyword">int</span> br)</span> </span>&#123;</div><div class="line">    l--; r--; bl--; br--;</div><div class="line">    <span class="keyword">int</span> ret = c[r][br];</div><div class="line">    <span class="keyword">if</span> (l) ret -= c[l - <span class="number">1</span>][br];</div><div class="line">    <span class="keyword">if</span> (bl) ret -= c[r][bl - <span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span> (l &amp;&amp; bl) ret += c[l - <span class="number">1</span>][bl - <span class="number">1</span>];</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;P&gt; VI;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, VI&amp; b, VI&amp; t)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x = l / M, y = r / M;</div><div class="line">    <span class="keyword">if</span> (x == y) t.push_back(&#123;l, r&#125;);</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        t.push_back(&#123;l, (x + <span class="number">1</span>) * M - <span class="number">1</span>&#125;);</div><div class="line">        t.push_back(&#123;y * M, r&#125;);</div><div class="line">        <span class="keyword">if</span> (x + <span class="number">1</span> &lt;= y - <span class="number">1</span>) b.push_back(&#123;x + <span class="number">1</span>, y - <span class="number">1</span>&#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, VI&amp; b, VI&amp; t)</span> </span>&#123;</div><div class="line">    b.clear(); t.clear();</div><div class="line">    <span class="keyword">int</span> uu = top[u], vv = top[v];</div><div class="line">    <span class="keyword">while</span> (uu != vv) &#123;</div><div class="line">        <span class="keyword">if</span> (dep[uu] &lt; dep[vv]) &#123; swap(uu, vv); swap(u, v); &#125;</div><div class="line">        divide(idx[uu], idx[u], b, t);</div><div class="line">        u = fa[uu];</div><div class="line">        uu = top[u];</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v]) &#123; swap(uu, vv); swap(u, v); &#125;</div><div class="line">    divide(idx[v], idx[u], b, t);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">go</span><span class="params">(VI&amp; b, VI&amp; t, VI&amp; bb, VI&amp; tt)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (P&amp; p: b)</div><div class="line">        <span class="keyword">for</span> (P&amp; q: bb) &#123;</div><div class="line">            <span class="keyword">int</span> l = p.l * M, r = (p.r + <span class="number">1</span>) * M - <span class="number">1</span>;</div><div class="line">            ans += sum(l, r, q.l, q.r);</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">for</span> (P&amp; p: b)</div><div class="line">        <span class="keyword">for</span> (P&amp; q: tt)</div><div class="line">            ans += sum(q.l, q.r, p.l, p.r);</div><div class="line">    <span class="keyword">for</span> (P&amp; p: bb)</div><div class="line">        <span class="keyword">for</span> (P&amp; q: t)</div><div class="line">            ans += sum(q.l, q.r, p.l, p.r);</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> cnt[maxn];</div><div class="line">    <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</div><div class="line">    <span class="keyword">for</span> (P&amp; p: t)</div><div class="line">        FOR (i, p.l, p.r + <span class="number">1</span>)</div><div class="line">            cnt[w[i - <span class="number">1</span>]]++;</div><div class="line">    <span class="keyword">for</span> (P&amp; p: tt)</div><div class="line">        FOR (i, p.l, p.r + <span class="number">1</span>)</div><div class="line">            ans += cnt[w[i - <span class="number">1</span>]];</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> uu = top[u], vv = top[v];</div><div class="line">    <span class="keyword">while</span> (uu != vv) &#123;</div><div class="line">        <span class="keyword">if</span> (dep[uu] &lt; dep[vv]) &#123; swap(u, v); swap(uu, vv); &#125;</div><div class="line">        u = fa[uu];</div><div class="line">        uu = top[u];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v]) <span class="keyword">return</span> u; <span class="keyword">else</span> <span class="keyword">return</span> v;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">intersection</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> xx, <span class="keyword">int</span> yy)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> t[<span class="number">4</span>] = &#123;lca(x, xx), lca(x, yy), lca(y, xx), lca(y, yy)&#125;;</div><div class="line">    sort(t, t + <span class="number">4</span>);</div><div class="line">    <span class="keyword">int</span> r = lca(x, y), rr = lca(xx, yy);</div><div class="line">    <span class="keyword">if</span> (dep[t[<span class="number">0</span>]] &lt; min(dep[r], dep[rr]) || dep[t[<span class="number">2</span>]] &lt; max(dep[r], dep[rr]))</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> tt = lca(t[<span class="number">2</span>], t[<span class="number">3</span>]);</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">1</span> + dep[t[<span class="number">2</span>]] + dep[t[<span class="number">3</span>]] - dep[tt] * <span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n, Q, u, v, ttt = <span class="number">0</span>;</div><div class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; Q;</div><div class="line">    FOR (i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">        <span class="keyword">auto</span> it = mp.find(a[i]);</div><div class="line">        <span class="keyword">if</span> (it == mp.end()) a[i] = mp[a[i]] = ++ttt;</div><div class="line">        <span class="keyword">else</span> a[i] = it-&gt;second;</div><div class="line">    &#125;</div><div class="line">    FOR (i, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line">    predfs(<span class="number">1</span>, <span class="number">1</span>); dfs(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    FOR (b, <span class="number">0</span>, B) &#123;</div><div class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</div><div class="line">        FOR (i, b * M, (b + <span class="number">1</span>) * M)</div><div class="line">            <span class="keyword">if</span> (i &gt;= n) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">else</span> cnt[w[i]]++;</div><div class="line">        FOR (i, <span class="number">0</span>, n)</div><div class="line">            c[i][b] = cnt[w[i]];</div><div class="line">    &#125;</div><div class="line">    FOR (i, <span class="number">0</span>, n)</div><div class="line">        FOR (b, <span class="number">0</span>, B) &#123;</div><div class="line">            <span class="keyword">int</span>&amp; t = c[i][b];</div><div class="line">            <span class="keyword">if</span> (i) t += c[i - <span class="number">1</span>][b];</div><div class="line">            <span class="keyword">if</span> (b) t += c[i][b - <span class="number">1</span>];</div><div class="line">            <span class="keyword">if</span> (i &amp;&amp; b) t -= c[i - <span class="number">1</span>][b - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">while</span> (Q--) &#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> x, y, xx, yy;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x, &amp;y, &amp;xx, &amp;yy);</div><div class="line">        VI b, t, bb, tt;</div><div class="line">        query(x, y, b, t);</div><div class="line">        query(xx, yy, bb, tt);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, go(b, t, bb, tt) - intersection(x, y, xx, yy));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;https://www.hackerrank.com/challenges/counting-on-a-tree&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给一棵树，树上的每一个点都有一个数字，询问对于给定的两条树上路径，有多少对不同的且分别属于两条路径的点满足对应数字相等。
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="HackerRank" scheme="http://yoursite.com/tags/HackerRank/"/>
    
      <category term="LCA" scheme="http://yoursite.com/tags/LCA/"/>
    
  </entry>
  
  <entry>
    <title>算法 - 二进制分组</title>
    <link href="http://yoursite.com/2017/08/04/group-by-binary/"/>
    <id>http://yoursite.com/2017/08/04/group-by-binary/</id>
    <published>2017-08-04T04:35:44.000Z</published>
    <updated>2017-08-04T15:11:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="资料">资料</h2><p>具体见 2013 年集训队论文《浅谈数据结构题的几个非经典解法》（作者：许昊然）。</p><h2 id="为什么">为什么</h2><ul><li>题目要求支持修改和查询操作。</li><li>但是你只有一种不支持修改的算法，往往是通过预处理来支持快速查询操作。</li><li>如果直接使用这种算法，可能要预处理很慢却要常常进行，查询很快却没几个，时间复杂度分配很不合理。</li><li>于是你想到，可以通过分块使时间复杂度变得均匀合理。就是把每 <span class="math inline">\(\sqrt n\)</span> 个修改操作（假设修改操作共 <span class="math inline">\(n\)</span> 个）分为一组，然后每次需要预处理的长度上限就变小了，作为代价，增加了查询的时间。</li><li>二进制分组是一种更为优秀的分组策略（具体和预处理复杂度和查询复杂度相关）。如果当前有 k 个修改操作，会按照 2 的幂将 k 分解从大到小的若干组。如果增加一个操作，分组的变化通过暴力删除和重建进行（当然如果可以合并的话那就只需要合并了）。(如 5 = 4 + 1, 6 = 4 + 2，从 5 增加到 6 就把原来那个大小为 1 的组删了，再将原来最后一个和新增加的那一个建一个大小为 2 的组)</li><li>复杂度：<ul><li>单次查询复杂度 <span class="math inline">\(\times \log n\)</span>，毕竟最多只有 <span class="math inline">\(\log n\)</span> 组嘛。</li><li>总的预处理复杂度是单次的 <span class="math inline">\(\log n\)</span> 倍，具体证明见论文。</li></ul></li></ul><a id="more"></a><h2 id="限制">限制</h2><ul><li>如果这不是一道强制在线题，我大可以选择时间分治。</li><li>如果有支持在线的算法或数据结构，我就没有必要用 log 的代价把在线换成离线。</li><li>要求修改操作的贡献可以任意次序累加。</li></ul><h2 id="例题">例题</h2><p>不存在的。这个算法想法很不错，不过很可能用不上。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;资料&quot;&gt;资料&lt;/h2&gt;
&lt;p&gt;具体见 2013 年集训队论文《浅谈数据结构题的几个非经典解法》（作者：许昊然）。&lt;/p&gt;
&lt;h2 id=&quot;为什么&quot;&gt;为什么&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;题目要求支持修改和查询操作。&lt;/li&gt;
&lt;li&gt;但是你只有一种不支持修改的算法，往往是通过预处理来支持快速查询操作。&lt;/li&gt;
&lt;li&gt;如果直接使用这种算法，可能要预处理很慢却要常常进行，查询很快却没几个，时间复杂度分配很不合理。&lt;/li&gt;
&lt;li&gt;于是你想到，可以通过分块使时间复杂度变得均匀合理。就是把每 &lt;span class=&quot;math inline&quot;&gt;\(\sqrt n\)&lt;/span&gt; 个修改操作（假设修改操作共 &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; 个）分为一组，然后每次需要预处理的长度上限就变小了，作为代价，增加了查询的时间。&lt;/li&gt;
&lt;li&gt;二进制分组是一种更为优秀的分组策略（具体和预处理复杂度和查询复杂度相关）。如果当前有 k 个修改操作，会按照 2 的幂将 k 分解从大到小的若干组。如果增加一个操作，分组的变化通过暴力删除和重建进行（当然如果可以合并的话那就只需要合并了）。(如 5 = 4 + 1, 6 = 4 + 2，从 5 增加到 6 就把原来那个大小为 1 的组删了，再将原来最后一个和新增加的那一个建一个大小为 2 的组)&lt;/li&gt;
&lt;li&gt;复杂度：
&lt;ul&gt;
&lt;li&gt;单次查询复杂度 &lt;span class=&quot;math inline&quot;&gt;\(\times \log n\)&lt;/span&gt;，毕竟最多只有 &lt;span class=&quot;math inline&quot;&gt;\(\log n\)&lt;/span&gt; 组嘛。&lt;/li&gt;
&lt;li&gt;总的预处理复杂度是单次的 &lt;span class=&quot;math inline&quot;&gt;\(\log n\)&lt;/span&gt; 倍，具体证明见论文。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://yoursite.com/categories/Algorithms/"/>
    
    
  </entry>
  
  <entry>
    <title>ACGN</title>
    <link href="http://yoursite.com/2017/08/03/ACGN/"/>
    <id>http://yoursite.com/2017/08/03/ACGN/</id>
    <published>2017-08-03T15:16:14.000Z</published>
    <updated>2017-10-23T12:15:51.164Z</updated>
    
    <content type="html"><![CDATA[<p>本文的目的是记录一些对于 ACGN 作品的感想，而所谓感想，难免带有强烈的主观色彩，勿较真。 大坑待填。 <a id="more"></a></p><h1 id="前言">前言</h1><h2 id="心态">心态</h2><p>我觉得通常有两种心态。</p><ul><li>其一，作品之外。带着批判、审视的眼光去看作品，于是便能够描述出作品的优劣之处，给予合理的评价。</li><li>其二，作品之内。尽量使自己代入作者所构建的世界中，并为人物的遭遇或悲或喜，甚至可能在看完之后久久不能释怀。 我更倾向于选择后者，因为这样我才能够感受作者想要展现的一切，想要表达的一切，也算是对作者的一种尊重。</li></ul><h2 id="设定">设定</h2><p>我觉得一部优秀的作品应该有优秀的设定，最好能够令人耳目一新。在我看来合理性是建立在设定上的，因此即便是设定离现实很遥远，但只要人物的行为符合设定下的情境和心理，我便认为这是合理的。倘若产生了不合理、突兀的情节，又用补充新的设定去弥补，那真是太糟糕了。</p><h2 id="过往">过往</h2><p>情节的起源、人物的动机常常源于人物童年时的经历（替弗洛伊德深表赞成）。</p><h2 id="从这里寻求什么">从这里寻求什么</h2><h2 id="观看顺序">观看顺序</h2><p>刚入坑时的感受与多年以后肯定有所不同。也许眼光更高，对作品的要求更为苛刻，也许以前令我耳目一新的情节就变为了烂大街的桥段。</p><h1 id="动画">动画</h1><h2 id="a">A+</h2><h3 id="命运石之门-steinsgatea">命运石之门 (Steins;Gate)【A+】</h3><h3 id="魔法少女小圆a">魔法少女小圆【A+】</h3><ul><li>编剧：虚渊玄</li><li>沙耶香，为他人祈愿，想成为正义的伙伴。那么她最终得到了她想要的东西了吗，又是否会后悔？ 这个角色最令我心痛，看着她从美好（自私）的祈愿走向注定的灭亡。一周目时觉得她有些不可理喻，伤害了自己，还伤害了朋友，而二周目后才发现，她可能是最为真实的那个角色。</li><li>晓美焰，为了小圆一次次轮回，曾经的愿望，逐渐成为模糊不清的结局，也许这一次，就是最后一次了吧。</li><li>从动画一开始，就展现了小圆所拥有的幸福。所谓幸福，着实是令人羡慕的事物。这样的她，本没有成为魔法少女的理由。</li></ul><h3 id="弹丸论破-弹丸轮舞a">弹丸论破 (弹丸轮舞)【A+】</h3><h3 id="fatezero-fza">Fate/Zero (FZ)【A+】</h3><ul><li>同名小说动画化，因为作者是虚渊玄，所以剧情上一定很精彩。事实上小说和动画都很不错。</li><li>动画中的许多登场人物中，最后得到救赎的寥寥无几。御主的愿望和英灵的夙愿，倘若想要完成自己的心愿就必须牺牲别人的心愿，因而注定充斥着悲剧。</li><li>正义是什么？是不是应该为了大部分人的生而舍弃少部分人？</li></ul><h3 id="fatestay-night-unlimited-blade-works-fsn-ubw篇a">Fate/stay night [Unlimited Blade Works] (FSN UBW篇)【A+】</h3><h3 id="冰菓a">冰菓【A+】</h3><h3 id="死亡笔记-death-notea">死亡笔记 (Death Note)【A+】</h3><h2 id="a-1">A</h2><h3 id="another-替身-a">Another (替身) 【A】</h3><p>当得知这部动画是由 绫辻行人 的作品改编之时，我便立即找小说来看。那么首先介绍一下绫辻行人。</p><p>绫辻行人的推理作品我一直很喜欢，新本格推理也令我着迷。一定要说好在哪里的话，我觉得氛围的营造十分出色。但如果你十分追求推理作品解答的合理、线索的公平，那可能就会感到失望了。推荐路线《十角馆杀人预告》-&gt;《雾越邸杀人事件》-&gt; 《钟表馆幽灵》</p><ul><li>《Another》在我看来不是轻小说（这个判断不会错的），所以改变成动画令我感到有些意外（其实还改编成漫画）。（也许是因为故事发生在小城市的校园中，剧情又从一开始就引人入胜，很像是轻小说的架构？）</li><li>这部动画成为禁片的缘故我觉得是因为血腥，画面可能比文字震撼多了。其实作者能写出那么血腥的画面我一点也不意外，因为我看过作者的另一部作品《杀人鬼》（极不推荐，光是恐怖真的没有意思）。</li><li>看完小说后，我试着去看动画，但由于女主形象和我看小说时想象出来的相差甚远，便放弃了。看完动画是很久之后的事了，那时小说中的情节只能记得大概。</li><li>超现实，甚至称得上是灵异。就凭这一点就意味着这部作品只会被少部分人喜爱。</li><li>如果从悬疑来看，这确实是出色的作品。</li><li>绫辻行人后来写了《Another S》（替身S）。与《Another》的关联并不大，不推荐阅读。（如果实在喜欢《Another》这部作品，也不妨阅读一下这个，顶多看完有点后悔。）</li></ul><h3 id="罪恶王冠a">罪恶王冠【A】</h3><h3 id="gosicka">GOSICK【A】</h3><h3 id="angel-beats-天使的心跳a">Angel Beats! (天使的心跳)【A】</h3><h3 id="天才麻将少女a">天才麻将少女【A】</h3><h3 id="刀剑神域a">刀剑神域【A】</h3><h2 id="a-">A-</h2><h3 id="re从零开始的异世界生活-re0a-">Re：从零开始的异世界生活 (Re:0)【A-】</h3><h3 id="clannada-">CLANNAD【A-】</h3><h3 id="四月是你的谎言a-">四月是你的谎言【A-】</h3><h2 id="b">B</h2><h3 id="编舟记b">编舟记【B】</h3><h3 id="狐妖小红娘b">狐妖小红娘【B】</h3><h3 id="小林家的龙女仆b">小林家的龙女仆【B】</h3><h3 id="埃罗芒阿老师-黄漫老师b">埃罗芒阿老师 (黄漫老师)【B】</h3><h3 id="混沌之子-chaosheadb">混沌之子 (Chaos;Head)【B】</h3><ul><li>特指动画</li></ul><h2 id="c">C</h2><h3 id="混沌之脑-chaoschildc">混沌之脑 (Chaos;Child)【C】</h3><ul><li>特指动画</li></ul><h3 id="时钟机关之星c">时钟机关之星【C】</h3><h1 id="小说">小说</h1><p>这里只列举了一部分我看过的轻小说。</p><h2 id="野村美月的作品">野村美月的作品</h2><h3 id="文学小女">文学小女【???】</h3><h3 id="光在地球之时">光在地球之时【??】</h3><h3 id="女装家教-女装皇家教师">女装家教 (女装皇家教师)【??】</h3><h3 id="陆与千星发送世界的少年与别墅的少女">陆与千星~发送世界的少年与别墅的少女【?】</h3><h2 id="动画化的作品">动画化的作品</h2><h3 id="刀剑神域a-">刀剑神域【A-】</h3><h3 id="机巧少女不会受伤b">机巧少女不会受伤【B】</h3><h3 id="精灵使的剑舞b">精灵使的剑舞【B】</h3><h3 id="绯弹的亚里亚b">绯弹的亚里亚【B】</h3><h3 id="约会大作战-date-a-lifeb">约会大作战 (DATE A LIFE)【B】</h3><h1 id="游戏">游戏</h1><h2 id="弹丸轮舞-2a">弹丸轮舞 2【A+】</h2><h1 id="漫画">漫画</h1><h2 id="端脑a">端脑【A】</h2><h1 id="备注">备注</h1><ul><li>文中的推荐路线很可能并没有把作者最优秀的作品放在最前面，因为考虑到作品的长度和难度，以及对该作者作品的优秀程度信任的累积过程。</li><li>评价，其中 A 代表我会向别人推荐这部作品。<ul><li>A+: 我认为很出色，而且是多数人都会喜欢的作品。</li><li>A: 我认为很出色，但可能只有少部分人会喜欢的作品。</li><li>A-: 大多数人都会喜欢，但我觉得没那么出色的作品。</li><li>B: 我认为一般，或者我不会推荐给别人看的作品。</li><li>C: 我认为糟糕，而且会劝别人不要看的作品。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文的目的是记录一些对于 ACGN 作品的感想，而所谓感想，难免带有强烈的主观色彩，勿较真。 大坑待填。
    
    </summary>
    
      <category term="杂文" scheme="http://yoursite.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>算法 - 整体二分</title>
    <link href="http://yoursite.com/2017/08/03/divide-and-conquer/"/>
    <id>http://yoursite.com/2017/08/03/divide-and-conquer/</id>
    <published>2017-08-02T16:11:58.000Z</published>
    <updated>2017-08-04T04:37:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="资料">资料</h2><p>具体见 2013 年集训队论文《浅谈数据结构题的几个非经典解法》（作者：许昊然）。<br>本文假设读者已经读过这篇论文中整体二分的部分。</p><h2 id="限制">限制</h2><ul><li>需要离线</li><li>可以二分答案</li><li>修改操作，要求对于一次查询，前面的修改操作可以交换顺序而不影响查询结果</li><li>贡献可以累加</li><li>注意将操作（包括询问）分离到两个新的答案区间这个过程的复杂度应该和操作数的个数相关，而不能和以下两项相关：<ul><li>总的区间（就是最初的答案区间）</li><li>尤其是<strong>序列总长</strong>，通常指的是询问区间的长度</li></ul></li></ul><a id="more"></a><h2 id="例题">例题</h2><h3 id="静态区间第k大">静态区间第k大</h3><p>题目：poj 2104, hdu 2665, <a href="http://acm.ecnu.edu.cn/problem/3315/" target="_blank" rel="external">EOJ 3315</a> 经典题。给出 n 个数，询问区间内第k大的数。通常做法是主席树。</p><ul><li>整体二分答案</li><li>目标：对于在答案区间 [l, r] 内的询问，分发到 [l, mid] 和 [mid + 1, r]，这个过程要求时间复杂度与询问个数或者答案区间长度相关而不能与 n 有关。</li><li>筛选出 n 个数中大小在 [mid + 1, r] 之间的数的位置，通过二分查找计算这些数有几个落在每个询问的区间内，存到临时答案数组 tmp_ans 中。</li><li>对于询问 q[i], 如果 k-1 &lt; tmp_ans[i] + q[i].cur，说明答案落在 [mid + 1, r] 中，反之，则落在 [l, mid] 中，由于大于 mid 的数的贡献不变，所以存在 q[i].cur 中，之后就不需要考虑 大于 mid 的数了。</li><li>至此，成功划分为子问题。</li><li>复杂度 <span class="math inline">\(O((N + Q)\log n\log C)\)</span>，<span class="math inline">\(C\)</span> 是数值范围</li><li>实际上用整体二分的时间消耗和主席树很接近，代码长度也没有优势，但是很省空间。</li></ul><p>代码 (EOJ 3315): <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1E9</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1E5</span> + <span class="number">100</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Q</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r, k, cur, ans;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> id, v;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> P&amp; rhs) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> v &lt; rhs.v;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Q query[maxn];</div><div class="line">P p[maxn];</div><div class="line"><span class="keyword">int</span> n, m, t, pos[maxn], pos_sz, tmp_ans[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;Q*&gt;&amp; q, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (q.empty()) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;</div><div class="line">        FOR (i, <span class="number">0</span>, q.size()) q[i]-&gt;ans = l;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>);</div><div class="line">    pos_sz = <span class="number">0</span>;</div><div class="line">    FOR (it, upper_bound(p, p + n, P&#123;<span class="number">0</span>, mid&#125;), upper_bound(p, p + n, P&#123;<span class="number">0</span>, r&#125;))</div><div class="line">        pos[pos_sz++] = it-&gt;id;</div><div class="line">    sort(pos, pos + pos_sz);</div><div class="line">    FOR (i, <span class="number">0</span>, q.size())</div><div class="line">        tmp_ans[i] = upper_bound(pos, pos + pos_sz, q[i]-&gt;r) -</div><div class="line">                     lower_bound(pos, pos + pos_sz, q[i]-&gt;l);</div><div class="line">    <span class="built_in">vector</span>&lt;Q*&gt; qL, qR;</div><div class="line">    FOR (i, <span class="number">0</span>, q.size()) &#123;</div><div class="line">        <span class="keyword">if</span> (q[i]-&gt;k - <span class="number">1</span> &lt; q[i]-&gt;cur + tmp_ans[i]) &#123;</div><div class="line">            qR.push_back(q[i]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            qL.push_back(q[i]);</div><div class="line">            q[i]-&gt;cur += tmp_ans[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    go(qL, l, mid);</div><div class="line">    go(qR, mid + <span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</div><div class="line">    FOR (i, <span class="number">0</span>, n) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">        p[i].v = t;</div><div class="line">        p[i].id = i + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    sort(p, p + n);</div><div class="line">    <span class="built_in">vector</span>&lt;Q*&gt; q;</div><div class="line">    FOR (i, <span class="number">0</span>, m) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;query[i].l, &amp;query[i].r, &amp;query[i].k);</div><div class="line">        query[i].cur = <span class="number">0</span>;</div><div class="line">        q.push_back(&amp;query[i]);</div><div class="line">    &#125;</div><div class="line">    go(q, -MAX, MAX);</div><div class="line">    FOR (i, <span class="number">0</span>, m) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, q[i]-&gt;ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="动态区间第k大">动态区间第k大</h3><p>题目：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5412" target="_blank" rel="external">hdu 5412</a>。 与之前的题目相比，额外支持一个操作，修改一个位置上的数。</p><ul><li>将修改操作视为删除一个数后插入一个数，一开始的初始状态看做进行了 n 次插入操作。</li><li>无论是查询操作还是修改操作，都需要分发到对应子区间内。</li><li>利用树状数组来保证单次的复杂度仅与待分发的操作数个数相关。</li><li>树状数组使用后进行还原，避免了<span class="math inline">\(O(n)\)</span>的清空操作</li></ul><p>代码 <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1E5</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1E9</span> + <span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Q</span> &#123;</span> <span class="comment">// tp = 0 -&gt; query, tp = 1 -&gt; modify</span></div><div class="line">    <span class="keyword">int</span> tp, pos, d, l, r, k, cur, ans;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> a[maxn], n, m, q_n, t, l, r, k, pos, c[maxn], tmp_ans[maxn];</div><div class="line">Q q[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i)) c[i] += k;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &gt; <span class="number">0</span>; i -= lowbit(i)) ret += c[i];</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;Q*&gt;&amp; q, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="built_in">cerr</span> &lt;&lt; l &lt;&lt; <span class="string">' '</span> &lt;&lt; r &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">if</span> (q.empty()) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;</div><div class="line">        FOR (i, <span class="number">0</span>, q.size()) q[i]-&gt;ans = l;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>);</div><div class="line">    FOR (i, <span class="number">0</span>, q.size())</div><div class="line">        <span class="keyword">if</span> (q[i]-&gt;tp &amp;&amp; <span class="built_in">abs</span>(q[i]-&gt;d) &lt;= mid) add(q[i]-&gt;pos, q[i]-&gt;d / <span class="built_in">abs</span>(q[i]-&gt; d));</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!q[i]-&gt;tp) tmp_ans[i] = sum(q[i]-&gt;r) - sum(q[i]-&gt;l - <span class="number">1</span>);</div><div class="line">    FOR (i, <span class="number">0</span>, q.size())</div><div class="line">        <span class="keyword">if</span> (q[i]-&gt;tp &amp;&amp; <span class="built_in">abs</span>(q[i]-&gt;d) &lt;= mid) add(q[i]-&gt;pos, -q[i]-&gt;d / <span class="built_in">abs</span>(q[i]-&gt; d));</div><div class="line">    <span class="built_in">vector</span>&lt;Q*&gt; qL, qR;</div><div class="line">    FOR (i, <span class="number">0</span>, q.size())</div><div class="line">        <span class="keyword">if</span> (!q[i]-&gt;tp) &#123;</div><div class="line">            <span class="keyword">if</span> (q[i]-&gt; k &gt; tmp_ans[i] + q[i]-&gt;cur) &#123;</div><div class="line">                qR.push_back(q[i]);</div><div class="line">                q[i]-&gt;cur += tmp_ans[i];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                qL.push_back(q[i]);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(q[i]-&gt;d) &lt;= mid) qL.push_back(q[i]);</div><div class="line">            <span class="keyword">else</span> qR.push_back(q[i]);</div><div class="line">        &#125;</div><div class="line">    go(qL, l, mid);</div><div class="line">    go(qR, mid + <span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">    FOR (i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">        q[m++] = Q&#123;<span class="number">1</span>, i, a[i], <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; q_n;</div><div class="line">    FOR (i, <span class="number">0</span>, q_n) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">        <span class="keyword">if</span> (t == <span class="number">2</span>) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;k);</div><div class="line">            q[m++] = Q&#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, l, r, k, <span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pos);</div><div class="line">            q[m++] = Q&#123;<span class="number">1</span>, pos, -a[pos], <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[pos]);</div><div class="line">            q[m++] = Q&#123;<span class="number">1</span>, pos, a[pos], <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">vector</span>&lt;Q*&gt; query; query.resize(m);</div><div class="line">    FOR (i, <span class="number">0</span>, m) query[i] = &amp;q[i];</div><div class="line">    go(query, <span class="number">1</span>, MAX);</div><div class="line">    FOR (i, <span class="number">0</span>, m)</div><div class="line">        <span class="keyword">if</span> (!q[i].tp)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, q[i].ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;资料&quot;&gt;资料&lt;/h2&gt;
&lt;p&gt;具体见 2013 年集训队论文《浅谈数据结构题的几个非经典解法》（作者：许昊然）。&lt;br&gt;
本文假设读者已经读过这篇论文中整体二分的部分。&lt;/p&gt;
&lt;h2 id=&quot;限制&quot;&gt;限制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;需要离线&lt;/li&gt;
&lt;li&gt;可以二分答案&lt;/li&gt;
&lt;li&gt;修改操作，要求对于一次查询，前面的修改操作可以交换顺序而不影响查询结果&lt;/li&gt;
&lt;li&gt;贡献可以累加&lt;/li&gt;
&lt;li&gt;注意将操作（包括询问）分离到两个新的答案区间这个过程的复杂度应该和操作数的个数相关，而不能和以下两项相关：
&lt;ul&gt;
&lt;li&gt;总的区间（就是最初的答案区间）&lt;/li&gt;
&lt;li&gt;尤其是&lt;strong&gt;序列总长&lt;/strong&gt;，通常指的是询问区间的长度&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://yoursite.com/categories/Algorithms/"/>
    
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Recurrent on a Tree</title>
    <link href="http://yoursite.com/2017/07/20/Recurrent-on-a-Tree/"/>
    <id>http://yoursite.com/2017/07/20/Recurrent-on-a-Tree/</id>
    <published>2017-07-20T14:43:11.000Z</published>
    <updated>2017-07-21T01:00:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p>https://www.hackerrank.com/contests/w34/challenges/recurrent-on-tree</p><h2 id="题意">题意</h2><p>给一棵树，每个点有一个值。求任意两个顶点（可以相同）路径上的值的和经过 f 函数后的和。f(x) 是斐波那契数列第 x 项。 <a id="more"></a></p><h2 id="题解">题解</h2><ul><li>斐波那契数列的某一项可以通过矩阵快速幂求得。与之类似的，利用矩阵乘法可以将 f(? + ?) 的问题转化为求 Mat(?) * Mat(?) 的问题，进而转化为寻常的树上 dp。</li><li>由于运算中矩阵都是某一个矩阵的幂，所以满足交换律。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> LL MOD = <span class="number">1E9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1E5</span> + <span class="number">1</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2E5</span> + <span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span> &#123;</span></div><div class="line">    LL v[<span class="number">2</span>][<span class="number">2</span>];</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        v[<span class="number">0</span>][<span class="number">0</span>] = v[<span class="number">0</span>][<span class="number">1</span>] = v[<span class="number">1</span>][<span class="number">0</span>] = v[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</div><div class="line">Mat <span class="keyword">operator</span> * (Mat x, Mat y);</div><div class="line">Mat <span class="keyword">operator</span> + (Mat x, Mat y);</div><div class="line">Mat <span class="keyword">operator</span> - (Mat x, Mat y);</div><div class="line"></div><div class="line">Mat r[maxm], s[maxn], ans, cs[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> n, u, v, a[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">    FOR(i, <span class="number">0</span>, G[k].size())</div><div class="line">        <span class="keyword">if</span> (G[k][i] != fa)</div><div class="line">            dfs(G[k][i], k);</div><div class="line">    FOR(i, <span class="number">0</span>, G[k].size()) &#123;</div><div class="line">        <span class="keyword">int</span> t = G[k][i];</div><div class="line">        <span class="keyword">if</span> (t == fa) <span class="keyword">continue</span>;</div><div class="line">        ans = ans + r[a[k]] * s[t] * (cs[k] - s[t]);</div><div class="line">        s[k] = s[k] + s[t];</div><div class="line">    &#125;</div><div class="line">    s[k] = s[k] * r[a[k]] + r[a[k]];</div><div class="line">    cs[fa] = cs[fa] + s[k];</div><div class="line">    ans = ans + s[k] + s[k] - r[a[k]];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">    FOR(i, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line">    FOR(i, <span class="number">1</span>, n + <span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; (ans.v[<span class="number">1</span>][<span class="number">0</span>] + ans.v[<span class="number">1</span>][<span class="number">1</span>]) % MOD &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    Mat p;</div><div class="line">    p.v[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; p.v[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    p.v[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>; p.v[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    r[<span class="number">0</span>].v[<span class="number">0</span>][<span class="number">0</span>] = r[<span class="number">0</span>].v[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    FOR(i, <span class="number">1</span>, maxm)</div><div class="line">        r[i] = r[i - <span class="number">1</span>] * p;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Mat <span class="keyword">operator</span> * (Mat x, Mat y) &#123;</div><div class="line">    Mat ret;</div><div class="line">    FOR(i, <span class="number">0</span>, <span class="number">2</span>)</div><div class="line">        FOR(j, <span class="number">0</span>, <span class="number">2</span>) &#123;</div><div class="line">            ret.v[i][j] = <span class="number">0</span>;</div><div class="line">            FOR(k, <span class="number">0</span>, <span class="number">2</span>)</div><div class="line">                ret.v[i][j] = (ret.v[i][j] + x.v[i][k] * y.v[k][j]) % MOD;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Mat <span class="keyword">operator</span> + (Mat x, Mat y) &#123;</div><div class="line">    Mat ret;</div><div class="line">    FOR(i, <span class="number">0</span>, <span class="number">2</span>)</div><div class="line">        FOR(j, <span class="number">0</span>, <span class="number">2</span>)</div><div class="line">            ret.v[i][j] = (x.v[i][j] + y.v[i][j]) % MOD;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Mat <span class="keyword">operator</span> - (Mat x, Mat y) &#123;</div><div class="line">    Mat ret;</div><div class="line">    FOR(i, <span class="number">0</span>, <span class="number">2</span>)</div><div class="line">        FOR(j, <span class="number">0</span>, <span class="number">2</span>)</div><div class="line">            ret.v[i][j] = (x.v[i][j] - y.v[i][j] + MOD) % MOD;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;https://www.hackerrank.com/contests/w34/challenges/recurrent-on-tree&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给一棵树，每个点有一个值。求任意两个顶点（可以相同）路径上的值的和经过 f 函数后的和。f(x) 是斐波那契数列第 x 项。
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="HackerRank" scheme="http://yoursite.com/tags/HackerRank/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Summing Pieces</title>
    <link href="http://yoursite.com/2017/07/12/Summing-Pieces/"/>
    <id>http://yoursite.com/2017/07/12/Summing-Pieces/</id>
    <published>2017-07-12T01:02:59.000Z</published>
    <updated>2017-07-12T01:56:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p>https://www.hackerrank.com/challenges/summing-pieces</p><h2 id="题意">题意</h2><p>给定一列数，分割成任意多段，某一种分法的值为每一段的数字和和段长之积之和，求所有方案的值的总和。 <a id="more"></a></p><h2 id="题解">题解</h2><ul><li>首先写一个会超时的<span class="math inline">\(O(n^2)\)</span>的算法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">FOR(i, <span class="number">1</span>, n + <span class="number">1</span>)</div><div class="line">    FOR(j, <span class="number">0</span>, i) &#123;</div><div class="line">        cnt[i] += cnt[j]; <span class="comment">// cnt[i] = 2 ^ (i - 1)</span></div><div class="line">        dp[i] += dp[j] + (p[i] - p[j]) * (i - j) * cnt[j]; <span class="comment">// p[i]: prefix sum</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure><ul><li>发现<span class="math inline">\(n\)</span>个数有<span class="math inline">\(2^{n-1}\)</span>种方案（可以理解为有<span class="math inline">\(n-1\)</span>个空隙，每个空隙都可以选择是否插板）</li><li>根据数据范围，这道题目要求<span class="math inline">\(O(n)\)</span>的算法</li></ul><h3 id="官方题解">官方题解</h3><ul><li>https://www.hackerrank.com/challenges/summing-pieces/editorial</li><li>将 dp[i] 的和式进行变形，利用前缀和快速转移</li></ul><h3 id="题解-1">题解</h3><ul><li>考虑长度为 l 的一段</li><li>它所有的位置覆盖每一个数的次数是这样的:<br>1, 2, … , m - 1, m, m, … , m, m - 1, …, 2, 1 (m = min(l, n + 1 - l))</li><li>对于某一个位置<ul><li>如果有一端在头或者尾，则被计算的次数为<span class="math inline">\(2^{n-l-1}\)</span></li><li>如果在中间，则被计算的次数为<span class="math inline">\(2^{n-l-2}\)</span></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> LL MOD = <span class="number">1E9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1E6</span> + <span class="number">10</span>;</div><div class="line">LL n, a[maxn], l[maxn], r[maxn], s[maxn], p[maxn] = &#123;<span class="number">1</span>&#125;;</div><div class="line">LL dp[maxn], cnt[maxn] = &#123;<span class="number">1</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">go</span><span class="params">(LL x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> l[x] + r[n + <span class="number">1</span> - x] + (s[n - x] - s[x]) * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    FOR(i, <span class="number">1</span>, maxn) p[i] = (p[i - <span class="number">1</span>] * <span class="number">2</span>) % MOD;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">    FOR(i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</div><div class="line">        l[i] = (i * a[i] + l[i - <span class="number">1</span>]) % MOD;</div><div class="line">        s[i] = (a[i] + s[i - <span class="number">1</span>]) % MOD;</div><div class="line">    &#125;</div><div class="line">    FORD(i, n, <span class="number">0</span>)</div><div class="line">        r[i] = (r[i + <span class="number">1</span>] + a[i] * (n + <span class="number">1</span> - i)) % MOD;</div><div class="line">    LL ans = n * s[n] % MOD;</div><div class="line">    FOR(i, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="keyword">int</span> t = ((s[i] + s[n] - s[n - i]) % MOD + MOD) % MOD;</div><div class="line">        <span class="keyword">if</span> (i != n - <span class="number">1</span>) ans += (go(min(i, n + <span class="number">1</span> - i)) - t) % MOD * i % MOD * p[n - i - <span class="number">2</span>];</div><div class="line">        ans += p[n - i - <span class="number">1</span>] * t  % MOD * i % MOD;</div><div class="line">        ans = (ans % MOD + MOD) % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;https://www.hackerrank.com/challenges/summing-pieces&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给定一列数，分割成任意多段，某一种分法的值为每一段的数字和和段长之积之和，求所有方案的值的总和。
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="HackerRank" scheme="http://yoursite.com/tags/HackerRank/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - New Year Game</title>
    <link href="http://yoursite.com/2017/07/10/New-Year-Game/"/>
    <id>http://yoursite.com/2017/07/10/New-Year-Game/</id>
    <published>2017-07-10T03:16:00.000Z</published>
    <updated>2017-07-12T01:57:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p>https://www.hackerrank.com/challenges/newyear-game</p><h2 id="题意">题意</h2><p>给一列数，A 和 B 轮流取，如果每个人取的数之和之差的绝对值被 3 整除，则 B 赢，反之 A 赢。 <a id="more"></a></p><h2 id="题解">题解</h2><ul><li>绝对值没有用，去掉</li><li>对于每个数，只关心它模 3 的余数</li><li>由于胜利条件不是无法操作，所以和 sg 无关</li><li>如果枚举每个状态，复杂度 <span class="math inline">\(O(n^3)\)</span>，会超时。<ul><li>但是如果找规律的话，能得出一个 <span class="math inline">\(O(n)\)</span> 的做法，然后就 AC 了</li></ul></li><li>对于模 3 余 0 的数，如果有偶数个就不影响胜负（显然），如果有奇数个就当成 1 个。所以复杂度变成了 <span class="math inline">\(O(n^2)\)</span></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2000</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">int</span> a[<span class="number">3</span>], T, n, t, k;</div><div class="line"><span class="keyword">bool</span> dp[<span class="number">2</span>][maxn][maxn][<span class="number">2</span>][<span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (x + <span class="number">3</span>) % <span class="number">3</span>; &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>] = dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">2</span>] = <span class="number">1</span>; <span class="comment">// first person win</span></div><div class="line">    dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// second person win</span></div><div class="line">    FOR(t, <span class="number">0</span>, <span class="number">2</span>) <span class="comment">// 0</span></div><div class="line">        FOR(i, <span class="number">0</span>, maxn) <span class="comment">// 1</span></div><div class="line">            FOR(j, <span class="number">0</span>, maxn) <span class="comment">// 2</span></div><div class="line">                FOR(r, <span class="number">0</span>, <span class="number">2</span>) <span class="comment">// 0: first, 1: second</span></div><div class="line">                    FOR(v, <span class="number">0</span>, <span class="number">3</span>) &#123; <span class="comment">// S_first - S_second (mod 3)</span></div><div class="line">                        <span class="keyword">int</span> s = r ? <span class="number">1</span> : <span class="number">-1</span>;</div><div class="line">                        <span class="keyword">bool</span> &amp;u = dp[t][i][j][r][v];</div><div class="line">                        <span class="keyword">if</span> (t) u |= !dp[t - <span class="number">1</span>][i][j][r ^ <span class="number">1</span>][f(v - s * <span class="number">0</span>)];</div><div class="line">                        <span class="keyword">if</span> (i) u |= !dp[t][i - <span class="number">1</span>][j][r ^ <span class="number">1</span>][f(v - s * <span class="number">1</span>)];</div><div class="line">                        <span class="keyword">if</span> (j) u |= !dp[t][i][j - <span class="number">1</span>][r ^ <span class="number">1</span>][f(v - s * <span class="number">2</span>)];</div><div class="line">                    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; T;</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</div><div class="line">        FOR(i, <span class="number">0</span>, n) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">            ++a[t % <span class="number">3</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dp[a[<span class="number">0</span>] % <span class="number">2</span>][a[<span class="number">1</span>]][a[<span class="number">2</span>]][<span class="number">0</span>][<span class="number">0</span>]) <span class="built_in">puts</span>(<span class="string">"Balsa"</span>); <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Koca"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;https://www.hackerrank.com/challenges/newyear-game&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给一列数，A 和 B 轮流取，如果每个人取的数之和之差的绝对值被 3 整除，则 B 赢，反之 A 赢。
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="HackerRank" scheme="http://yoursite.com/tags/HackerRank/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="博弈" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%BC%88/"/>
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Lena Sort</title>
    <link href="http://yoursite.com/2017/07/08/Lena-Sort/"/>
    <id>http://yoursite.com/2017/07/08/Lena-Sort/</id>
    <published>2017-07-08T12:49:38.000Z</published>
    <updated>2017-07-08T13:10:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p>https://www.hackerrank.com/challenges/lena-sort</p><h2 id="题意">题意</h2><p>题目中用伪代码给出一个排序算法，要求构造 1～n 的一个排列，使得排序过程中恰好比较了 k 次。 <a id="more"></a></p><h2 id="题解">题解</h2><h3 id="玄学做法">玄学做法</h3><ul><li>先算出长度为 d 的序列至多至少比较多少次，至多是单调，至少是每次把剩余的数列分成尽可能均匀的两部分。</li><li>先按至多的方案填，如果填不下去了不行了就按照至少的方案填。保证在填的过程中有解。</li></ul><h3 id="官方题解">官方题解</h3><ul><li>https://www.hackerrank.com/challenges/lena-sort/editorial</li><li>题目等价于构造一个 n 个节点二叉树，使得每个节点深度和为 k。</li><li>调整法。如果深度为 x 的那一层没有满，就可以把一个深度为 y 叶节点的深度变为 x，深度和减少了 y-x。</li><li>先把树造成一条链，然后从末端进行调整。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (remove_const<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (remove_const<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1E5</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> f[maxn], T, n, d;</div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> d == <span class="number">-1</span> || (f[d] &lt;= k &amp;&amp; k &lt;= <span class="number">1L</span>L * d * (d - <span class="number">1</span>) / <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x &gt; y) <span class="keyword">return</span>;</div><div class="line">    assert(check(y - x + <span class="number">1</span>, k));</div><div class="line">    <span class="keyword">int</span> d = y - x;</div><div class="line">    k -= d;</div><div class="line">    <span class="keyword">while</span> (d &gt;= <span class="number">0</span> &amp;&amp; check(d, k)) &#123; <span class="comment">// plan A</span></div><div class="line">        ans[l++] = x++;</div><div class="line">        k -= --d;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (d &gt; <span class="number">0</span>) &#123; <span class="comment">// plan B</span></div><div class="line">        <span class="keyword">int</span> t = (x + y + <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">while</span> (!check(y - t, k - f[t - x])) --t;</div><div class="line">        assert(t &gt; x);</div><div class="line">        ans[l] = t;</div><div class="line">        fill(x, t - <span class="number">1</span>, f[t - x], l + <span class="number">1</span>, l + t - x);</div><div class="line">        fill(t + <span class="number">1</span>, y, k - f[t - x], l + t - x + <span class="number">1</span>, r);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    FOR(i, <span class="number">2</span>, maxn)</div><div class="line">        f[i] = i - <span class="number">1</span> + f[i / <span class="number">2</span>] + f[(i - <span class="number">1</span>) / <span class="number">2</span>];</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; T;</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;d, &amp;n);</div><div class="line">        <span class="keyword">if</span> (!check(d, n)) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            fill(<span class="number">1</span>, d, n, <span class="number">1</span>, d);</div><div class="line">            FOR(i, <span class="number">1</span>, d + <span class="number">1</span>)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], i == d ? <span class="string">'\n'</span> : <span class="string">' '</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;https://www.hackerrank.com/challenges/lena-sort&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;题目中用伪代码给出一个排序算法，要求构造 1～n 的一个排列，使得排序过程中恰好比较了 k 次。
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="HackerRank" scheme="http://yoursite.com/tags/HackerRank/"/>
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Yet Another Minimax Problem</title>
    <link href="http://yoursite.com/2017/07/03/Yet-Another-Minimax-Problem/"/>
    <id>http://yoursite.com/2017/07/03/Yet-Another-Minimax-Problem/</id>
    <published>2017-07-03T09:22:44.000Z</published>
    <updated>2017-07-08T13:10:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p>https://www.hackerrank.com/challenges/yet-another-minimax-problem</p><h2 id="题意">题意</h2><p>给出 n 个整数，求一个排列使得相邻两数的异或值的最大值最小，输出该值。 <a id="more"></a></p><h2 id="题解">题解</h2><ul><li>如果有一位所有数都是 0 或 1，则异或之后这一位始终是 0。</li><li>如果有一位既有 1 又有 0，我可以把 1 和 0 各自放在一起，但是会由一个交界处，交界处的异或值的该位为 1，其他位置是 0。</li><li>问题就是找到所有数不完全相同的最高的那位，然后按那位是 0 或 1 分成两组，求两组分别取一个数是异或值最小。</li><li>利用 Trie 求一个数与一堆数异或的最小值。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (remove_const<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (remove_const<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3000</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n, a[maxn], b[maxn], la, lb, m;</div><div class="line"><span class="keyword">int</span> trie[maxn * <span class="number">20</span>][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> sz = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> u = <span class="number">0</span>;</div><div class="line">    FORD(i, m - <span class="number">1</span>, <span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">bool</span> b = (<span class="number">1</span> &lt;&lt; i) &amp; n;</div><div class="line">        <span class="keyword">if</span> (!trie[u][b]) trie[u][b] = sz++;</div><div class="line">        u = trie[u][b];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> u = <span class="number">0</span>, ret = <span class="number">0</span>;</div><div class="line">    FORD(i, m - <span class="number">1</span>, <span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">bool</span> b = (<span class="number">1</span> &lt;&lt; i) &amp; n;</div><div class="line">        <span class="keyword">if</span> (!trie[u][b]) &#123;</div><div class="line">            ret += (<span class="number">1</span> &lt;&lt; i);</div><div class="line">            b ^= <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        u = trie[u][b];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">    m = <span class="number">0</span>;</div><div class="line">    LL p = <span class="number">-1</span>, q = <span class="number">0</span>;</div><div class="line">    FOR(i, <span class="number">0</span>, n) &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</div><div class="line">        p &amp;= a[i];</div><div class="line">        q |= a[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!(p ^ q)) &#123; <span class="built_in">puts</span>(<span class="string">"0"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</div><div class="line">    m = <span class="number">31</span> - __builtin_clz(p ^ q);</div><div class="line">    FOR(i, <span class="number">0</span>, n) &#123;</div><div class="line">        <span class="keyword">if</span> (a[i] &amp; (<span class="number">1</span> &lt;&lt; m)) a[la++] = a[i];</div><div class="line">        <span class="keyword">else</span> b[lb++] = a[i];</div><div class="line">    &#125;</div><div class="line">    FOR(i, <span class="number">0</span>, la) add(a[i]);</div><div class="line">    LL ans = <span class="number">1E10</span>;</div><div class="line">    FOR(i, <span class="number">0</span>, lb) ans = min(ans, (LL)query(b[i]));</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans + (<span class="number">1</span> &lt;&lt; m) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;https://www.hackerrank.com/challenges/yet-another-minimax-problem&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给出 n 个整数，求一个排列使得相邻两数的异或值的最大值最小，输出该值。
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="HackerRank" scheme="http://yoursite.com/tags/HackerRank/"/>
    
      <category term="位运算" scheme="http://yoursite.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Sherlock&#39;s Array Merging Algorithm</title>
    <link href="http://yoursite.com/2017/07/03/Sherlock-s-Array-Merging-Algorithm/"/>
    <id>http://yoursite.com/2017/07/03/Sherlock-s-Array-Merging-Algorithm/</id>
    <published>2017-07-03T05:27:46.000Z</published>
    <updated>2017-07-08T13:13:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p>https://www.hackerrank.com/challenges/sherlocks-array-merging-algorithm/problem</p><h2 id="题解">题解</h2><ul><li>每一列的数在原数列中是连续且单调增的</li><li>每一列数的个数是单调减的 <a id="more"></a></li></ul><p>如果原数列是单调递增的，可以使用如下代码。其中 dp[i][j] 表示前 i 个数分成若干组且最后一组的大小为 j 的总方案数。 <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">FOR(i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</div><div class="line">    dp[i][i] = <span class="number">1</span>;</div><div class="line">    FOR(j, <span class="number">1</span>, i + <span class="number">1</span>) &#123;</div><div class="line">        FOR(k, j, i + <span class="number">1</span>) &#123;</div><div class="line">            dp[i][j] += dp[i - j][k] * A(k, j); <span class="comment">// A 是排列数</span></div></pre></td></tr></table></figure></p><ul><li>需要预处理阶乘和阶乘的逆元</li><li>看起来复杂度是<span class="math inline">\(O(n^3)\)</span>的，但是其实是<span class="math inline">\(O(n^3/6)\)</span>，所以竟然没有超时？</li></ul><p>完整代码 <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (remove_const<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (remove_const<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1200</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1E9</span> + <span class="number">7</span>;</div><div class="line">LL dp[maxn][maxn], n, a[maxn], l[maxn];</div><div class="line">LL invf[maxn], factor[maxn];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">quick_inverse</span><span class="params">(LL n, LL p)</span> </span>&#123;</div><div class="line">LL ret = <span class="number">1</span>;</div><div class="line">LL exponent = p - <span class="number">2</span>;</div><div class="line"><span class="keyword">for</span> (LL i = exponent; i; i &gt;&gt;= <span class="number">1</span>, n = n * n % p) &#123;</div><div class="line"><span class="keyword">if</span> (i &amp; <span class="number">1</span>) &#123;</div><div class="line">ret = ret * n % p;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_factorial_inverse</span><span class="params">(LL n, LL p)</span> </span>&#123;</div><div class="line">factor[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">factor[i] = i * factor[i - <span class="number">1</span>] % p;</div><div class="line">&#125;</div><div class="line">invf[n] = quick_inverse(factor[n], p);</div><div class="line"><span class="keyword">for</span> (LL i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</div><div class="line">invf[i] = invf[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % p;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">A</span><span class="params">(LL n, LL m)</span> </span>&#123; <span class="keyword">return</span> factor[n] * invf[n - m] % MOD; &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">    get_factorial_inverse(n, MOD);</div><div class="line">    FOR(i, <span class="number">0</span>, n) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</div><div class="line">    l[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    FOR(i, <span class="number">1</span>, n) <span class="keyword">if</span> (a[i] &gt;= a[i - <span class="number">1</span>]) l[i] = l[i - <span class="number">1</span>] + <span class="number">1</span>; <span class="keyword">else</span> l[i] = <span class="number">1</span>;</div><div class="line">    FOR(i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</div><div class="line">        FOR(j, <span class="number">1</span>, l[i - <span class="number">1</span>] + <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (i == l[i - <span class="number">1</span>]) dp[i][i] = <span class="number">1</span>;</div><div class="line">            FOR(k, j, i - j + <span class="number">1</span>)</div><div class="line">                dp[i][j] = (dp[i][j] + dp[i - j][k] * A(k, j)) % MOD;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    FOR(i, <span class="number">1</span>, l[n - <span class="number">1</span>] + <span class="number">1</span>) ans += dp[n][i];</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans % MOD &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;https://www.hackerrank.com/challenges/sherlocks-array-merging-algorithm/problem&lt;/p&gt;
&lt;h2 id=&quot;题解&quot;&gt;题解&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每一列的数在原数列中是连续且单调增的&lt;/li&gt;
&lt;li&gt;每一列数的个数是单调减的
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="HackerRank" scheme="http://yoursite.com/tags/HackerRank/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Fair Cut</title>
    <link href="http://yoursite.com/2017/07/02/Fair-Cut/"/>
    <id>http://yoursite.com/2017/07/02/Fair-Cut/</id>
    <published>2017-07-02T14:58:19.000Z</published>
    <updated>2017-07-08T13:13:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p>https://www.hackerrank.com/challenges/fair-cut</p><h2 id="题意">题意</h2><p>给 n 个数，分成 k 和 n - k 两组，使得两个组之间任意数对之差的绝对值之和最小。 <a id="more"></a></p><h2 id="题解">题解</h2><ul><li>将问题转化为对于两组数每组内部元素两两之差的绝对值之和的和最大</li><li>排个序把绝对值去了</li><li>对于一组有 k 个元素有序的数，两两之差之和的值为 Sum[a[i] * (2i + k - 1), {i, 1, k}]</li><li>dp[i][j] 表示第一组取 i 个数，第二组取 j 个数 （可以开成滚动数组）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (remove_const<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (remove_const<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3000</span> + <span class="number">5</span>;</div><div class="line">LL dp[maxn][maxn], n, k, a[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</div><div class="line">    FOR(i, <span class="number">0</span>, n) <span class="built_in">cin</span> &gt;&gt; a[i];</div><div class="line">    sort(a, a + n);</div><div class="line">    FOR(i, <span class="number">0</span>, k + <span class="number">1</span>)</div><div class="line">        FOR(j, <span class="number">0</span>, n - k + <span class="number">1</span>) &#123;</div><div class="line">            dp[i][j] = (i || j) ? <span class="number">-1E18</span> : <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (i) dp[i][j] = max(dp[i - <span class="number">1</span>][j] + a[i + j - <span class="number">1</span>] * (<span class="number">2</span> * i - k - <span class="number">1</span>), dp[i][j]);</div><div class="line">            <span class="keyword">if</span> (j) dp[i][j] = max(dp[i][j - <span class="number">1</span>] + a[i + j - <span class="number">1</span>] * (<span class="number">2</span> * j - (n - k) - <span class="number">1</span>), dp[i][j]);</div><div class="line">        &#125;</div><div class="line">    LL ans = -dp[k][n - k];</div><div class="line">    FOR(i, <span class="number">0</span>, n) ans += a[i] * (<span class="number">2</span> * i - n + <span class="number">1</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;https://www.hackerrank.com/challenges/fair-cut&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给 n 个数，分成 k 和 n - k 两组，使得两个组之间任意数对之差的绝对值之和最小。
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="HackerRank" scheme="http://yoursite.com/tags/HackerRank/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Decibinary Numbers</title>
    <link href="http://yoursite.com/2017/07/02/Decibinary-Numbers/"/>
    <id>http://yoursite.com/2017/07/02/Decibinary-Numbers/</id>
    <published>2017-07-02T06:31:58.000Z</published>
    <updated>2017-07-08T13:12:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p>https://www.hackerrank.com/challenges/prime-xor</p><h2 id="题意">题意</h2><p>定义一种新的数值表示方法，每一位权值和二进制一样，但是每一位都可以是 0～9。问第 k 大的数是几（如果表示的数值一样大的话，再看做十进制比较）。 <a id="more"></a></p><h2 id="题解">题解</h2><p>dp[i][j] 表示 i 用不超过 j 位表示的方案数</p><p>先估计一下范围，但是开一维 dp 做会有这样的问题：表示同样的值的数没法按数值大小排序。 <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">FOR(i, <span class="number">2</span>, <span class="number">1000000</span>) &#123;</div><div class="line">    FOR(j, <span class="number">0</span>, <span class="number">10</span>)</div><div class="line">        <span class="keyword">if</span> ((i - j) % <span class="number">2</span> == <span class="number">0</span>) dp[i] += dp[(i - j) / <span class="number">2</span>];</div><div class="line">    <span class="comment">// cerr &lt;&lt; i &lt;&lt; ' ' &lt;&lt; dp[i] &lt;&lt; endl;</span></div><div class="line">    s += dp[i];</div><div class="line">    <span class="keyword">if</span> (s &gt; <span class="number">1E16</span>) &#123;</div><div class="line">        <span class="built_in">cerr</span> &lt;&lt; dp[i] &lt;&lt; <span class="string">' '</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 114928788468 285112</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>代码 <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (remove_const<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (remove_const<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">285112</span> + <span class="number">5</span>, maxm = <span class="number">20</span>;</div><div class="line">LL dp[maxn][maxm], s[maxn] = &#123;<span class="number">1</span>&#125;;</div><div class="line">LL T, n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(LL n, LL rank, LL pos, <span class="keyword">bool</span> leading)</span> </span>&#123;</div><div class="line">    <span class="comment">// cerr &lt;&lt; n &lt;&lt; ' ' &lt;&lt; rank &lt;&lt; ' ' &lt;&lt; pos &lt;&lt; ' ' &lt;&lt; leading &lt;&lt; endl;</span></div><div class="line">    <span class="keyword">if</span> (!pos) <span class="keyword">return</span>;</div><div class="line">    assert(n &gt;= <span class="number">0</span> &amp;&amp; rank &gt;= <span class="number">0</span>);</div><div class="line">    LL t = <span class="number">1</span> &lt;&lt; (pos - <span class="number">1</span>);</div><div class="line">    LL s = <span class="number">0</span>;</div><div class="line">    FOR(i, <span class="number">0</span>, <span class="number">10</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (s + dp[n - i * t][pos - <span class="number">1</span>] &lt;= rank) s += dp[n - i * t][pos - <span class="number">1</span>];</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (!leading || i) <span class="built_in">cout</span> &lt;&lt; i;</div><div class="line">            go(n - i * t, rank - s, pos - <span class="number">1</span>, leading &amp;&amp; !i);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    FOR(i, <span class="number">0</span>, maxm) dp[<span class="number">0</span>][i] = <span class="number">1</span>;</div><div class="line">    FOR(i, <span class="number">1</span>, maxn) &#123;</div><div class="line">        s[i] = s[i - <span class="number">1</span>] + dp[i - <span class="number">1</span>][maxm - <span class="number">1</span>];</div><div class="line">        FOR(j, <span class="number">1</span>, maxm) &#123;</div><div class="line">            dp[i][j] = dp[i][j - <span class="number">1</span>];</div><div class="line">            LL t = <span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>);</div><div class="line">            FOR(k, <span class="number">1</span>, <span class="number">10</span>)</div><div class="line">                <span class="keyword">if</span> (t * k &lt;= i) dp[i][j] += dp[i - t * k][j - <span class="number">1</span>];</div><div class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; T;</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">        LL k = upper_bound(s, s + maxn, n) - s - <span class="number">1</span>;</div><div class="line">        go(k, n - s[k], maxm, <span class="number">1</span>);</div><div class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;https://www.hackerrank.com/challenges/prime-xor&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;定义一种新的数值表示方法，每一位权值和二进制一样，但是每一位都可以是 0～9。问第 k 大的数是几（如果表示的数值一样大的话，再看做十进制比较）。
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="HackerRank" scheme="http://yoursite.com/tags/HackerRank/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>【题解】HackerRank - Prime XOR</title>
    <link href="http://yoursite.com/2017/07/02/Prime-XOR/"/>
    <id>http://yoursite.com/2017/07/02/Prime-XOR/</id>
    <published>2017-07-02T02:49:42.000Z</published>
    <updated>2017-07-08T13:13:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p>https://www.hackerrank.com/challenges/prime-xor</p><h2 id="题意">题意</h2><p>给 n 个介于 3500 和 4500 之间的数，求不同子集（可以包含重复元素）的总数，使得子集异或和是质数。 <a id="more"></a></p><h2 id="题解">题解</h2><p>异或和的范围在 0～8191 之间，虽然 n 很大，但是每一个数的范围很小，因此可以依次处理 3500～4500 之间的每一个数。</p><p>dp[i][k] = dp[i - 1][k] * (a[i] / 2 + 1) + dp[i - 1][k ^ v[i]] * ((a[i] + 1) / 2)</p><ul><li>dp[i][k]表示前 i 个数异或和为 k 的方案数</li><li>a[i]记录 n 个数中 i 出现的次数，(a[i] / 2 + 1) 表示取偶数个，((a[i] + 1) / 2) 表示取奇数个</li><li>v[i]表示第 i 个数的值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (__typeof(y) i = (x), _##i = (y); i &lt; _##i; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (__typeof(x) i = (x), _##i = (y); i &gt; _##i; --i)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1E9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">8192</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">bool</span> p[maxn];</div><div class="line"><span class="keyword">int</span> t, a[<span class="number">5000</span>], T, n, u;</div><div class="line">LL dp[<span class="number">2</span>][maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; ++i)</div><div class="line">        <span class="keyword">if</span> (!p[i])</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt; maxn; j += i)</div><div class="line">                p[j] = <span class="number">1</span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp); u = <span class="number">0</span>; dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        FOR(i, <span class="number">0</span>, n) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">            ++a[t];</div><div class="line">        &#125;</div><div class="line">        FOR(i, <span class="number">3500</span>, <span class="number">4501</span>)</div><div class="line">            <span class="keyword">if</span> (a[i]) &#123;</div><div class="line">                u ^= <span class="number">1</span>;</div><div class="line">                FOR(j, <span class="number">0</span>, <span class="number">8192</span>)</div><div class="line">                    dp[u][j] = ((<span class="number">1</span> + a[i] / <span class="number">2</span>) * dp[u ^ <span class="number">1</span>][j] + (a[i] + <span class="number">1</span>) / <span class="number">2</span> * dp[u ^ <span class="number">1</span>][j ^ i]) % MOD;</div><div class="line">            &#125;</div><div class="line">        LL ans = <span class="number">0</span>;</div><div class="line">        FOR(i, <span class="number">2</span>, <span class="number">8192</span>)</div><div class="line">            <span class="keyword">if</span> (!p[i]) ans += dp[u][i];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans % MOD);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;https://www.hackerrank.com/challenges/prime-xor&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给 n 个介于 3500 和 4500 之间的数，求不同子集（可以包含重复元素）的总数，使得子集异或和是质数。
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="HackerRank" scheme="http://yoursite.com/tags/HackerRank/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>C++ 奇技淫巧</title>
    <link href="http://yoursite.com/2017/06/17/cpp-tricks/"/>
    <id>http://yoursite.com/2017/06/17/cpp-tricks/</id>
    <published>2017-06-17T09:58:12.000Z</published>
    <updated>2017-10-29T12:34:01.364Z</updated>
    
    <content type="html"><![CDATA[<p>想了想，还是详见模板库吧。</p>]]></content>
    
    <summary type="html">
    
      反正也没什么用，对吧？
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
  </entry>
  
  <entry>
    <title>算法 - 博弈问题</title>
    <link href="http://yoursite.com/2017/06/09/Algorithms-Game-Theory/"/>
    <id>http://yoursite.com/2017/06/09/Algorithms-Game-Theory/</id>
    <published>2017-06-09T14:30:27.000Z</published>
    <updated>2017-07-03T14:39:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本思想">基本思想</h2><p>游戏可以等效为一个有向图，每一个状态相当于图中的一个节点，而可能的状态转移是图中的边。如果必胜态的后继中存在必败态，而必败态的后继全是必胜态。</p><h2 id="sg函数">SG函数</h2><p><span class="math display">\[ SG(u) = mex\{ SG(v)|u \to v \} \]</span> 函数值为 0 代表必败态，不为 0 代表必胜态。（也就是说，0 只能转移到非 0，而非 0 一定能转移到 0。） 一个组合游戏的 SG 和等于所有子游戏的异或和。 <a id="more"></a> ## Anti-SG 和 SJ 定理 Anti-SG 游戏： 走完最后一步的一方输，也就是说，SG 为 0 的局面不一定为终止局面。</p><p>SJ 定理： 对于 Anti-SG 游戏，如果游戏结束的条件是所有子游戏的 SG 值均为 0 时，那么先手必胜的条件是： <strong>SG 值不为零</strong> xor <strong>没有子游戏 SG 值大于1</strong></p><h2 id="every-sg">Every-SG</h2><p>每一个非终止状态的子游戏必须进行操作。 <span class="math display">\[step(v) =\begin{cases}0, &amp; \text{$v$ 为终止状态} \\max\{step(u)|SG(u)=0\}+1,  &amp; \text{$SG(v)&gt;0$} \\min\{step(u)\}, &amp; \text{$SG(v)=0$}  \\\end{cases}\]</span> 先手必胜的充要条件：所有子游戏中最大的 step 值为奇数</p><h2 id="green-hackenbush">Green Hackenbush</h2><p>图上的删边游戏，过于复杂，自行搜索。</p><h2 id="题目">题目</h2><h3 id="解题思路">解题思路</h3><p>尽量将问题转换成 Nim 游戏计算 SG 和。 确定边界状态的 SG 值（不存在时为 -1） SG 计算过于复杂时打表找规律</p><h3 id="zero-move">zero-move</h3><p>在 Nim 游戏的基础上增加一个规则，每一堆石子可以进行一次空操作（与玩家无关）。这道题看似同一次状态可以多次抵达，实则不然。同样多的石子，根据经历过空操作与否可以看做两个状态。<br>新的 SG 值：</p><table><thead><tr class="header"><th>n</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>…</th></tr></thead><tbody><tr class="odd"><td>SG</td><td>2</td><td>1</td><td>4</td><td>3</td><td>6</td><td>5</td><td>…</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本思想&quot;&gt;基本思想&lt;/h2&gt;
&lt;p&gt;游戏可以等效为一个有向图，每一个状态相当于图中的一个节点，而可能的状态转移是图中的边。如果必胜态的后继中存在必败态，而必败态的后继全是必胜态。&lt;/p&gt;
&lt;h2 id=&quot;sg函数&quot;&gt;SG函数&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ SG(u) = mex\{ SG(v)|u \to v \} \]&lt;/span&gt; 函数值为 0 代表必败态，不为 0 代表必胜态。（也就是说，0 只能转移到非 0，而非 0 一定能转移到 0。） 一个组合游戏的 SG 和等于所有子游戏的异或和。
    
    </summary>
    
      <category term="Algorithms" scheme="http://yoursite.com/categories/Algorithms/"/>
    
    
  </entry>
  
  <entry>
    <title>Arch Linux - 大型攻略</title>
    <link href="http://yoursite.com/2017/06/08/Linux-Another-Home/"/>
    <id>http://yoursite.com/2017/06/08/Linux-Another-Home/</id>
    <published>2017-06-08T12:26:18.000Z</published>
    <updated>2017-10-29T12:53:04.710Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章的主要目的是记录我在使用 Linux 的过程中遇到的坑和相应的解决方案，次要目的是帮助读者快速构建一个舒适的 Linux 使用环境。后文的描述基于 Arch Linux 和 KDE 的方案，大部分也适用于 Kubuntu 用户。</p><h2 id="update-2017.10">UPDATE 2017.10</h2><ul><li>重装了系统，现在选择了基于 arch 的发行版 majaro（桌面环境还是 KDE），安装确实方便挺多，也称得上是开箱即用。</li><li>这两个月 <code>shadowsocks-qt5</code> 的最新版本很不好用，估计是依赖的问题（github 上 issue 不断）。所以还是选择了 <code>shadowsocks-libev</code> 命令行版本，配合 <code>polipo</code> socks5 转 HTTP 代理（其实不怎么用得到）。</li></ul><h2 id="发行版的选择">发行版的选择</h2><p>起初我选择的是 Ubuntu，其主要原因有如下几点：</p><ul><li>用户的基数大，遇到问题能够方便得找到相应的解决方案</li><li>“网易云音乐”、“搜狗输入法”等应用提供的安装包是 Deb 包（ Ubuntu 可以直接安装，而 Debian 家族以外的发行版无法直接使用）</li></ul><p>在使用 Ubuntu 将近一年后，我选择了 Arch Linux，它不仅拥有对我而言 Ubuntu 所有的优势，还提供了额外的便利：</p><ul><li>官方仓库和用户软件仓库（AUR）提供了我想要的全部，包括上文中的“网易云音乐”和“搜狗输入法”。</li><li>拥有官方 Wiki，对于解决实际问题和学习 Linux 很有帮助</li><li>没有预装可有可无的软件包，用户拥有更大的选择余地 <a id="more"></a> ## 安装 由于 Arch 的安装是在 CLI（命令行）下进行的，对于新用户可能有些困难。而在官方 Wiki 和网上教程的帮助下，完成安装应该也不成问题。</li></ul><h2 id="桌面环境的选择">桌面环境的选择</h2><p>在尝试过许多桌面环境后，我体会到了 KDE 的可贵。</p><ul><li>可定制性远强于其他桌面环境。<ul><li>有许多桌面控件可供选用（后文会有介绍）算法—— 博弈</li><li>可以很方便得修改 panel 的样式，于是我可以很轻松地将桌面从 Win10 风格切换至 OS X 风格。</li><li>可以在系统设置中修改动画效果</li><li>提供了虚拟桌面（Virtual desktops）和活动（Activities）的功能</li><li>可以修改主题、图标、窗口样式，而且默认主题十分美观</li></ul></li><li>系统设置丰富 （有些东西没法通过图形界面设置的话就只能通过命令行或者修改配置文件来达到目的，十分不便）</li><li>有些集成的软件十分好用，比如文件管理器 dolphin，终端 konsole，便签 Knotes，快捷搜索 Lancelot（当然无论是什么桌面环境这些应用都可以做相应的替换，但是原生不容易出问题，体验也更为一致）。</li><li>缺点<ul><li>集成了一些无用的软件，虽然可以在安装时进行筛选</li><li>设置中播放设备的选择太过繁琐</li><li>难以名状的 Bug，这个似乎很难避免，只要数量不多频率不高问题不大还是可以忍受一些的</li></ul></li></ul><p>KDE 的安装也十分便捷，参照 Wiki 即可，配合 SDDM 风味更佳。</p><h2 id="常用软件">常用软件</h2><p>以下均为包名，可以直接安装（有些属于 AUR）</p><ul><li>base-devel</li><li>chromium / firefox / google-chrome 浏览器三选一</li><li>shadowsocks-qt5 科学上网</li><li>wps-office &amp; ttf-wps-fonts WPS</li><li>netease-cloud-music 网易云音乐 （字变成方块，间歇性白屏，沙盒无法启动，各种问题的解决方法在 AUR 讨论区里有。<a href="https://aur.archlinux.org/packages/netease-cloud-music/" target="_blank" rel="external">链接</a>）</li><li>youdao-dict 有道词典</li><li>fcitx-sogoupinyin 搜狗拼音</li><li>calibre 电子书管理</li><li>atom 文本编辑器</li><li>redshift 屏幕色温调节</li><li>uget 多线程下载工具，支持磁链、种子（如果选用 aria2 作为后端，还需安装 aria2）</li><li>vlc 视频播放器</li><li>p7zip-natspec &amp; unzip-natspec 使压缩包管理软件 Ark 解压（不是查看）zip、7z时避免出现中文文件名编码错误的问题</li><li>ntfs-3g 挂载 ntfs 分区（访问 Windows 分区或 ntfs 的移动硬盘）</li></ul><p>以下软件给出安装方法</p><ul><li><a href="https://tiebamma.github.io/InstallTutorial/" target="_blank" rel="external">Mathematica</a> 数学计算</li><li><a href="https://www.jetbrains.com/" target="_blank" rel="external">Jetbrains</a> IDE (可以通过 AUR 安装)</li></ul><h3 id="qq的安装">QQ的安装</h3><p>解决方案：crossover 16 或 deepin-QQ with crossover 15 <a href="https://www.findhao.net/easycoding/1748" target="_blank" rel="external">参考链接</a><br>crossover 16 有对多个版本的 QQ 的官方支持，建议购买正版，有试用期。<br>备选方案：crossover 15 的 crack 对 16 同样有效，需要的人自己找。<br>另：如果发现许多字变为方块，那么安装 crossover 中的 QQ 2012，期间安装的一些依赖可以解决这个问题。</p><h3 id="atom相关">Atom相关</h3><p>项目的开发我还是建议使用 IDE，要让编辑器能拥有 IDE 的功能可能需要花大量的精力来改造。</p><h4 id="apm">apm</h4><p>Atom 的包管理器 apm 其实就是 npm，于是我们可以通过类似的方法为其设置镜像来加快下载速度。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm set registry https://registry.npm.taobao.org</div><div class="line">apm config set registry https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p><h4 id="插件">插件</h4><ul><li>linter</li><li>linter-gcc</li><li>file-icons</li><li>platformio-ide-terminal 这个好像也不怎么好用，推荐一发下拉式终端 <a href="https://www.archlinux.org/packages/community/x86_64/yakuake/" target="_blank" rel="external">yakuake</a></li></ul><h2 id="桌面控件">桌面控件</h2><ul><li><a href="https://store.kde.org/p/998916" target="_blank" rel="external">Redshift Control</a> 控制 redshift</li><li><a href="https://store.kde.org/p/998895" target="_blank" rel="external">Netspeed Widget</a> 网速监控</li><li><a href="https://store.kde.org/p/998901" target="_blank" rel="external">Event Calendar</a> 带天气和倒计时的日历，可以和谷歌日历同步日程</li><li><a href="https://store.kde.org/p/998915" target="_blank" rel="external">Thermal Monitor</a> 温度监测</li><li><a href="https://store.kde.org/p/998909" target="_blank" rel="external">PlayBar2</a> 播放控制</li><li><a href="https://github.com/psifidotos/Latte-Dock" target="_blank" rel="external">Latte Dock</a> 美观好用的 dock</li></ul><h3 id="额外">额外</h3><ul><li><a href="https://github.com/martenjj/wallpaperswitch" target="_blank" rel="external">Wallpaper Switcher</a> 不同虚拟桌面可以设置不同壁纸的特性作为 bug 在某一个版本后消失了，但许多用户认为这是一个好功能。于是一个 KDE 的开发人员兑现承诺开发了这个工具提供了这个功能。</li><li><a href="https://store.kde.org/p/998910" target="_blank" rel="external">Active Window Control</a>窗口在最大化后还会保留系统标题栏，而屏幕顶部还有一个 panel（如果和我一样把状态栏放到顶部），这样就会有两层，既不美观又浪费了空间。通过安装这个控件并且设置全屏隐藏标题栏后，可以达到和 OS X 同样的全屏后合并标题栏和系统状态栏的效果。</li></ul><h2 id="易用性">易用性</h2><h3 id="按键映射">按键映射</h3><p>创建文件<code>～/.Xmodmap</code>，fcitx 会自动读取并应用 xmodmap 的设置 以下是我使用的配置文件，将<code>Caps_Lock</code>修改为<code>Ctrl</code>，并交换<code>`~</code> 和<code>Esc</code> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">remove Lock = Caps_Lock</div><div class="line">keysym Caps_Lock = Control_L</div><div class="line">add Control = Control_L</div><div class="line">keysym Escape = grave asciitilde grave asciitilde</div><div class="line">keysym grave = Escape</div></pre></td></tr></table></figure></p><h3 id="鼠标侧键">鼠标侧键</h3><p>对于拥有鼠标侧键的用户而言，将这些侧键映射为常用快捷键（如浏览器标签页的切换、虚拟桌面的切换）可以带来极大的便捷。<br>我使用的软件是 <a href="https://www.archlinux.org/packages/community/x86_64/xbindkeys/" target="_blank" rel="external">xbindkeys</a>，在<code>~/.xbindkeysrc</code>中修改配置，以下是我使用的配置 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># 侧键切换虚拟桌面</div><div class="line">&quot;xte &apos;keydown Super_L&apos; &apos;key Tab&apos; &apos;keyup Super_L&apos;&quot;</div><div class="line">  b:8</div><div class="line"></div><div class="line">&quot;xte &apos;keydown Super_L&apos; &apos;key Tab&apos; &apos;keyup Super_L&apos;&quot;</div><div class="line">  b:9</div><div class="line"></div><div class="line">#  水平滚轮切换浏览器标签页，延迟是为了防止切换过快</div><div class="line">&quot;xte &apos;keydown Control_L&apos; &apos;usleep 200000&apos; &apos;key Tab&apos; &apos;keyup Control_L&apos;&quot;</div><div class="line">  b:7</div><div class="line"></div><div class="line">&quot;xte &apos;keydown Control_L&apos; &apos;keydown Shift_L&apos; &apos;usleep 200000&apos; &apos;key Tab&apos; &apos;keyup Shift_L&apos; &apos;keyup Control_L&apos;&quot;</div><div class="line">  b:6</div></pre></td></tr></table></figure></p><h3 id="与-google-drive-文件同步">与 Google Drive 文件同步</h3><p>使用<code>grive</code>，由于对应 GUI 工具<code>grive-tools</code>不支持代理，因此无法使用。<br>替代方案：在系统设置中添加计划任务进行定时同步。</p><h4 id="参考文章">参考文章</h4><p>https://blog.hanschen.org/2009/10/13/mouse-shortcuts-with-xbindkeys/ https://wiki.archlinux.org/index.php/Mouse_buttons#xvkbd_and_xbindkeys ### 触控板手势 对于长期使用触控板的用户来说，多指手势可以用来替代许多快捷键。<br>我使用的软件是 <a href="https://wiki.archlinux.org/index.php/Touchegg" target="_blank" rel="external">Touchegg</a>以及对应的 GUI 配置工具 <a href="https://aur.archlinux.org/packages/touchegg-gce-git/" target="_blank" rel="external">touchegg-gce-git</a></p><h2 id="tips">Tips</h2><ul><li>dolphin 中<code>Alt + .</code>切换是否显示隐藏文件</li><li>更新 kernel 之后不要忘记重启</li><li><code>yaourt -Syu</code>频率太低会更新失败，太高会占用大量硬盘空间（<code>/var/cache/pacman/pkg/</code>）</li><li>arch 是为数不多的关闭 user namespace 的发行版之一，所以 unprivileged container 无法使用</li><li>如果 PGP 签名挂了 那么</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo rm -rf /etc/pacman.d/gnupg</div><div class="line">sudo pacman-key --init</div><div class="line">sudo pacman-key --populate archlinux</div><div class="line">sudo pacman-key --refresh-keys</div></pre></td></tr></table></figure><ul><li>与其手动下载安装包，不如去 AUR 找一找，这样更新会省力不少。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章的主要目的是记录我在使用 Linux 的过程中遇到的坑和相应的解决方案，次要目的是帮助读者快速构建一个舒适的 Linux 使用环境。后文的描述基于 Arch Linux 和 KDE 的方案，大部分也适用于 Kubuntu 用户。&lt;/p&gt;
&lt;h2 id=&quot;update-2017.10&quot;&gt;UPDATE 2017.10&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;重装了系统，现在选择了基于 arch 的发行版 majaro（桌面环境还是 KDE），安装确实方便挺多，也称得上是开箱即用。&lt;/li&gt;
&lt;li&gt;这两个月 &lt;code&gt;shadowsocks-qt5&lt;/code&gt; 的最新版本很不好用，估计是依赖的问题（github 上 issue 不断）。所以还是选择了 &lt;code&gt;shadowsocks-libev&lt;/code&gt; 命令行版本，配合 &lt;code&gt;polipo&lt;/code&gt; socks5 转 HTTP 代理（其实不怎么用得到）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;发行版的选择&quot;&gt;发行版的选择&lt;/h2&gt;
&lt;p&gt;起初我选择的是 Ubuntu，其主要原因有如下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户的基数大，遇到问题能够方便得找到相应的解决方案&lt;/li&gt;
&lt;li&gt;“网易云音乐”、“搜狗输入法”等应用提供的安装包是 Deb 包（ Ubuntu 可以直接安装，而 Debian 家族以外的发行版无法直接使用）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在使用 Ubuntu 将近一年后，我选择了 Arch Linux，它不仅拥有对我而言 Ubuntu 所有的优势，还提供了额外的便利：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官方仓库和用户软件仓库（AUR）提供了我想要的全部，包括上文中的“网易云音乐”和“搜狗输入法”。&lt;/li&gt;
&lt;li&gt;拥有官方 Wiki，对于解决实际问题和学习 Linux 很有帮助&lt;/li&gt;
&lt;li&gt;没有预装可有可无的软件包，用户拥有更大的选择余地
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
</feed>
